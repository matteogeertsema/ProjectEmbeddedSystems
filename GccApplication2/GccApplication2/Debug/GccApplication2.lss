
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000082e  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  000008d0  2**0
                  ALLOC
  3 .stab         00002268  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000708  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003240  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ea  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000272  00000000  00000000  00003aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e2  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00004240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019d  00000000  00000000  00004350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036d  00000000  00000000  000044ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	sts	0x9b, r26
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	sts	0x5e, r27
  82:	aa aa       	sts	0x9a, r26
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	sts	0x41, r30
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__data_load_end+0x80>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ee e2       	ldi	r30, 0x2E	; 46
  d6:	f8 e0       	ldi	r31, 0x08	; 8
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	ae 30       	cpi	r26, 0x0E	; 14
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	ae e0       	ldi	r26, 0x0E	; 14
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a2 31       	cpi	r26, 0x12	; 18
  f0:	b1 07       	cpc	r27, r17
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  f8:	0c 94 15 04 	jmp	0x82a	; 0x82a <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <read>:
uint8_t counting(void); // need to put them in .h

// read value from pin
int read(uint8_t pin)
{
    if (PINB & _BV(pin)) { // if pin set in port
 100:	23 b1       	in	r18, 0x03	; 3
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <read+0xa>
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <read+0x6>
        return HIGH;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	20 fd       	sbrc	r18, 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <read+0x1a>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
    } else {
        return LOW;
    }
}
 11a:	08 95       	ret

0000011c <write>:

// write value to pin
void write(uint8_t pin, uint8_t val)
{
    if (val == LOW) {
 11c:	66 23       	and	r22, r22
 11e:	71 f4       	brne	.+28     	; 0x13c <write+0x20>
        PORTB &= ~(_BV(pin)); // clear bit
 120:	45 b1       	in	r20, 0x05	; 5
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <write+0x12>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <write+0xe>
 132:	cb 01       	movw	r24, r22
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	85 b9       	out	0x05, r24	; 5
 13a:	08 95       	ret
    } else {
        PORTB |= _BV(pin); // set bit
 13c:	45 b1       	in	r20, 0x05	; 5
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <write+0x2e>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <write+0x2a>
 14e:	cb 01       	movw	r24, r22
 150:	84 2b       	or	r24, r20
 152:	85 b9       	out	0x05, r24	; 5
 154:	08 95       	ret

00000156 <shiftOut>:
    }
}

// shift out value to data
void shiftOut (uint8_t val)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	d8 2f       	mov	r29, r24
 15c:	c8 e0       	ldi	r28, 0x08	; 8
    uint8_t i;
    for (i = 0; i < 8; i++)  {
        write(clock, LOW);   // bit valid on rising edge
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
        write(data, val & 1 ? HIGH : LOW); // lsb first
 166:	6d 2f       	mov	r22, r29
 168:	61 70       	andi	r22, 0x01	; 1
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
        val = val >> 1;
 170:	d6 95       	lsr	r29
        write(clock, HIGH);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
 17a:	c1 50       	subi	r28, 0x01	; 1

// shift out value to data
void shiftOut (uint8_t val)
{
    uint8_t i;
    for (i = 0; i < 8; i++)  {
 17c:	81 f7       	brne	.-32     	; 0x15e <shiftOut+0x8>
        write(clock, LOW);   // bit valid on rising edge
        write(data, val & 1 ? HIGH : LOW); // lsb first
        val = val >> 1;
        write(clock, HIGH);
    }
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <sendCommand>:

void sendCommand(uint8_t value)
{
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
    write(strobe, LOW);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
    shiftOut(value);
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
    write(strobe, HIGH);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <reset>:

void reset()
{
 1a2:	cf 93       	push	r28
    // clear memory - all 16 addresses
    sendCommand(0x40); // set auto increment mode
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	0e 94 c2 00 	call	0x184	; 0x184 <sendCommand>
    write(strobe, LOW);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
    shiftOut(0xc0);   // set starting address to 0
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
 1b8:	c0 e1       	ldi	r28, 0x10	; 16
    for(uint8_t i = 0; i < 16; i++)
    {
        shiftOut(0x00);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
 1c0:	c1 50       	subi	r28, 0x01	; 1
{
    // clear memory - all 16 addresses
    sendCommand(0x40); // set auto increment mode
    write(strobe, LOW);
    shiftOut(0xc0);   // set starting address to 0
    for(uint8_t i = 0; i < 16; i++)
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <reset+0x18>
    {
        shiftOut(0x00);
    }
    write(strobe, HIGH);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
}
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <setup>:

void setup()
{
     DDRB=0xff; // set port B as output
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	84 b9       	out	0x04, r24	; 4

    sendCommand(0x89);  // activate and set brightness to medium
 1d4:	89 e8       	ldi	r24, 0x89	; 137
 1d6:	0e 94 c2 00 	call	0x184	; 0x184 <sendCommand>
//  reset();
}
 1da:	08 95       	ret

000001dc <counting>:

uint8_t counting()
{
 1dc:	2f 92       	push	r2
 1de:	3f 92       	push	r3
 1e0:	4f 92       	push	r4
 1e2:	5f 92       	push	r5
 1e4:	6f 92       	push	r6
 1e6:	7f 92       	push	r7
 1e8:	8f 92       	push	r8
 1ea:	9f 92       	push	r9
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2c 97       	sbiw	r28, 0x0c	; 12
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61

    write(strobe, HIGH);

   teller++;
    return 0;
}
 210:	2d b6       	in	r2, 0x3d	; 61
 212:	3e b6       	in	r3, 0x3e	; 62
}

uint8_t counting()
{
                                 /*0*/  /*1*/   /*2*/  /*3*/  /*4*/  /*5*/  /*6*/  /*7*/   /*8*/  /*9*/
    uint8_t digits[] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f };
 214:	de 01       	movw	r26, r28
 216:	11 96       	adiw	r26, 0x01	; 1
 218:	e0 e0       	ldi	r30, 0x00	; 0
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	8a e0       	ldi	r24, 0x0A	; 10
 21e:	01 90       	ld	r0, Z+
 220:	0d 92       	st	X+, r0
 222:	81 50       	subi	r24, 0x01	; 1
 224:	e1 f7       	brne	.-8      	; 0x21e <counting+0x42>

    static long teller = 0;
	uint8_t x = log10(teller) + 1;
 226:	00 91 0e 01 	lds	r16, 0x010E
 22a:	f0 90 0f 01 	lds	r15, 0x010F
 22e:	e0 90 10 01 	lds	r14, 0x0110
 232:	d0 90 11 01 	lds	r13, 0x0111
 236:	60 2f       	mov	r22, r16
 238:	7f 2d       	mov	r23, r15
 23a:	8e 2d       	mov	r24, r14
 23c:	9d 2d       	mov	r25, r13
 23e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__floatsisf>
 242:	0e 94 f7 02 	call	0x5ee	; 0x5ee <log10>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	40 e8       	ldi	r20, 0x80	; 128
 24c:	5f e3       	ldi	r21, 0x3F	; 63
 24e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__addsf3>
 252:	0e 94 3d 02 	call	0x47a	; 0x47a <__fixunssfsi>
 256:	c6 2e       	mov	r12, r22
	long nummer = teller;
	uint8_t digit;
	int lijst[x+1];
 258:	86 2f       	mov	r24, r22
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2d b7       	in	r18, 0x3d	; 61
 264:	3e b7       	in	r19, 0x3e	; 62
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	3e bf       	out	0x3e, r19	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	2d bf       	out	0x3d, r18	; 61
 274:	8d b7       	in	r24, 0x3d	; 61
 276:	9e b7       	in	r25, 0x3e	; 62
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	9c 87       	std	Y+12, r25	; 0x0c
 27c:	8b 87       	std	Y+11, r24	; 0x0b
 27e:	4c 01       	movw	r8, r24
	
	for(uint8_t y = 0; y <= x; y++)
 280:	10 e0       	ldi	r17, 0x00	; 0
	{
		lijst[y] = nummer % 10; // als number = 0 dan array{0,0}
 282:	0f 2e       	mov	r0, r31
 284:	fa e0       	ldi	r31, 0x0A	; 10
 286:	4f 2e       	mov	r4, r31
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	5f 2e       	mov	r5, r31
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	6f 2e       	mov	r6, r31
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	7f 2e       	mov	r7, r31
 294:	f0 2d       	mov	r31, r0
 296:	81 2f       	mov	r24, r17
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	54 01       	movw	r10, r8
 2a0:	a8 0e       	add	r10, r24
 2a2:	b9 1e       	adc	r11, r25
 2a4:	60 2f       	mov	r22, r16
 2a6:	7f 2d       	mov	r23, r15
 2a8:	8e 2d       	mov	r24, r14
 2aa:	9d 2d       	mov	r25, r13
 2ac:	a3 01       	movw	r20, r6
 2ae:	92 01       	movw	r18, r4
 2b0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__divmodsi4>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	f5 01       	movw	r30, r10
 2ba:	91 83       	std	Z+1, r25	; 0x01
 2bc:	80 83       	st	Z, r24
		nummer = nummer / 10;
 2be:	02 2f       	mov	r16, r18
 2c0:	f3 2e       	mov	r15, r19
 2c2:	e4 2e       	mov	r14, r20
 2c4:	d5 2e       	mov	r13, r21
	uint8_t x = log10(teller) + 1;
	long nummer = teller;
	uint8_t digit;
	int lijst[x+1];
	
	for(uint8_t y = 0; y <= x; y++)
 2c6:	1f 5f       	subi	r17, 0xFF	; 255
 2c8:	c1 16       	cp	r12, r17
 2ca:	28 f7       	brcc	.-54     	; 0x296 <counting+0xba>
	{
		lijst[y] = nummer % 10; // als number = 0 dan array{0,0}
		nummer = nummer / 10;
	}

    sendCommand(0x40); // auto-increment address
 2cc:	80 e4       	ldi	r24, 0x40	; 64
 2ce:	0e 94 c2 00 	call	0x184	; 0x184 <sendCommand>
    write(strobe, LOW);
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	0e 94 8e 00 	call	0x11c	; 0x11c <write>
    shiftOut(0xc0); // set starting address = 0
 2da:	80 ec       	ldi	r24, 0xC0	; 192
 2dc:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
 2e0:	eb 84       	ldd	r14, Y+11	; 0x0b
 2e2:	fc 84       	ldd	r15, Y+12	; 0x0c
    for(uint8_t position = 8; position > 0; position--)
 2e4:	18 e0       	ldi	r17, 0x08	; 8
    {
        if(position > x) // als x = 1 dan digit = array[0]
 2e6:	c1 16       	cp	r12, r17
 2e8:	38 f4       	brcc	.+14     	; 0x2f8 <counting+0x11c>
		{
			shiftOut(0x00);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
			shiftOut(0x00);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
 2f6:	0e c0       	rjmp	.+28     	; 0x314 <counting+0x138>
		}
		else
		{
			digit = lijst[position - 1];
			shiftOut(digits[digit]);
 2f8:	f7 01       	movw	r30, r14
 2fa:	86 85       	ldd	r24, Z+14	; 0x0e
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	e8 0f       	add	r30, r24
 306:	f1 1d       	adc	r31, r1
 308:	80 81       	ld	r24, Z
 30a:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
			shiftOut(0x00);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 ab 00 	call	0x156	; 0x156 <shiftOut>
	}

    sendCommand(0x40); // auto-increment address
    write(strobe, LOW);
    shiftOut(0xc0); // set starting address = 0
    for(uint8_t position = 8; position > 0; position--)
 314:	11 50       	subi	r17, 0x01	; 1
 316:	2e ef       	ldi	r18, 0xFE	; 254
 318:	3f ef       	ldi	r19, 0xFF	; 255
 31a:	e2 0e       	add	r14, r18
 31c:	f3 1e       	adc	r15, r19
 31e:	11 23       	and	r17, r17
 320:	11 f7       	brne	.-60     	; 0x2e6 <counting+0x10a>
			shiftOut(0x00);
		}
	}
		

    write(strobe, HIGH);
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	0e 94 8e 00 	call	0x11c	; 0x11c <write>

   teller++;
 32a:	80 91 0e 01 	lds	r24, 0x010E
 32e:	90 91 0f 01 	lds	r25, 0x010F
 332:	a0 91 10 01 	lds	r26, 0x0110
 336:	b0 91 11 01 	lds	r27, 0x0111
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a1 1d       	adc	r26, r1
 33e:	b1 1d       	adc	r27, r1
 340:	80 93 0e 01 	sts	0x010E, r24
 344:	90 93 0f 01 	sts	0x010F, r25
 348:	a0 93 10 01 	sts	0x0110, r26
 34c:	b0 93 11 01 	sts	0x0111, r27
    return 0;
}
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	3e be       	out	0x3e, r3	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	2d be       	out	0x3d, r2	; 61
 35c:	2c 96       	adiw	r28, 0x0c	; 12
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	bf 90       	pop	r11
 37a:	af 90       	pop	r10
 37c:	9f 90       	pop	r9
 37e:	8f 90       	pop	r8
 380:	7f 90       	pop	r7
 382:	6f 90       	pop	r6
 384:	5f 90       	pop	r5
 386:	4f 90       	pop	r4
 388:	3f 90       	pop	r3
 38a:	2f 90       	pop	r2
 38c:	08 95       	ret

0000038e <main>:
int main()
{
    typedef enum {COUNTING_MODE=0} mode_t;
    mode_t mode = COUNTING_MODE;

    setup();
 38e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setup>


int main()
{
    typedef enum {COUNTING_MODE=0} mode_t;
    mode_t mode = COUNTING_MODE;
 392:	80 e0       	ldi	r24, 0x00	; 0

    setup();

    while (1) {
        switch(mode)
 394:	88 23       	and	r24, r24
 396:	11 f4       	brne	.+4      	; 0x39c <main+0xe>
        {
            case COUNTING_MODE:
                mode += counting(); // keep on counting until done
 398:	0e 94 ee 00 	call	0x1dc	; 0x1dc <counting>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	31 ee       	ldi	r19, 0xE1	; 225
 3a0:	44 e0       	ldi	r20, 0x04	; 4
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	30 40       	sbci	r19, 0x00	; 0
 3a6:	40 40       	sbci	r20, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x14>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x1e>
 3ac:	00 00       	nop
 3ae:	f2 cf       	rjmp	.-28     	; 0x394 <main+0x6>

000003b0 <__subsf3>:
 3b0:	50 58       	subi	r21, 0x80	; 128

000003b2 <__addsf3>:
 3b2:	bb 27       	eor	r27, r27
 3b4:	aa 27       	eor	r26, r26
 3b6:	0e d0       	rcall	.+28     	; 0x3d4 <__addsf3x>
 3b8:	e0 c0       	rjmp	.+448    	; 0x57a <__fp_round>
 3ba:	d1 d0       	rcall	.+418    	; 0x55e <__fp_pscA>
 3bc:	30 f0       	brcs	.+12     	; 0x3ca <__addsf3+0x18>
 3be:	d6 d0       	rcall	.+428    	; 0x56c <__fp_pscB>
 3c0:	20 f0       	brcs	.+8      	; 0x3ca <__addsf3+0x18>
 3c2:	31 f4       	brne	.+12     	; 0x3d0 <__addsf3+0x1e>
 3c4:	9f 3f       	cpi	r25, 0xFF	; 255
 3c6:	11 f4       	brne	.+4      	; 0x3cc <__addsf3+0x1a>
 3c8:	1e f4       	brtc	.+6      	; 0x3d0 <__addsf3+0x1e>
 3ca:	c6 c0       	rjmp	.+396    	; 0x558 <__fp_nan>
 3cc:	0e f4       	brtc	.+2      	; 0x3d0 <__addsf3+0x1e>
 3ce:	e0 95       	com	r30
 3d0:	e7 fb       	bst	r30, 7
 3d2:	bc c0       	rjmp	.+376    	; 0x54c <__fp_inf>

000003d4 <__addsf3x>:
 3d4:	e9 2f       	mov	r30, r25
 3d6:	e2 d0       	rcall	.+452    	; 0x59c <__fp_split3>
 3d8:	80 f3       	brcs	.-32     	; 0x3ba <__addsf3+0x8>
 3da:	ba 17       	cp	r27, r26
 3dc:	62 07       	cpc	r22, r18
 3de:	73 07       	cpc	r23, r19
 3e0:	84 07       	cpc	r24, r20
 3e2:	95 07       	cpc	r25, r21
 3e4:	18 f0       	brcs	.+6      	; 0x3ec <__addsf3x+0x18>
 3e6:	71 f4       	brne	.+28     	; 0x404 <__addsf3x+0x30>
 3e8:	9e f5       	brtc	.+102    	; 0x450 <__addsf3x+0x7c>
 3ea:	fa c0       	rjmp	.+500    	; 0x5e0 <__fp_zero>
 3ec:	0e f4       	brtc	.+2      	; 0x3f0 <__addsf3x+0x1c>
 3ee:	e0 95       	com	r30
 3f0:	0b 2e       	mov	r0, r27
 3f2:	ba 2f       	mov	r27, r26
 3f4:	a0 2d       	mov	r26, r0
 3f6:	0b 01       	movw	r0, r22
 3f8:	b9 01       	movw	r22, r18
 3fa:	90 01       	movw	r18, r0
 3fc:	0c 01       	movw	r0, r24
 3fe:	ca 01       	movw	r24, r20
 400:	a0 01       	movw	r20, r0
 402:	11 24       	eor	r1, r1
 404:	ff 27       	eor	r31, r31
 406:	59 1b       	sub	r21, r25
 408:	99 f0       	breq	.+38     	; 0x430 <__addsf3x+0x5c>
 40a:	59 3f       	cpi	r21, 0xF9	; 249
 40c:	50 f4       	brcc	.+20     	; 0x422 <__addsf3x+0x4e>
 40e:	50 3e       	cpi	r21, 0xE0	; 224
 410:	68 f1       	brcs	.+90     	; 0x46c <__addsf3x+0x98>
 412:	1a 16       	cp	r1, r26
 414:	f0 40       	sbci	r31, 0x00	; 0
 416:	a2 2f       	mov	r26, r18
 418:	23 2f       	mov	r18, r19
 41a:	34 2f       	mov	r19, r20
 41c:	44 27       	eor	r20, r20
 41e:	58 5f       	subi	r21, 0xF8	; 248
 420:	f3 cf       	rjmp	.-26     	; 0x408 <__addsf3x+0x34>
 422:	46 95       	lsr	r20
 424:	37 95       	ror	r19
 426:	27 95       	ror	r18
 428:	a7 95       	ror	r26
 42a:	f0 40       	sbci	r31, 0x00	; 0
 42c:	53 95       	inc	r21
 42e:	c9 f7       	brne	.-14     	; 0x422 <__addsf3x+0x4e>
 430:	7e f4       	brtc	.+30     	; 0x450 <__addsf3x+0x7c>
 432:	1f 16       	cp	r1, r31
 434:	ba 0b       	sbc	r27, r26
 436:	62 0b       	sbc	r22, r18
 438:	73 0b       	sbc	r23, r19
 43a:	84 0b       	sbc	r24, r20
 43c:	ba f0       	brmi	.+46     	; 0x46c <__addsf3x+0x98>
 43e:	91 50       	subi	r25, 0x01	; 1
 440:	a1 f0       	breq	.+40     	; 0x46a <__addsf3x+0x96>
 442:	ff 0f       	add	r31, r31
 444:	bb 1f       	adc	r27, r27
 446:	66 1f       	adc	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	c2 f7       	brpl	.-16     	; 0x43e <__addsf3x+0x6a>
 44e:	0e c0       	rjmp	.+28     	; 0x46c <__addsf3x+0x98>
 450:	ba 0f       	add	r27, r26
 452:	62 1f       	adc	r22, r18
 454:	73 1f       	adc	r23, r19
 456:	84 1f       	adc	r24, r20
 458:	48 f4       	brcc	.+18     	; 0x46c <__addsf3x+0x98>
 45a:	87 95       	ror	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b7 95       	ror	r27
 462:	f7 95       	ror	r31
 464:	9e 3f       	cpi	r25, 0xFE	; 254
 466:	08 f0       	brcs	.+2      	; 0x46a <__addsf3x+0x96>
 468:	b3 cf       	rjmp	.-154    	; 0x3d0 <__addsf3+0x1e>
 46a:	93 95       	inc	r25
 46c:	88 0f       	add	r24, r24
 46e:	08 f0       	brcs	.+2      	; 0x472 <__addsf3x+0x9e>
 470:	99 27       	eor	r25, r25
 472:	ee 0f       	add	r30, r30
 474:	97 95       	ror	r25
 476:	87 95       	ror	r24
 478:	08 95       	ret

0000047a <__fixunssfsi>:
 47a:	98 d0       	rcall	.+304    	; 0x5ac <__fp_splitA>
 47c:	88 f0       	brcs	.+34     	; 0x4a0 <__fixunssfsi+0x26>
 47e:	9f 57       	subi	r25, 0x7F	; 127
 480:	90 f0       	brcs	.+36     	; 0x4a6 <__fixunssfsi+0x2c>
 482:	b9 2f       	mov	r27, r25
 484:	99 27       	eor	r25, r25
 486:	b7 51       	subi	r27, 0x17	; 23
 488:	a0 f0       	brcs	.+40     	; 0x4b2 <__fixunssfsi+0x38>
 48a:	d1 f0       	breq	.+52     	; 0x4c0 <__fixunssfsi+0x46>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	1a f0       	brmi	.+6      	; 0x49c <__fixunssfsi+0x22>
 496:	ba 95       	dec	r27
 498:	c9 f7       	brne	.-14     	; 0x48c <__fixunssfsi+0x12>
 49a:	12 c0       	rjmp	.+36     	; 0x4c0 <__fixunssfsi+0x46>
 49c:	b1 30       	cpi	r27, 0x01	; 1
 49e:	81 f0       	breq	.+32     	; 0x4c0 <__fixunssfsi+0x46>
 4a0:	9f d0       	rcall	.+318    	; 0x5e0 <__fp_zero>
 4a2:	b1 e0       	ldi	r27, 0x01	; 1
 4a4:	08 95       	ret
 4a6:	9c c0       	rjmp	.+312    	; 0x5e0 <__fp_zero>
 4a8:	67 2f       	mov	r22, r23
 4aa:	78 2f       	mov	r23, r24
 4ac:	88 27       	eor	r24, r24
 4ae:	b8 5f       	subi	r27, 0xF8	; 248
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <__fixunssfsi+0x46>
 4b2:	b9 3f       	cpi	r27, 0xF9	; 249
 4b4:	cc f3       	brlt	.-14     	; 0x4a8 <__fixunssfsi+0x2e>
 4b6:	86 95       	lsr	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b3 95       	inc	r27
 4be:	d9 f7       	brne	.-10     	; 0x4b6 <__fixunssfsi+0x3c>
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__fixunssfsi+0x56>
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__floatunsisf>:
 4d2:	e8 94       	clt
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <__floatsisf+0x12>

000004d6 <__floatsisf>:
 4d6:	97 fb       	bst	r25, 7
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__floatsisf+0x12>
 4da:	90 95       	com	r25
 4dc:	80 95       	com	r24
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	99 23       	and	r25, r25
 4ea:	a9 f0       	breq	.+42     	; 0x516 <__floatsisf+0x40>
 4ec:	f9 2f       	mov	r31, r25
 4ee:	96 e9       	ldi	r25, 0x96	; 150
 4f0:	bb 27       	eor	r27, r27
 4f2:	93 95       	inc	r25
 4f4:	f6 95       	lsr	r31
 4f6:	87 95       	ror	r24
 4f8:	77 95       	ror	r23
 4fa:	67 95       	ror	r22
 4fc:	b7 95       	ror	r27
 4fe:	f1 11       	cpse	r31, r1
 500:	f8 cf       	rjmp	.-16     	; 0x4f2 <__floatsisf+0x1c>
 502:	fa f4       	brpl	.+62     	; 0x542 <__floatsisf+0x6c>
 504:	bb 0f       	add	r27, r27
 506:	11 f4       	brne	.+4      	; 0x50c <__floatsisf+0x36>
 508:	60 ff       	sbrs	r22, 0
 50a:	1b c0       	rjmp	.+54     	; 0x542 <__floatsisf+0x6c>
 50c:	6f 5f       	subi	r22, 0xFF	; 255
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	16 c0       	rjmp	.+44     	; 0x542 <__floatsisf+0x6c>
 516:	88 23       	and	r24, r24
 518:	11 f0       	breq	.+4      	; 0x51e <__floatsisf+0x48>
 51a:	96 e9       	ldi	r25, 0x96	; 150
 51c:	11 c0       	rjmp	.+34     	; 0x540 <__floatsisf+0x6a>
 51e:	77 23       	and	r23, r23
 520:	21 f0       	breq	.+8      	; 0x52a <__floatsisf+0x54>
 522:	9e e8       	ldi	r25, 0x8E	; 142
 524:	87 2f       	mov	r24, r23
 526:	76 2f       	mov	r23, r22
 528:	05 c0       	rjmp	.+10     	; 0x534 <__floatsisf+0x5e>
 52a:	66 23       	and	r22, r22
 52c:	71 f0       	breq	.+28     	; 0x54a <__floatsisf+0x74>
 52e:	96 e8       	ldi	r25, 0x86	; 134
 530:	86 2f       	mov	r24, r22
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	2a f0       	brmi	.+10     	; 0x542 <__floatsisf+0x6c>
 538:	9a 95       	dec	r25
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	da f7       	brpl	.-10     	; 0x538 <__floatsisf+0x62>
 542:	88 0f       	add	r24, r24
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	97 f9       	bld	r25, 7
 54a:	08 95       	ret

0000054c <__fp_inf>:
 54c:	97 f9       	bld	r25, 7
 54e:	9f 67       	ori	r25, 0x7F	; 127
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	08 95       	ret

00000558 <__fp_nan>:
 558:	9f ef       	ldi	r25, 0xFF	; 255
 55a:	80 ec       	ldi	r24, 0xC0	; 192
 55c:	08 95       	ret

0000055e <__fp_pscA>:
 55e:	00 24       	eor	r0, r0
 560:	0a 94       	dec	r0
 562:	16 16       	cp	r1, r22
 564:	17 06       	cpc	r1, r23
 566:	18 06       	cpc	r1, r24
 568:	09 06       	cpc	r0, r25
 56a:	08 95       	ret

0000056c <__fp_pscB>:
 56c:	00 24       	eor	r0, r0
 56e:	0a 94       	dec	r0
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	14 06       	cpc	r1, r20
 576:	05 06       	cpc	r0, r21
 578:	08 95       	ret

0000057a <__fp_round>:
 57a:	09 2e       	mov	r0, r25
 57c:	03 94       	inc	r0
 57e:	00 0c       	add	r0, r0
 580:	11 f4       	brne	.+4      	; 0x586 <__fp_round+0xc>
 582:	88 23       	and	r24, r24
 584:	52 f0       	brmi	.+20     	; 0x59a <__fp_round+0x20>
 586:	bb 0f       	add	r27, r27
 588:	40 f4       	brcc	.+16     	; 0x59a <__fp_round+0x20>
 58a:	bf 2b       	or	r27, r31
 58c:	11 f4       	brne	.+4      	; 0x592 <__fp_round+0x18>
 58e:	60 ff       	sbrs	r22, 0
 590:	04 c0       	rjmp	.+8      	; 0x59a <__fp_round+0x20>
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__fp_split3>:
 59c:	57 fd       	sbrc	r21, 7
 59e:	90 58       	subi	r25, 0x80	; 128
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	59 f0       	breq	.+22     	; 0x5bc <__fp_splitA+0x10>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <__fp_splitA+0x1a>
 5aa:	47 95       	ror	r20

000005ac <__fp_splitA>:
 5ac:	88 0f       	add	r24, r24
 5ae:	97 fb       	bst	r25, 7
 5b0:	99 1f       	adc	r25, r25
 5b2:	61 f0       	breq	.+24     	; 0x5cc <__fp_splitA+0x20>
 5b4:	9f 3f       	cpi	r25, 0xFF	; 255
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <__fp_splitA+0x2a>
 5b8:	87 95       	ror	r24
 5ba:	08 95       	ret
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	14 06       	cpc	r1, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	f2 cf       	rjmp	.-28     	; 0x5aa <__fp_split3+0xe>
 5c6:	46 95       	lsr	r20
 5c8:	f1 df       	rcall	.-30     	; 0x5ac <__fp_splitA>
 5ca:	08 c0       	rjmp	.+16     	; 0x5dc <__fp_splitA+0x30>
 5cc:	16 16       	cp	r1, r22
 5ce:	17 06       	cpc	r1, r23
 5d0:	18 06       	cpc	r1, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	f1 cf       	rjmp	.-30     	; 0x5b8 <__fp_splitA+0xc>
 5d6:	86 95       	lsr	r24
 5d8:	71 05       	cpc	r23, r1
 5da:	61 05       	cpc	r22, r1
 5dc:	08 94       	sec
 5de:	08 95       	ret

000005e0 <__fp_zero>:
 5e0:	e8 94       	clt

000005e2 <__fp_szero>:
 5e2:	bb 27       	eor	r27, r27
 5e4:	66 27       	eor	r22, r22
 5e6:	77 27       	eor	r23, r23
 5e8:	cb 01       	movw	r24, r22
 5ea:	97 f9       	bld	r25, 7
 5ec:	08 95       	ret

000005ee <log10>:
 5ee:	0a d0       	rcall	.+20     	; 0x604 <log>
 5f0:	29 ed       	ldi	r18, 0xD9	; 217
 5f2:	3b e5       	ldi	r19, 0x5B	; 91
 5f4:	4e ed       	ldi	r20, 0xDE	; 222
 5f6:	5e e3       	ldi	r21, 0x3E	; 62
 5f8:	45 c0       	rjmp	.+138    	; 0x684 <__mulsf3>
 5fa:	0e f0       	brts	.+2      	; 0x5fe <log10+0x10>
 5fc:	a6 c0       	rjmp	.+332    	; 0x74a <__fp_mpack>
 5fe:	ac cf       	rjmp	.-168    	; 0x558 <__fp_nan>
 600:	68 94       	set
 602:	a4 cf       	rjmp	.-184    	; 0x54c <__fp_inf>

00000604 <log>:
 604:	d3 df       	rcall	.-90     	; 0x5ac <__fp_splitA>
 606:	c8 f3       	brcs	.-14     	; 0x5fa <log10+0xc>
 608:	99 23       	and	r25, r25
 60a:	d1 f3       	breq	.-12     	; 0x600 <log10+0x12>
 60c:	c6 f3       	brts	.-16     	; 0x5fe <log10+0x10>
 60e:	df 93       	push	r29
 610:	cf 93       	push	r28
 612:	1f 93       	push	r17
 614:	0f 93       	push	r16
 616:	ff 92       	push	r15
 618:	c9 2f       	mov	r28, r25
 61a:	dd 27       	eor	r29, r29
 61c:	88 23       	and	r24, r24
 61e:	2a f0       	brmi	.+10     	; 0x62a <log+0x26>
 620:	21 97       	sbiw	r28, 0x01	; 1
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	da f7       	brpl	.-10     	; 0x620 <log+0x1c>
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	40 e8       	ldi	r20, 0x80	; 128
 630:	5f eb       	ldi	r21, 0xBF	; 191
 632:	9f e3       	ldi	r25, 0x3F	; 63
 634:	88 39       	cpi	r24, 0x98	; 152
 636:	20 f0       	brcs	.+8      	; 0x640 <log+0x3c>
 638:	80 3e       	cpi	r24, 0xE0	; 224
 63a:	30 f0       	brcs	.+12     	; 0x648 <log+0x44>
 63c:	21 96       	adiw	r28, 0x01	; 1
 63e:	8f 77       	andi	r24, 0x7F	; 127
 640:	b8 de       	rcall	.-656    	; 0x3b2 <__addsf3>
 642:	e8 e6       	ldi	r30, 0x68	; 104
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	03 c0       	rjmp	.+6      	; 0x64e <log+0x4a>
 648:	b4 de       	rcall	.-664    	; 0x3b2 <__addsf3>
 64a:	e5 e9       	ldi	r30, 0x95	; 149
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	8b d0       	rcall	.+278    	; 0x766 <__fp_powser>
 650:	8b 01       	movw	r16, r22
 652:	be 01       	movw	r22, r28
 654:	ec 01       	movw	r28, r24
 656:	fb 2e       	mov	r15, r27
 658:	6f 57       	subi	r22, 0x7F	; 127
 65a:	71 09       	sbc	r23, r1
 65c:	75 95       	asr	r23
 65e:	77 1f       	adc	r23, r23
 660:	88 0b       	sbc	r24, r24
 662:	99 0b       	sbc	r25, r25
 664:	38 df       	rcall	.-400    	; 0x4d6 <__floatsisf>
 666:	28 e1       	ldi	r18, 0x18	; 24
 668:	32 e7       	ldi	r19, 0x72	; 114
 66a:	41 e3       	ldi	r20, 0x31	; 49
 66c:	5f e3       	ldi	r21, 0x3F	; 63
 66e:	16 d0       	rcall	.+44     	; 0x69c <__mulsf3x>
 670:	af 2d       	mov	r26, r15
 672:	98 01       	movw	r18, r16
 674:	ae 01       	movw	r20, r28
 676:	ff 90       	pop	r15
 678:	0f 91       	pop	r16
 67a:	1f 91       	pop	r17
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	a9 de       	rcall	.-686    	; 0x3d4 <__addsf3x>
 682:	7b cf       	rjmp	.-266    	; 0x57a <__fp_round>

00000684 <__mulsf3>:
 684:	0b d0       	rcall	.+22     	; 0x69c <__mulsf3x>
 686:	79 cf       	rjmp	.-270    	; 0x57a <__fp_round>
 688:	6a df       	rcall	.-300    	; 0x55e <__fp_pscA>
 68a:	28 f0       	brcs	.+10     	; 0x696 <__mulsf3+0x12>
 68c:	6f df       	rcall	.-290    	; 0x56c <__fp_pscB>
 68e:	18 f0       	brcs	.+6      	; 0x696 <__mulsf3+0x12>
 690:	95 23       	and	r25, r21
 692:	09 f0       	breq	.+2      	; 0x696 <__mulsf3+0x12>
 694:	5b cf       	rjmp	.-330    	; 0x54c <__fp_inf>
 696:	60 cf       	rjmp	.-320    	; 0x558 <__fp_nan>
 698:	11 24       	eor	r1, r1
 69a:	a3 cf       	rjmp	.-186    	; 0x5e2 <__fp_szero>

0000069c <__mulsf3x>:
 69c:	7f df       	rcall	.-258    	; 0x59c <__fp_split3>
 69e:	a0 f3       	brcs	.-24     	; 0x688 <__mulsf3+0x4>

000006a0 <__mulsf3_pse>:
 6a0:	95 9f       	mul	r25, r21
 6a2:	d1 f3       	breq	.-12     	; 0x698 <__mulsf3+0x14>
 6a4:	95 0f       	add	r25, r21
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	55 1f       	adc	r21, r21
 6aa:	62 9f       	mul	r22, r18
 6ac:	f0 01       	movw	r30, r0
 6ae:	72 9f       	mul	r23, r18
 6b0:	bb 27       	eor	r27, r27
 6b2:	f0 0d       	add	r31, r0
 6b4:	b1 1d       	adc	r27, r1
 6b6:	63 9f       	mul	r22, r19
 6b8:	aa 27       	eor	r26, r26
 6ba:	f0 0d       	add	r31, r0
 6bc:	b1 1d       	adc	r27, r1
 6be:	aa 1f       	adc	r26, r26
 6c0:	64 9f       	mul	r22, r20
 6c2:	66 27       	eor	r22, r22
 6c4:	b0 0d       	add	r27, r0
 6c6:	a1 1d       	adc	r26, r1
 6c8:	66 1f       	adc	r22, r22
 6ca:	82 9f       	mul	r24, r18
 6cc:	22 27       	eor	r18, r18
 6ce:	b0 0d       	add	r27, r0
 6d0:	a1 1d       	adc	r26, r1
 6d2:	62 1f       	adc	r22, r18
 6d4:	73 9f       	mul	r23, r19
 6d6:	b0 0d       	add	r27, r0
 6d8:	a1 1d       	adc	r26, r1
 6da:	62 1f       	adc	r22, r18
 6dc:	83 9f       	mul	r24, r19
 6de:	a0 0d       	add	r26, r0
 6e0:	61 1d       	adc	r22, r1
 6e2:	22 1f       	adc	r18, r18
 6e4:	74 9f       	mul	r23, r20
 6e6:	33 27       	eor	r19, r19
 6e8:	a0 0d       	add	r26, r0
 6ea:	61 1d       	adc	r22, r1
 6ec:	23 1f       	adc	r18, r19
 6ee:	84 9f       	mul	r24, r20
 6f0:	60 0d       	add	r22, r0
 6f2:	21 1d       	adc	r18, r1
 6f4:	82 2f       	mov	r24, r18
 6f6:	76 2f       	mov	r23, r22
 6f8:	6a 2f       	mov	r22, r26
 6fa:	11 24       	eor	r1, r1
 6fc:	9f 57       	subi	r25, 0x7F	; 127
 6fe:	50 40       	sbci	r21, 0x00	; 0
 700:	8a f0       	brmi	.+34     	; 0x724 <__mulsf3_pse+0x84>
 702:	e1 f0       	breq	.+56     	; 0x73c <__mulsf3_pse+0x9c>
 704:	88 23       	and	r24, r24
 706:	4a f0       	brmi	.+18     	; 0x71a <__mulsf3_pse+0x7a>
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	bb 1f       	adc	r27, r27
 70e:	66 1f       	adc	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	91 50       	subi	r25, 0x01	; 1
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	a9 f7       	brne	.-22     	; 0x704 <__mulsf3_pse+0x64>
 71a:	9e 3f       	cpi	r25, 0xFE	; 254
 71c:	51 05       	cpc	r21, r1
 71e:	70 f0       	brcs	.+28     	; 0x73c <__mulsf3_pse+0x9c>
 720:	15 cf       	rjmp	.-470    	; 0x54c <__fp_inf>
 722:	5f cf       	rjmp	.-322    	; 0x5e2 <__fp_szero>
 724:	5f 3f       	cpi	r21, 0xFF	; 255
 726:	ec f3       	brlt	.-6      	; 0x722 <__mulsf3_pse+0x82>
 728:	98 3e       	cpi	r25, 0xE8	; 232
 72a:	dc f3       	brlt	.-10     	; 0x722 <__mulsf3_pse+0x82>
 72c:	86 95       	lsr	r24
 72e:	77 95       	ror	r23
 730:	67 95       	ror	r22
 732:	b7 95       	ror	r27
 734:	f7 95       	ror	r31
 736:	e7 95       	ror	r30
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	c1 f7       	brne	.-16     	; 0x72c <__mulsf3_pse+0x8c>
 73c:	fe 2b       	or	r31, r30
 73e:	88 0f       	add	r24, r24
 740:	91 1d       	adc	r25, r1
 742:	96 95       	lsr	r25
 744:	87 95       	ror	r24
 746:	97 f9       	bld	r25, 7
 748:	08 95       	ret

0000074a <__fp_mpack>:
 74a:	9f 3f       	cpi	r25, 0xFF	; 255
 74c:	31 f0       	breq	.+12     	; 0x75a <__fp_mpack_finite+0xc>

0000074e <__fp_mpack_finite>:
 74e:	91 50       	subi	r25, 0x01	; 1
 750:	20 f4       	brcc	.+8      	; 0x75a <__fp_mpack_finite+0xc>
 752:	87 95       	ror	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	88 0f       	add	r24, r24
 75c:	91 1d       	adc	r25, r1
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <__fp_powser>:
 766:	df 93       	push	r29
 768:	cf 93       	push	r28
 76a:	1f 93       	push	r17
 76c:	0f 93       	push	r16
 76e:	ff 92       	push	r15
 770:	ef 92       	push	r14
 772:	df 92       	push	r13
 774:	7b 01       	movw	r14, r22
 776:	8c 01       	movw	r16, r24
 778:	68 94       	set
 77a:	05 c0       	rjmp	.+10     	; 0x786 <__fp_powser+0x20>
 77c:	da 2e       	mov	r13, r26
 77e:	ef 01       	movw	r28, r30
 780:	8d df       	rcall	.-230    	; 0x69c <__mulsf3x>
 782:	fe 01       	movw	r30, r28
 784:	e8 94       	clt
 786:	a5 91       	lpm	r26, Z+
 788:	25 91       	lpm	r18, Z+
 78a:	35 91       	lpm	r19, Z+
 78c:	45 91       	lpm	r20, Z+
 78e:	55 91       	lpm	r21, Z+
 790:	ae f3       	brts	.-22     	; 0x77c <__fp_powser+0x16>
 792:	ef 01       	movw	r28, r30
 794:	1f de       	rcall	.-962    	; 0x3d4 <__addsf3x>
 796:	fe 01       	movw	r30, r28
 798:	97 01       	movw	r18, r14
 79a:	a8 01       	movw	r20, r16
 79c:	da 94       	dec	r13
 79e:	79 f7       	brne	.-34     	; 0x77e <__fp_powser+0x18>
 7a0:	df 90       	pop	r13
 7a2:	ef 90       	pop	r14
 7a4:	ff 90       	pop	r15
 7a6:	0f 91       	pop	r16
 7a8:	1f 91       	pop	r17
 7aa:	cf 91       	pop	r28
 7ac:	df 91       	pop	r29
 7ae:	08 95       	ret

000007b0 <__divmodsi4>:
 7b0:	97 fb       	bst	r25, 7
 7b2:	09 2e       	mov	r0, r25
 7b4:	05 26       	eor	r0, r21
 7b6:	0e d0       	rcall	.+28     	; 0x7d4 <__divmodsi4_neg1>
 7b8:	57 fd       	sbrc	r21, 7
 7ba:	04 d0       	rcall	.+8      	; 0x7c4 <__divmodsi4_neg2>
 7bc:	14 d0       	rcall	.+40     	; 0x7e6 <__udivmodsi4>
 7be:	0a d0       	rcall	.+20     	; 0x7d4 <__divmodsi4_neg1>
 7c0:	00 1c       	adc	r0, r0
 7c2:	38 f4       	brcc	.+14     	; 0x7d2 <__divmodsi4_exit>

000007c4 <__divmodsi4_neg2>:
 7c4:	50 95       	com	r21
 7c6:	40 95       	com	r20
 7c8:	30 95       	com	r19
 7ca:	21 95       	neg	r18
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	4f 4f       	sbci	r20, 0xFF	; 255
 7d0:	5f 4f       	sbci	r21, 0xFF	; 255

000007d2 <__divmodsi4_exit>:
 7d2:	08 95       	ret

000007d4 <__divmodsi4_neg1>:
 7d4:	f6 f7       	brtc	.-4      	; 0x7d2 <__divmodsi4_exit>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <__udivmodsi4>:
 7e6:	a1 e2       	ldi	r26, 0x21	; 33
 7e8:	1a 2e       	mov	r1, r26
 7ea:	aa 1b       	sub	r26, r26
 7ec:	bb 1b       	sub	r27, r27
 7ee:	fd 01       	movw	r30, r26
 7f0:	0d c0       	rjmp	.+26     	; 0x80c <__udivmodsi4_ep>

000007f2 <__udivmodsi4_loop>:
 7f2:	aa 1f       	adc	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	ee 1f       	adc	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	a2 17       	cp	r26, r18
 7fc:	b3 07       	cpc	r27, r19
 7fe:	e4 07       	cpc	r30, r20
 800:	f5 07       	cpc	r31, r21
 802:	20 f0       	brcs	.+8      	; 0x80c <__udivmodsi4_ep>
 804:	a2 1b       	sub	r26, r18
 806:	b3 0b       	sbc	r27, r19
 808:	e4 0b       	sbc	r30, r20
 80a:	f5 0b       	sbc	r31, r21

0000080c <__udivmodsi4_ep>:
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	1a 94       	dec	r1
 816:	69 f7       	brne	.-38     	; 0x7f2 <__udivmodsi4_loop>
 818:	60 95       	com	r22
 81a:	70 95       	com	r23
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	9b 01       	movw	r18, r22
 822:	ac 01       	movw	r20, r24
 824:	bd 01       	movw	r22, r26
 826:	cf 01       	movw	r24, r30
 828:	08 95       	ret

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
