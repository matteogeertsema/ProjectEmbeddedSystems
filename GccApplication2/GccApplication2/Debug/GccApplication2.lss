
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000009f2  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010e  0080010e  00000a94  2**0
                  ALLOC
  3 .stab         00002268  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000708  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000242  00000000  00000000  00003da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e0  00000000  00000000  00003fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000044c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e1  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e2  00000000  00000000  00004895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_11>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	08 00       	.word	0x0008	; ????
  6a:	00 00       	nop
  6c:	be 92       	st	-X, r11
  6e:	24 49       	sbci	r18, 0x94	; 148
  70:	12 3e       	cpi	r17, 0xE2	; 226
  72:	ab aa       	sts	0x9b, r26
  74:	aa 2a       	or	r10, r26
  76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
  78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
  7a:	4c 3e       	cpi	r20, 0xEC	; 236
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	be ab       	sts	0x5e, r27
  82:	aa aa       	sts	0x9a, r26
  84:	aa 3e       	cpi	r26, 0xEA	; 234
  86:	00 00       	nop
  88:	00 00       	nop
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	00 00       	nop
  92:	00 00       	nop
  94:	00 08       	sbc	r0, r0
  96:	41 78       	andi	r20, 0x81	; 129
  98:	d3 bb       	out	0x13, r29	; 19
  9a:	43 87       	std	Z+11, r20	; 0x0b
  9c:	d1 13       	cpse	r29, r17
  9e:	3d 19       	sub	r19, r13
  a0:	0e 3c       	cpi	r16, 0xCE	; 206
  a2:	c3 bd       	out	0x23, r28	; 35
  a4:	42 82       	std	Z+2, r4	; 0x02
  a6:	ad 2b       	or	r26, r29
  a8:	3e 68       	ori	r19, 0x8E	; 142
  aa:	ec 82       	std	Y+4, r14	; 0x04
  ac:	76 be       	out	0x36, r7	; 54
  ae:	d9 8f       	std	Y+25, r29	; 0x19
  b0:	e1 a9       	sts	0x41, r30
  b2:	3e 4c       	sbci	r19, 0xCE	; 206
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	ff be       	out	0x3f, r15	; 63
  b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__mulsf3_pse+0x58>
  ba:	ff 7f       	andi	r31, 0xFF	; 255
  bc:	3f 00       	.word	0x003f	; ????
  be:	00 00       	nop
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	e2 ef       	ldi	r30, 0xF2	; 242
  d6:	f9 e0       	ldi	r31, 0x09	; 9
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	ae 30       	cpi	r26, 0x0E	; 14
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	ae e0       	ldi	r26, 0x0E	; 14
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a5 33       	cpi	r26, 0x35	; 53
  f0:	b1 07       	cpc	r27, r17
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 a9 02 	call	0x552	; 0x552 <main>
  f8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	8c 01       	movw	r16, r24
 10a:	eb 01       	movw	r28, r22
 10c:	da 01       	movw	r26, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 10e:	80 91 12 01 	lds	r24, 0x0112
 112:	90 91 13 01 	lds	r25, 0x0113
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	b1 f0       	breq	.+44     	; 0x146 <SCH_Add_Task+0x46>
 11a:	e9 e1       	ldi	r30, 0x19	; 25
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
 122:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 124:	b9 01       	movw	r22, r18
 126:	80 81       	ld	r24, Z
 128:	91 81       	ldd	r25, Z+1	; 0x01
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	41 f0       	breq	.+16     	; 0x13e <SCH_Add_Task+0x3e>
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	37 96       	adiw	r30, 0x07	; 7
 134:	26 30       	cpi	r18, 0x06	; 6
 136:	31 05       	cpc	r19, r1
 138:	a1 f7       	brne	.-24     	; 0x122 <SCH_Add_Task+0x22>
   {
      Index++;
 13a:	84 2f       	mov	r24, r20
 13c:	01 c0       	rjmp	.+2      	; 0x140 <SCH_Add_Task+0x40>
 13e:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
 140:	85 30       	cpi	r24, 0x05	; 5
 142:	21 f4       	brne	.+8      	; 0x14c <SCH_Add_Task+0x4c>
 144:	17 c0       	rjmp	.+46     	; 0x174 <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
 14a:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
 14c:	cb 01       	movw	r24, r22
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	86 1b       	sub	r24, r22
 15c:	97 0b       	sbc	r25, r23
 15e:	fc 01       	movw	r30, r24
 160:	ee 5e       	subi	r30, 0xEE	; 238
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	11 83       	std	Z+1, r17	; 0x01
 166:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
 168:	d3 83       	std	Z+3, r29	; 0x03
 16a:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 16c:	b5 83       	std	Z+5, r27	; 0x05
 16e:	a4 83       	std	Z+4, r26	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 170:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
 172:	84 2f       	mov	r24, r20
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e8 1b       	sub	r30, r24
 190:	f9 0b       	sbc	r31, r25
 192:	ee 5e       	subi	r30, 0xEE	; 238
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	11 82       	std	Z+1, r1	; 0x01
 198:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 19a:	13 82       	std	Z+3, r1	; 0x03
 19c:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 19e:	15 82       	std	Z+5, r1	; 0x05
 1a0:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 1a2:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1b6:	c8 e1       	ldi	r28, 0x18	; 24
 1b8:	d1 e0       	ldi	r29, 0x01	; 1
 1ba:	0f 2e       	mov	r0, r31
 1bc:	fa ef       	ldi	r31, 0xFA	; 250
 1be:	ef 2e       	mov	r14, r31
 1c0:	ff ef       	ldi	r31, 0xFF	; 255
 1c2:	ff 2e       	mov	r15, r31
 1c4:	f0 2d       	mov	r31, r0
 1c6:	ec 0e       	add	r14, r28
 1c8:	fd 1e       	adc	r15, r29
 1ca:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 1cc:	88 81       	ld	r24, Y
 1ce:	88 23       	and	r24, r24
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <SCH_Dispatch_Tasks+0x4e>
 1d2:	d7 01       	movw	r26, r14
 1d4:	ed 91       	ld	r30, X+
 1d6:	fc 91       	ld	r31, X
 1d8:	11 97       	sbiw	r26, 0x01	; 1
 1da:	30 97       	sbiw	r30, 0x00	; 0
 1dc:	61 f0       	breq	.+24     	; 0x1f6 <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 1de:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 1e0:	88 81       	ld	r24, Y
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 1e6:	f7 01       	movw	r30, r14
 1e8:	84 81       	ldd	r24, Z+4	; 0x04
 1ea:	95 81       	ldd	r25, Z+5	; 0x05
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
 1f0:	81 2f       	mov	r24, r17
 1f2:	0e 94 bf 00 	call	0x17e	; 0x17e <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f6:	1f 5f       	subi	r17, 0xFF	; 255
 1f8:	27 96       	adiw	r28, 0x07	; 7
 1fa:	87 e0       	ldi	r24, 0x07	; 7
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	e8 0e       	add	r14, r24
 200:	f9 1e       	adc	r15, r25
 202:	15 30       	cpi	r17, 0x05	; 5
 204:	19 f7       	brne	.-58     	; 0x1cc <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	08 95       	ret

00000216 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 216:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 218:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 bf 00 	call	0x17e	; 0x17e <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 220:	cf 5f       	subi	r28, 0xFF	; 255
 222:	c5 30       	cpi	r28, 0x05	; 5
 224:	d1 f7       	brne	.-12     	; 0x21a <SCH_Init_T1+0x4>
   }
   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 226:	81 e7       	ldi	r24, 0x71	; 113
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	90 93 89 00 	sts	0x0089, r25
 22e:	80 93 88 00 	sts	0x0088, r24
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 232:	8c e0       	ldi	r24, 0x0C	; 12
 234:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	80 93 6f 00 	sts	0x006F, r24
}
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 242:	78 94       	sei
}
 244:	08 95       	ret

00000246 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
 264:	e2 e1       	ldi	r30, 0x12	; 18
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	df 01       	movw	r26, r30
 26a:	16 96       	adiw	r26, 0x06	; 6
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
 26c:	9f 01       	movw	r18, r30
 26e:	2d 5d       	subi	r18, 0xDD	; 221
 270:	3f 4f       	sbci	r19, 0xFF	; 255
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	91 f0       	breq	.+36     	; 0x29e <__vector_11+0x58>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 27a:	82 81       	ldd	r24, Z+2	; 0x02
 27c:	93 81       	ldd	r25, Z+3	; 0x03
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	59 f4       	brne	.+22     	; 0x298 <__vector_11+0x52>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 282:	8c 91       	ld	r24, X
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
 288:	84 81       	ldd	r24, Z+4	; 0x04
 28a:	95 81       	ldd	r25, Z+5	; 0x05
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	39 f0       	breq	.+14     	; 0x29e <__vector_11+0x58>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	93 83       	std	Z+3, r25	; 0x03
 294:	82 83       	std	Z+2, r24	; 0x02
 296:	03 c0       	rjmp	.+6      	; 0x29e <__vector_11+0x58>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	93 83       	std	Z+3, r25	; 0x03
 29c:	82 83       	std	Z+2, r24	; 0x02
 29e:	37 96       	adiw	r30, 0x07	; 7
 2a0:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 2a2:	e2 17       	cp	r30, r18
 2a4:	f3 07       	cpc	r31, r19
 2a6:	29 f7       	brne	.-54     	; 0x272 <__vector_11+0x2c>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <read>:
void counting(void); // need to put them in .h

// read value from pin
int read(uint8_t pin)
{
    if (PINB & _BV(pin)) { // if pin set in port
 2c6:	23 b1       	in	r18, 0x03	; 3
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <read+0xa>
 2cc:	35 95       	asr	r19
 2ce:	27 95       	ror	r18
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <read+0x6>
        return HIGH;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	20 fd       	sbrc	r18, 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <read+0x1a>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
    } else {
        return LOW;
    }
}
 2e0:	08 95       	ret

000002e2 <write>:

// write value to pin
void write(uint8_t pin, uint8_t val)
{
    if (val == LOW) {
 2e2:	66 23       	and	r22, r22
 2e4:	71 f4       	brne	.+28     	; 0x302 <write+0x20>
        PORTB &= ~(_BV(pin)); // clear bit
 2e6:	45 b1       	in	r20, 0x05	; 5
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	b9 01       	movw	r22, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <write+0x12>
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	8a 95       	dec	r24
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <write+0xe>
 2f8:	cb 01       	movw	r24, r22
 2fa:	80 95       	com	r24
 2fc:	84 23       	and	r24, r20
 2fe:	85 b9       	out	0x05, r24	; 5
 300:	08 95       	ret
    } else {
        PORTB |= _BV(pin); // set bit
 302:	45 b1       	in	r20, 0x05	; 5
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	b9 01       	movw	r22, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <write+0x2e>
 30c:	66 0f       	add	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	8a 95       	dec	r24
 312:	e2 f7       	brpl	.-8      	; 0x30c <write+0x2a>
 314:	cb 01       	movw	r24, r22
 316:	84 2b       	or	r24, r20
 318:	85 b9       	out	0x05, r24	; 5
 31a:	08 95       	ret

0000031c <shiftOut>:
    }
}

// shift out value to data
void shiftOut (uint8_t val)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	d8 2f       	mov	r29, r24
 322:	c8 e0       	ldi	r28, 0x08	; 8
    uint8_t i;
    for (i = 0; i < 8; i++)  {
        write(clock, LOW);   // bit valid on rising edge
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
        write(data, val & 1 ? HIGH : LOW); // lsb first
 32c:	6d 2f       	mov	r22, r29
 32e:	61 70       	andi	r22, 0x01	; 1
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
        val = val >> 1;
 336:	d6 95       	lsr	r29
        write(clock, HIGH);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
 340:	c1 50       	subi	r28, 0x01	; 1

// shift out value to data
void shiftOut (uint8_t val)
{
    uint8_t i;
    for (i = 0; i < 8; i++)  {
 342:	81 f7       	brne	.-32     	; 0x324 <shiftOut+0x8>
        write(clock, LOW);   // bit valid on rising edge
        write(data, val & 1 ? HIGH : LOW); // lsb first
        val = val >> 1;
        write(clock, HIGH);
    }
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <sendCommand>:

void sendCommand(uint8_t value)
{
 34a:	cf 93       	push	r28
 34c:	c8 2f       	mov	r28, r24
    write(strobe, LOW);
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
    shiftOut(value);
 356:	8c 2f       	mov	r24, r28
 358:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
    write(strobe, HIGH);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <counting>:
    sendCommand(0x89);  // activate and set brightness to medium
//  reset();
}

void counting()
{
 368:	2f 92       	push	r2
 36a:	3f 92       	push	r3
 36c:	4f 92       	push	r4
 36e:	5f 92       	push	r5
 370:	6f 92       	push	r6
 372:	7f 92       	push	r7
 374:	8f 92       	push	r8
 376:	9f 92       	push	r9
 378:	af 92       	push	r10
 37a:	bf 92       	push	r11
 37c:	cf 92       	push	r12
 37e:	df 92       	push	r13
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	2c 97       	sbiw	r28, 0x0c	; 12
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
		

    write(strobe, HIGH);

   teller++;
}
 39c:	2d b6       	in	r2, 0x3d	; 61
 39e:	3e b6       	in	r3, 0x3e	; 62
}

void counting()
{
                                 /*0*/  /*1*/   /*2*/  /*3*/  /*4*/  /*5*/  /*6*/  /*7*/   /*8*/  /*9*/
    uint8_t digits[] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f };
 3a0:	de 01       	movw	r26, r28
 3a2:	11 96       	adiw	r26, 0x01	; 1
 3a4:	e0 e0       	ldi	r30, 0x00	; 0
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	8a e0       	ldi	r24, 0x0A	; 10
 3aa:	01 90       	ld	r0, Z+
 3ac:	0d 92       	st	X+, r0
 3ae:	81 50       	subi	r24, 0x01	; 1
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <counting+0x42>

    static long teller = 0;
	uint8_t x = log10(teller) + 1;
 3b2:	00 91 0e 01 	lds	r16, 0x010E
 3b6:	f0 90 0f 01 	lds	r15, 0x010F
 3ba:	e0 90 10 01 	lds	r14, 0x0110
 3be:	d0 90 11 01 	lds	r13, 0x0111
 3c2:	60 2f       	mov	r22, r16
 3c4:	7f 2d       	mov	r23, r15
 3c6:	8e 2d       	mov	r24, r14
 3c8:	9d 2d       	mov	r25, r13
 3ca:	0e 94 4d 03 	call	0x69a	; 0x69a <__floatsisf>
 3ce:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <log10>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e8       	ldi	r20, 0x80	; 128
 3d8:	5f e3       	ldi	r21, 0x3F	; 63
 3da:	0e 94 bb 02 	call	0x576	; 0x576 <__addsf3>
 3de:	0e 94 1f 03 	call	0x63e	; 0x63e <__fixunssfsi>
 3e2:	c6 2e       	mov	r12, r22
	long nummer = teller;
	uint8_t digit;
	int lijst[x+1];
 3e4:	86 2f       	mov	r24, r22
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	2d b7       	in	r18, 0x3d	; 61
 3f0:	3e b7       	in	r19, 0x3e	; 62
 3f2:	28 1b       	sub	r18, r24
 3f4:	39 0b       	sbc	r19, r25
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	3e bf       	out	0x3e, r19	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	2d bf       	out	0x3d, r18	; 61
 400:	8d b7       	in	r24, 0x3d	; 61
 402:	9e b7       	in	r25, 0x3e	; 62
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	9c 87       	std	Y+12, r25	; 0x0c
 408:	8b 87       	std	Y+11, r24	; 0x0b
 40a:	4c 01       	movw	r8, r24
	
	for(uint8_t y = 0; y <= x; y++)
 40c:	10 e0       	ldi	r17, 0x00	; 0
	{
		lijst[y] = nummer % 10; // als number = 0 dan array{0,0}
 40e:	0f 2e       	mov	r0, r31
 410:	fa e0       	ldi	r31, 0x0A	; 10
 412:	4f 2e       	mov	r4, r31
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	5f 2e       	mov	r5, r31
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	6f 2e       	mov	r6, r31
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	7f 2e       	mov	r7, r31
 420:	f0 2d       	mov	r31, r0
 422:	81 2f       	mov	r24, r17
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	54 01       	movw	r10, r8
 42c:	a8 0e       	add	r10, r24
 42e:	b9 1e       	adc	r11, r25
 430:	60 2f       	mov	r22, r16
 432:	7f 2d       	mov	r23, r15
 434:	8e 2d       	mov	r24, r14
 436:	9d 2d       	mov	r25, r13
 438:	a3 01       	movw	r20, r6
 43a:	92 01       	movw	r18, r4
 43c:	0e 94 ba 04 	call	0x974	; 0x974 <__divmodsi4>
 440:	dc 01       	movw	r26, r24
 442:	cb 01       	movw	r24, r22
 444:	f5 01       	movw	r30, r10
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	80 83       	st	Z, r24
		nummer = nummer / 10;
 44a:	02 2f       	mov	r16, r18
 44c:	f3 2e       	mov	r15, r19
 44e:	e4 2e       	mov	r14, r20
 450:	d5 2e       	mov	r13, r21
	uint8_t x = log10(teller) + 1;
	long nummer = teller;
	uint8_t digit;
	int lijst[x+1];
	
	for(uint8_t y = 0; y <= x; y++)
 452:	1f 5f       	subi	r17, 0xFF	; 255
 454:	c1 16       	cp	r12, r17
 456:	28 f7       	brcc	.-54     	; 0x422 <counting+0xba>
	{
		lijst[y] = nummer % 10; // als number = 0 dan array{0,0}
		nummer = nummer / 10;
	}

    sendCommand(0x40); // auto-increment address
 458:	80 e4       	ldi	r24, 0x40	; 64
 45a:	0e 94 a5 01 	call	0x34a	; 0x34a <sendCommand>
    write(strobe, LOW);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
    shiftOut(0xc0); // set starting address = 0
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
 46c:	eb 84       	ldd	r14, Y+11	; 0x0b
 46e:	fc 84       	ldd	r15, Y+12	; 0x0c
    for(uint8_t position = 8; position > 0; position--)
 470:	18 e0       	ldi	r17, 0x08	; 8
    {
        if(position > x) // als x = 1 dan digit = array[0]
 472:	c1 16       	cp	r12, r17
 474:	38 f4       	brcc	.+14     	; 0x484 <counting+0x11c>
		{
			shiftOut(0x00);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
			shiftOut(0x00);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
 482:	0e c0       	rjmp	.+28     	; 0x4a0 <counting+0x138>
		}
		else
		{
			digit = lijst[position - 1];
			shiftOut(digits[digit]);
 484:	f7 01       	movw	r30, r14
 486:	86 85       	ldd	r24, Z+14	; 0x0e
 488:	e1 e0       	ldi	r30, 0x01	; 1
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ec 0f       	add	r30, r28
 48e:	fd 1f       	adc	r31, r29
 490:	e8 0f       	add	r30, r24
 492:	f1 1d       	adc	r31, r1
 494:	80 81       	ld	r24, Z
 496:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
			shiftOut(0x00);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
	}

    sendCommand(0x40); // auto-increment address
    write(strobe, LOW);
    shiftOut(0xc0); // set starting address = 0
    for(uint8_t position = 8; position > 0; position--)
 4a0:	11 50       	subi	r17, 0x01	; 1
 4a2:	2e ef       	ldi	r18, 0xFE	; 254
 4a4:	3f ef       	ldi	r19, 0xFF	; 255
 4a6:	e2 0e       	add	r14, r18
 4a8:	f3 1e       	adc	r15, r19
 4aa:	11 23       	and	r17, r17
 4ac:	11 f7       	brne	.-60     	; 0x472 <counting+0x10a>
			shiftOut(0x00);
		}
	}
		

    write(strobe, HIGH);
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>

   teller++;
 4b6:	80 91 0e 01 	lds	r24, 0x010E
 4ba:	90 91 0f 01 	lds	r25, 0x010F
 4be:	a0 91 10 01 	lds	r26, 0x0110
 4c2:	b0 91 11 01 	lds	r27, 0x0111
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	a1 1d       	adc	r26, r1
 4ca:	b1 1d       	adc	r27, r1
 4cc:	80 93 0e 01 	sts	0x010E, r24
 4d0:	90 93 0f 01 	sts	0x010F, r25
 4d4:	a0 93 10 01 	sts	0x0110, r26
 4d8:	b0 93 11 01 	sts	0x0111, r27
}
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	3e be       	out	0x3e, r3	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	2d be       	out	0x3d, r2	; 61
 4e6:	2c 96       	adiw	r28, 0x0c	; 12
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	bf 90       	pop	r11
 504:	af 90       	pop	r10
 506:	9f 90       	pop	r9
 508:	8f 90       	pop	r8
 50a:	7f 90       	pop	r7
 50c:	6f 90       	pop	r6
 50e:	5f 90       	pop	r5
 510:	4f 90       	pop	r4
 512:	3f 90       	pop	r3
 514:	2f 90       	pop	r2
 516:	08 95       	ret

00000518 <reset>:
    shiftOut(value);
    write(strobe, HIGH);
}

void reset()
{
 518:	cf 93       	push	r28
    // clear memory - all 16 addresses
    sendCommand(0x40); // set auto increment mode
 51a:	80 e4       	ldi	r24, 0x40	; 64
 51c:	0e 94 a5 01 	call	0x34a	; 0x34a <sendCommand>
    write(strobe, LOW);
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
    shiftOut(0xc0);   // set starting address to 0
 528:	80 ec       	ldi	r24, 0xC0	; 192
 52a:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
 52e:	c0 e1       	ldi	r28, 0x10	; 16
    for(uint8_t i = 0; i < 16; i++)
    {
        shiftOut(0x00);
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 8e 01 	call	0x31c	; 0x31c <shiftOut>
 536:	c1 50       	subi	r28, 0x01	; 1
{
    // clear memory - all 16 addresses
    sendCommand(0x40); // set auto increment mode
    write(strobe, LOW);
    shiftOut(0xc0);   // set starting address to 0
    for(uint8_t i = 0; i < 16; i++)
 538:	d9 f7       	brne	.-10     	; 0x530 <reset+0x18>
    {
        shiftOut(0x00);
    }
    write(strobe, HIGH);
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <write>
}
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <setup>:

void setup()
{
     DDRB=0xff; // set port B as output
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	84 b9       	out	0x04, r24	; 4

    sendCommand(0x89);  // activate and set brightness to medium
 54a:	89 e8       	ldi	r24, 0x89	; 137
 54c:	0e 94 a5 01 	call	0x34a	; 0x34a <sendCommand>
//  reset();
}
 550:	08 95       	ret

00000552 <main>:


int main()
{

    setup();
 552:	0e 94 a3 02 	call	0x546	; 0x546 <setup>
	SCH_Init_T1(); // init de timer en verwijder alle taken
 556:	0e 94 0b 01 	call	0x216	; 0x216 <SCH_Init_T1>
	SCH_Add_Task(counting,0,50);
 55a:	84 eb       	ldi	r24, 0xB4	; 180
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	42 e3       	ldi	r20, 0x32	; 50
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	0e 94 80 00 	call	0x100	; 0x100 <SCH_Add_Task>
	SCH_Start(); // start de scheduler
 56a:	0e 94 21 01 	call	0x242	; 0x242 <SCH_Start>
	

    while (1) {
    SCH_Dispatch_Tasks();
 56e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <SCH_Dispatch_Tasks>
 572:	fd cf       	rjmp	.-6      	; 0x56e <main+0x1c>

00000574 <__subsf3>:
 574:	50 58       	subi	r21, 0x80	; 128

00000576 <__addsf3>:
 576:	bb 27       	eor	r27, r27
 578:	aa 27       	eor	r26, r26
 57a:	0e d0       	rcall	.+28     	; 0x598 <__addsf3x>
 57c:	e0 c0       	rjmp	.+448    	; 0x73e <__fp_round>
 57e:	d1 d0       	rcall	.+418    	; 0x722 <__fp_pscA>
 580:	30 f0       	brcs	.+12     	; 0x58e <__addsf3+0x18>
 582:	d6 d0       	rcall	.+428    	; 0x730 <__fp_pscB>
 584:	20 f0       	brcs	.+8      	; 0x58e <__addsf3+0x18>
 586:	31 f4       	brne	.+12     	; 0x594 <__addsf3+0x1e>
 588:	9f 3f       	cpi	r25, 0xFF	; 255
 58a:	11 f4       	brne	.+4      	; 0x590 <__addsf3+0x1a>
 58c:	1e f4       	brtc	.+6      	; 0x594 <__addsf3+0x1e>
 58e:	c6 c0       	rjmp	.+396    	; 0x71c <__fp_nan>
 590:	0e f4       	brtc	.+2      	; 0x594 <__addsf3+0x1e>
 592:	e0 95       	com	r30
 594:	e7 fb       	bst	r30, 7
 596:	bc c0       	rjmp	.+376    	; 0x710 <__fp_inf>

00000598 <__addsf3x>:
 598:	e9 2f       	mov	r30, r25
 59a:	e2 d0       	rcall	.+452    	; 0x760 <__fp_split3>
 59c:	80 f3       	brcs	.-32     	; 0x57e <__addsf3+0x8>
 59e:	ba 17       	cp	r27, r26
 5a0:	62 07       	cpc	r22, r18
 5a2:	73 07       	cpc	r23, r19
 5a4:	84 07       	cpc	r24, r20
 5a6:	95 07       	cpc	r25, r21
 5a8:	18 f0       	brcs	.+6      	; 0x5b0 <__addsf3x+0x18>
 5aa:	71 f4       	brne	.+28     	; 0x5c8 <__addsf3x+0x30>
 5ac:	9e f5       	brtc	.+102    	; 0x614 <__addsf3x+0x7c>
 5ae:	fa c0       	rjmp	.+500    	; 0x7a4 <__fp_zero>
 5b0:	0e f4       	brtc	.+2      	; 0x5b4 <__addsf3x+0x1c>
 5b2:	e0 95       	com	r30
 5b4:	0b 2e       	mov	r0, r27
 5b6:	ba 2f       	mov	r27, r26
 5b8:	a0 2d       	mov	r26, r0
 5ba:	0b 01       	movw	r0, r22
 5bc:	b9 01       	movw	r22, r18
 5be:	90 01       	movw	r18, r0
 5c0:	0c 01       	movw	r0, r24
 5c2:	ca 01       	movw	r24, r20
 5c4:	a0 01       	movw	r20, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	ff 27       	eor	r31, r31
 5ca:	59 1b       	sub	r21, r25
 5cc:	99 f0       	breq	.+38     	; 0x5f4 <__addsf3x+0x5c>
 5ce:	59 3f       	cpi	r21, 0xF9	; 249
 5d0:	50 f4       	brcc	.+20     	; 0x5e6 <__addsf3x+0x4e>
 5d2:	50 3e       	cpi	r21, 0xE0	; 224
 5d4:	68 f1       	brcs	.+90     	; 0x630 <__addsf3x+0x98>
 5d6:	1a 16       	cp	r1, r26
 5d8:	f0 40       	sbci	r31, 0x00	; 0
 5da:	a2 2f       	mov	r26, r18
 5dc:	23 2f       	mov	r18, r19
 5de:	34 2f       	mov	r19, r20
 5e0:	44 27       	eor	r20, r20
 5e2:	58 5f       	subi	r21, 0xF8	; 248
 5e4:	f3 cf       	rjmp	.-26     	; 0x5cc <__addsf3x+0x34>
 5e6:	46 95       	lsr	r20
 5e8:	37 95       	ror	r19
 5ea:	27 95       	ror	r18
 5ec:	a7 95       	ror	r26
 5ee:	f0 40       	sbci	r31, 0x00	; 0
 5f0:	53 95       	inc	r21
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__addsf3x+0x4e>
 5f4:	7e f4       	brtc	.+30     	; 0x614 <__addsf3x+0x7c>
 5f6:	1f 16       	cp	r1, r31
 5f8:	ba 0b       	sbc	r27, r26
 5fa:	62 0b       	sbc	r22, r18
 5fc:	73 0b       	sbc	r23, r19
 5fe:	84 0b       	sbc	r24, r20
 600:	ba f0       	brmi	.+46     	; 0x630 <__addsf3x+0x98>
 602:	91 50       	subi	r25, 0x01	; 1
 604:	a1 f0       	breq	.+40     	; 0x62e <__addsf3x+0x96>
 606:	ff 0f       	add	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	c2 f7       	brpl	.-16     	; 0x602 <__addsf3x+0x6a>
 612:	0e c0       	rjmp	.+28     	; 0x630 <__addsf3x+0x98>
 614:	ba 0f       	add	r27, r26
 616:	62 1f       	adc	r22, r18
 618:	73 1f       	adc	r23, r19
 61a:	84 1f       	adc	r24, r20
 61c:	48 f4       	brcc	.+18     	; 0x630 <__addsf3x+0x98>
 61e:	87 95       	ror	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	9e 3f       	cpi	r25, 0xFE	; 254
 62a:	08 f0       	brcs	.+2      	; 0x62e <__addsf3x+0x96>
 62c:	b3 cf       	rjmp	.-154    	; 0x594 <__addsf3+0x1e>
 62e:	93 95       	inc	r25
 630:	88 0f       	add	r24, r24
 632:	08 f0       	brcs	.+2      	; 0x636 <__addsf3x+0x9e>
 634:	99 27       	eor	r25, r25
 636:	ee 0f       	add	r30, r30
 638:	97 95       	ror	r25
 63a:	87 95       	ror	r24
 63c:	08 95       	ret

0000063e <__fixunssfsi>:
 63e:	98 d0       	rcall	.+304    	; 0x770 <__fp_splitA>
 640:	88 f0       	brcs	.+34     	; 0x664 <__fixunssfsi+0x26>
 642:	9f 57       	subi	r25, 0x7F	; 127
 644:	90 f0       	brcs	.+36     	; 0x66a <__fixunssfsi+0x2c>
 646:	b9 2f       	mov	r27, r25
 648:	99 27       	eor	r25, r25
 64a:	b7 51       	subi	r27, 0x17	; 23
 64c:	a0 f0       	brcs	.+40     	; 0x676 <__fixunssfsi+0x38>
 64e:	d1 f0       	breq	.+52     	; 0x684 <__fixunssfsi+0x46>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	1a f0       	brmi	.+6      	; 0x660 <__fixunssfsi+0x22>
 65a:	ba 95       	dec	r27
 65c:	c9 f7       	brne	.-14     	; 0x650 <__fixunssfsi+0x12>
 65e:	12 c0       	rjmp	.+36     	; 0x684 <__fixunssfsi+0x46>
 660:	b1 30       	cpi	r27, 0x01	; 1
 662:	81 f0       	breq	.+32     	; 0x684 <__fixunssfsi+0x46>
 664:	9f d0       	rcall	.+318    	; 0x7a4 <__fp_zero>
 666:	b1 e0       	ldi	r27, 0x01	; 1
 668:	08 95       	ret
 66a:	9c c0       	rjmp	.+312    	; 0x7a4 <__fp_zero>
 66c:	67 2f       	mov	r22, r23
 66e:	78 2f       	mov	r23, r24
 670:	88 27       	eor	r24, r24
 672:	b8 5f       	subi	r27, 0xF8	; 248
 674:	39 f0       	breq	.+14     	; 0x684 <__fixunssfsi+0x46>
 676:	b9 3f       	cpi	r27, 0xF9	; 249
 678:	cc f3       	brlt	.-14     	; 0x66c <__fixunssfsi+0x2e>
 67a:	86 95       	lsr	r24
 67c:	77 95       	ror	r23
 67e:	67 95       	ror	r22
 680:	b3 95       	inc	r27
 682:	d9 f7       	brne	.-10     	; 0x67a <__fixunssfsi+0x3c>
 684:	3e f4       	brtc	.+14     	; 0x694 <__fixunssfsi+0x56>
 686:	90 95       	com	r25
 688:	80 95       	com	r24
 68a:	70 95       	com	r23
 68c:	61 95       	neg	r22
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__floatunsisf>:
 696:	e8 94       	clt
 698:	09 c0       	rjmp	.+18     	; 0x6ac <__floatsisf+0x12>

0000069a <__floatsisf>:
 69a:	97 fb       	bst	r25, 7
 69c:	3e f4       	brtc	.+14     	; 0x6ac <__floatsisf+0x12>
 69e:	90 95       	com	r25
 6a0:	80 95       	com	r24
 6a2:	70 95       	com	r23
 6a4:	61 95       	neg	r22
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	99 23       	and	r25, r25
 6ae:	a9 f0       	breq	.+42     	; 0x6da <__floatsisf+0x40>
 6b0:	f9 2f       	mov	r31, r25
 6b2:	96 e9       	ldi	r25, 0x96	; 150
 6b4:	bb 27       	eor	r27, r27
 6b6:	93 95       	inc	r25
 6b8:	f6 95       	lsr	r31
 6ba:	87 95       	ror	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b7 95       	ror	r27
 6c2:	f1 11       	cpse	r31, r1
 6c4:	f8 cf       	rjmp	.-16     	; 0x6b6 <__floatsisf+0x1c>
 6c6:	fa f4       	brpl	.+62     	; 0x706 <__floatsisf+0x6c>
 6c8:	bb 0f       	add	r27, r27
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__floatsisf+0x36>
 6cc:	60 ff       	sbrs	r22, 0
 6ce:	1b c0       	rjmp	.+54     	; 0x706 <__floatsisf+0x6c>
 6d0:	6f 5f       	subi	r22, 0xFF	; 255
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <__floatsisf+0x6c>
 6da:	88 23       	and	r24, r24
 6dc:	11 f0       	breq	.+4      	; 0x6e2 <__floatsisf+0x48>
 6de:	96 e9       	ldi	r25, 0x96	; 150
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <__floatsisf+0x6a>
 6e2:	77 23       	and	r23, r23
 6e4:	21 f0       	breq	.+8      	; 0x6ee <__floatsisf+0x54>
 6e6:	9e e8       	ldi	r25, 0x8E	; 142
 6e8:	87 2f       	mov	r24, r23
 6ea:	76 2f       	mov	r23, r22
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <__floatsisf+0x5e>
 6ee:	66 23       	and	r22, r22
 6f0:	71 f0       	breq	.+28     	; 0x70e <__floatsisf+0x74>
 6f2:	96 e8       	ldi	r25, 0x86	; 134
 6f4:	86 2f       	mov	r24, r22
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	2a f0       	brmi	.+10     	; 0x706 <__floatsisf+0x6c>
 6fc:	9a 95       	dec	r25
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	da f7       	brpl	.-10     	; 0x6fc <__floatsisf+0x62>
 706:	88 0f       	add	r24, r24
 708:	96 95       	lsr	r25
 70a:	87 95       	ror	r24
 70c:	97 f9       	bld	r25, 7
 70e:	08 95       	ret

00000710 <__fp_inf>:
 710:	97 f9       	bld	r25, 7
 712:	9f 67       	ori	r25, 0x7F	; 127
 714:	80 e8       	ldi	r24, 0x80	; 128
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	08 95       	ret

0000071c <__fp_nan>:
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	80 ec       	ldi	r24, 0xC0	; 192
 720:	08 95       	ret

00000722 <__fp_pscA>:
 722:	00 24       	eor	r0, r0
 724:	0a 94       	dec	r0
 726:	16 16       	cp	r1, r22
 728:	17 06       	cpc	r1, r23
 72a:	18 06       	cpc	r1, r24
 72c:	09 06       	cpc	r0, r25
 72e:	08 95       	ret

00000730 <__fp_pscB>:
 730:	00 24       	eor	r0, r0
 732:	0a 94       	dec	r0
 734:	12 16       	cp	r1, r18
 736:	13 06       	cpc	r1, r19
 738:	14 06       	cpc	r1, r20
 73a:	05 06       	cpc	r0, r21
 73c:	08 95       	ret

0000073e <__fp_round>:
 73e:	09 2e       	mov	r0, r25
 740:	03 94       	inc	r0
 742:	00 0c       	add	r0, r0
 744:	11 f4       	brne	.+4      	; 0x74a <__fp_round+0xc>
 746:	88 23       	and	r24, r24
 748:	52 f0       	brmi	.+20     	; 0x75e <__fp_round+0x20>
 74a:	bb 0f       	add	r27, r27
 74c:	40 f4       	brcc	.+16     	; 0x75e <__fp_round+0x20>
 74e:	bf 2b       	or	r27, r31
 750:	11 f4       	brne	.+4      	; 0x756 <__fp_round+0x18>
 752:	60 ff       	sbrs	r22, 0
 754:	04 c0       	rjmp	.+8      	; 0x75e <__fp_round+0x20>
 756:	6f 5f       	subi	r22, 0xFF	; 255
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	08 95       	ret

00000760 <__fp_split3>:
 760:	57 fd       	sbrc	r21, 7
 762:	90 58       	subi	r25, 0x80	; 128
 764:	44 0f       	add	r20, r20
 766:	55 1f       	adc	r21, r21
 768:	59 f0       	breq	.+22     	; 0x780 <__fp_splitA+0x10>
 76a:	5f 3f       	cpi	r21, 0xFF	; 255
 76c:	71 f0       	breq	.+28     	; 0x78a <__fp_splitA+0x1a>
 76e:	47 95       	ror	r20

00000770 <__fp_splitA>:
 770:	88 0f       	add	r24, r24
 772:	97 fb       	bst	r25, 7
 774:	99 1f       	adc	r25, r25
 776:	61 f0       	breq	.+24     	; 0x790 <__fp_splitA+0x20>
 778:	9f 3f       	cpi	r25, 0xFF	; 255
 77a:	79 f0       	breq	.+30     	; 0x79a <__fp_splitA+0x2a>
 77c:	87 95       	ror	r24
 77e:	08 95       	ret
 780:	12 16       	cp	r1, r18
 782:	13 06       	cpc	r1, r19
 784:	14 06       	cpc	r1, r20
 786:	55 1f       	adc	r21, r21
 788:	f2 cf       	rjmp	.-28     	; 0x76e <__fp_split3+0xe>
 78a:	46 95       	lsr	r20
 78c:	f1 df       	rcall	.-30     	; 0x770 <__fp_splitA>
 78e:	08 c0       	rjmp	.+16     	; 0x7a0 <__fp_splitA+0x30>
 790:	16 16       	cp	r1, r22
 792:	17 06       	cpc	r1, r23
 794:	18 06       	cpc	r1, r24
 796:	99 1f       	adc	r25, r25
 798:	f1 cf       	rjmp	.-30     	; 0x77c <__fp_splitA+0xc>
 79a:	86 95       	lsr	r24
 79c:	71 05       	cpc	r23, r1
 79e:	61 05       	cpc	r22, r1
 7a0:	08 94       	sec
 7a2:	08 95       	ret

000007a4 <__fp_zero>:
 7a4:	e8 94       	clt

000007a6 <__fp_szero>:
 7a6:	bb 27       	eor	r27, r27
 7a8:	66 27       	eor	r22, r22
 7aa:	77 27       	eor	r23, r23
 7ac:	cb 01       	movw	r24, r22
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret

000007b2 <log10>:
 7b2:	0a d0       	rcall	.+20     	; 0x7c8 <log>
 7b4:	29 ed       	ldi	r18, 0xD9	; 217
 7b6:	3b e5       	ldi	r19, 0x5B	; 91
 7b8:	4e ed       	ldi	r20, 0xDE	; 222
 7ba:	5e e3       	ldi	r21, 0x3E	; 62
 7bc:	45 c0       	rjmp	.+138    	; 0x848 <__mulsf3>
 7be:	0e f0       	brts	.+2      	; 0x7c2 <log10+0x10>
 7c0:	a6 c0       	rjmp	.+332    	; 0x90e <__fp_mpack>
 7c2:	ac cf       	rjmp	.-168    	; 0x71c <__fp_nan>
 7c4:	68 94       	set
 7c6:	a4 cf       	rjmp	.-184    	; 0x710 <__fp_inf>

000007c8 <log>:
 7c8:	d3 df       	rcall	.-90     	; 0x770 <__fp_splitA>
 7ca:	c8 f3       	brcs	.-14     	; 0x7be <log10+0xc>
 7cc:	99 23       	and	r25, r25
 7ce:	d1 f3       	breq	.-12     	; 0x7c4 <log10+0x12>
 7d0:	c6 f3       	brts	.-16     	; 0x7c2 <log10+0x10>
 7d2:	df 93       	push	r29
 7d4:	cf 93       	push	r28
 7d6:	1f 93       	push	r17
 7d8:	0f 93       	push	r16
 7da:	ff 92       	push	r15
 7dc:	c9 2f       	mov	r28, r25
 7de:	dd 27       	eor	r29, r29
 7e0:	88 23       	and	r24, r24
 7e2:	2a f0       	brmi	.+10     	; 0x7ee <log+0x26>
 7e4:	21 97       	sbiw	r28, 0x01	; 1
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	da f7       	brpl	.-10     	; 0x7e4 <log+0x1c>
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	40 e8       	ldi	r20, 0x80	; 128
 7f4:	5f eb       	ldi	r21, 0xBF	; 191
 7f6:	9f e3       	ldi	r25, 0x3F	; 63
 7f8:	88 39       	cpi	r24, 0x98	; 152
 7fa:	20 f0       	brcs	.+8      	; 0x804 <log+0x3c>
 7fc:	80 3e       	cpi	r24, 0xE0	; 224
 7fe:	30 f0       	brcs	.+12     	; 0x80c <log+0x44>
 800:	21 96       	adiw	r28, 0x01	; 1
 802:	8f 77       	andi	r24, 0x7F	; 127
 804:	b8 de       	rcall	.-656    	; 0x576 <__addsf3>
 806:	e8 e6       	ldi	r30, 0x68	; 104
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	03 c0       	rjmp	.+6      	; 0x812 <log+0x4a>
 80c:	b4 de       	rcall	.-664    	; 0x576 <__addsf3>
 80e:	e5 e9       	ldi	r30, 0x95	; 149
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	8b d0       	rcall	.+278    	; 0x92a <__fp_powser>
 814:	8b 01       	movw	r16, r22
 816:	be 01       	movw	r22, r28
 818:	ec 01       	movw	r28, r24
 81a:	fb 2e       	mov	r15, r27
 81c:	6f 57       	subi	r22, 0x7F	; 127
 81e:	71 09       	sbc	r23, r1
 820:	75 95       	asr	r23
 822:	77 1f       	adc	r23, r23
 824:	88 0b       	sbc	r24, r24
 826:	99 0b       	sbc	r25, r25
 828:	38 df       	rcall	.-400    	; 0x69a <__floatsisf>
 82a:	28 e1       	ldi	r18, 0x18	; 24
 82c:	32 e7       	ldi	r19, 0x72	; 114
 82e:	41 e3       	ldi	r20, 0x31	; 49
 830:	5f e3       	ldi	r21, 0x3F	; 63
 832:	16 d0       	rcall	.+44     	; 0x860 <__mulsf3x>
 834:	af 2d       	mov	r26, r15
 836:	98 01       	movw	r18, r16
 838:	ae 01       	movw	r20, r28
 83a:	ff 90       	pop	r15
 83c:	0f 91       	pop	r16
 83e:	1f 91       	pop	r17
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	a9 de       	rcall	.-686    	; 0x598 <__addsf3x>
 846:	7b cf       	rjmp	.-266    	; 0x73e <__fp_round>

00000848 <__mulsf3>:
 848:	0b d0       	rcall	.+22     	; 0x860 <__mulsf3x>
 84a:	79 cf       	rjmp	.-270    	; 0x73e <__fp_round>
 84c:	6a df       	rcall	.-300    	; 0x722 <__fp_pscA>
 84e:	28 f0       	brcs	.+10     	; 0x85a <__mulsf3+0x12>
 850:	6f df       	rcall	.-290    	; 0x730 <__fp_pscB>
 852:	18 f0       	brcs	.+6      	; 0x85a <__mulsf3+0x12>
 854:	95 23       	and	r25, r21
 856:	09 f0       	breq	.+2      	; 0x85a <__mulsf3+0x12>
 858:	5b cf       	rjmp	.-330    	; 0x710 <__fp_inf>
 85a:	60 cf       	rjmp	.-320    	; 0x71c <__fp_nan>
 85c:	11 24       	eor	r1, r1
 85e:	a3 cf       	rjmp	.-186    	; 0x7a6 <__fp_szero>

00000860 <__mulsf3x>:
 860:	7f df       	rcall	.-258    	; 0x760 <__fp_split3>
 862:	a0 f3       	brcs	.-24     	; 0x84c <__mulsf3+0x4>

00000864 <__mulsf3_pse>:
 864:	95 9f       	mul	r25, r21
 866:	d1 f3       	breq	.-12     	; 0x85c <__mulsf3+0x14>
 868:	95 0f       	add	r25, r21
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	55 1f       	adc	r21, r21
 86e:	62 9f       	mul	r22, r18
 870:	f0 01       	movw	r30, r0
 872:	72 9f       	mul	r23, r18
 874:	bb 27       	eor	r27, r27
 876:	f0 0d       	add	r31, r0
 878:	b1 1d       	adc	r27, r1
 87a:	63 9f       	mul	r22, r19
 87c:	aa 27       	eor	r26, r26
 87e:	f0 0d       	add	r31, r0
 880:	b1 1d       	adc	r27, r1
 882:	aa 1f       	adc	r26, r26
 884:	64 9f       	mul	r22, r20
 886:	66 27       	eor	r22, r22
 888:	b0 0d       	add	r27, r0
 88a:	a1 1d       	adc	r26, r1
 88c:	66 1f       	adc	r22, r22
 88e:	82 9f       	mul	r24, r18
 890:	22 27       	eor	r18, r18
 892:	b0 0d       	add	r27, r0
 894:	a1 1d       	adc	r26, r1
 896:	62 1f       	adc	r22, r18
 898:	73 9f       	mul	r23, r19
 89a:	b0 0d       	add	r27, r0
 89c:	a1 1d       	adc	r26, r1
 89e:	62 1f       	adc	r22, r18
 8a0:	83 9f       	mul	r24, r19
 8a2:	a0 0d       	add	r26, r0
 8a4:	61 1d       	adc	r22, r1
 8a6:	22 1f       	adc	r18, r18
 8a8:	74 9f       	mul	r23, r20
 8aa:	33 27       	eor	r19, r19
 8ac:	a0 0d       	add	r26, r0
 8ae:	61 1d       	adc	r22, r1
 8b0:	23 1f       	adc	r18, r19
 8b2:	84 9f       	mul	r24, r20
 8b4:	60 0d       	add	r22, r0
 8b6:	21 1d       	adc	r18, r1
 8b8:	82 2f       	mov	r24, r18
 8ba:	76 2f       	mov	r23, r22
 8bc:	6a 2f       	mov	r22, r26
 8be:	11 24       	eor	r1, r1
 8c0:	9f 57       	subi	r25, 0x7F	; 127
 8c2:	50 40       	sbci	r21, 0x00	; 0
 8c4:	8a f0       	brmi	.+34     	; 0x8e8 <__mulsf3_pse+0x84>
 8c6:	e1 f0       	breq	.+56     	; 0x900 <__stack+0x1>
 8c8:	88 23       	and	r24, r24
 8ca:	4a f0       	brmi	.+18     	; 0x8de <__mulsf3_pse+0x7a>
 8cc:	ee 0f       	add	r30, r30
 8ce:	ff 1f       	adc	r31, r31
 8d0:	bb 1f       	adc	r27, r27
 8d2:	66 1f       	adc	r22, r22
 8d4:	77 1f       	adc	r23, r23
 8d6:	88 1f       	adc	r24, r24
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	50 40       	sbci	r21, 0x00	; 0
 8dc:	a9 f7       	brne	.-22     	; 0x8c8 <__mulsf3_pse+0x64>
 8de:	9e 3f       	cpi	r25, 0xFE	; 254
 8e0:	51 05       	cpc	r21, r1
 8e2:	70 f0       	brcs	.+28     	; 0x900 <__stack+0x1>
 8e4:	15 cf       	rjmp	.-470    	; 0x710 <__fp_inf>
 8e6:	5f cf       	rjmp	.-322    	; 0x7a6 <__fp_szero>
 8e8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ea:	ec f3       	brlt	.-6      	; 0x8e6 <__mulsf3_pse+0x82>
 8ec:	98 3e       	cpi	r25, 0xE8	; 232
 8ee:	dc f3       	brlt	.-10     	; 0x8e6 <__mulsf3_pse+0x82>
 8f0:	86 95       	lsr	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	b7 95       	ror	r27
 8f8:	f7 95       	ror	r31
 8fa:	e7 95       	ror	r30
 8fc:	9f 5f       	subi	r25, 0xFF	; 255
 8fe:	c1 f7       	brne	.-16     	; 0x8f0 <__mulsf3_pse+0x8c>
 900:	fe 2b       	or	r31, r30
 902:	88 0f       	add	r24, r24
 904:	91 1d       	adc	r25, r1
 906:	96 95       	lsr	r25
 908:	87 95       	ror	r24
 90a:	97 f9       	bld	r25, 7
 90c:	08 95       	ret

0000090e <__fp_mpack>:
 90e:	9f 3f       	cpi	r25, 0xFF	; 255
 910:	31 f0       	breq	.+12     	; 0x91e <__fp_mpack_finite+0xc>

00000912 <__fp_mpack_finite>:
 912:	91 50       	subi	r25, 0x01	; 1
 914:	20 f4       	brcc	.+8      	; 0x91e <__fp_mpack_finite+0xc>
 916:	87 95       	ror	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	88 0f       	add	r24, r24
 920:	91 1d       	adc	r25, r1
 922:	96 95       	lsr	r25
 924:	87 95       	ror	r24
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <__fp_powser>:
 92a:	df 93       	push	r29
 92c:	cf 93       	push	r28
 92e:	1f 93       	push	r17
 930:	0f 93       	push	r16
 932:	ff 92       	push	r15
 934:	ef 92       	push	r14
 936:	df 92       	push	r13
 938:	7b 01       	movw	r14, r22
 93a:	8c 01       	movw	r16, r24
 93c:	68 94       	set
 93e:	05 c0       	rjmp	.+10     	; 0x94a <__fp_powser+0x20>
 940:	da 2e       	mov	r13, r26
 942:	ef 01       	movw	r28, r30
 944:	8d df       	rcall	.-230    	; 0x860 <__mulsf3x>
 946:	fe 01       	movw	r30, r28
 948:	e8 94       	clt
 94a:	a5 91       	lpm	r26, Z+
 94c:	25 91       	lpm	r18, Z+
 94e:	35 91       	lpm	r19, Z+
 950:	45 91       	lpm	r20, Z+
 952:	55 91       	lpm	r21, Z+
 954:	ae f3       	brts	.-22     	; 0x940 <__fp_powser+0x16>
 956:	ef 01       	movw	r28, r30
 958:	1f de       	rcall	.-962    	; 0x598 <__addsf3x>
 95a:	fe 01       	movw	r30, r28
 95c:	97 01       	movw	r18, r14
 95e:	a8 01       	movw	r20, r16
 960:	da 94       	dec	r13
 962:	79 f7       	brne	.-34     	; 0x942 <__fp_powser+0x18>
 964:	df 90       	pop	r13
 966:	ef 90       	pop	r14
 968:	ff 90       	pop	r15
 96a:	0f 91       	pop	r16
 96c:	1f 91       	pop	r17
 96e:	cf 91       	pop	r28
 970:	df 91       	pop	r29
 972:	08 95       	ret

00000974 <__divmodsi4>:
 974:	97 fb       	bst	r25, 7
 976:	09 2e       	mov	r0, r25
 978:	05 26       	eor	r0, r21
 97a:	0e d0       	rcall	.+28     	; 0x998 <__divmodsi4_neg1>
 97c:	57 fd       	sbrc	r21, 7
 97e:	04 d0       	rcall	.+8      	; 0x988 <__divmodsi4_neg2>
 980:	14 d0       	rcall	.+40     	; 0x9aa <__udivmodsi4>
 982:	0a d0       	rcall	.+20     	; 0x998 <__divmodsi4_neg1>
 984:	00 1c       	adc	r0, r0
 986:	38 f4       	brcc	.+14     	; 0x996 <__divmodsi4_exit>

00000988 <__divmodsi4_neg2>:
 988:	50 95       	com	r21
 98a:	40 95       	com	r20
 98c:	30 95       	com	r19
 98e:	21 95       	neg	r18
 990:	3f 4f       	sbci	r19, 0xFF	; 255
 992:	4f 4f       	sbci	r20, 0xFF	; 255
 994:	5f 4f       	sbci	r21, 0xFF	; 255

00000996 <__divmodsi4_exit>:
 996:	08 95       	ret

00000998 <__divmodsi4_neg1>:
 998:	f6 f7       	brtc	.-4      	; 0x996 <__divmodsi4_exit>
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <__udivmodsi4>:
 9aa:	a1 e2       	ldi	r26, 0x21	; 33
 9ac:	1a 2e       	mov	r1, r26
 9ae:	aa 1b       	sub	r26, r26
 9b0:	bb 1b       	sub	r27, r27
 9b2:	fd 01       	movw	r30, r26
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <__udivmodsi4_ep>

000009b6 <__udivmodsi4_loop>:
 9b6:	aa 1f       	adc	r26, r26
 9b8:	bb 1f       	adc	r27, r27
 9ba:	ee 1f       	adc	r30, r30
 9bc:	ff 1f       	adc	r31, r31
 9be:	a2 17       	cp	r26, r18
 9c0:	b3 07       	cpc	r27, r19
 9c2:	e4 07       	cpc	r30, r20
 9c4:	f5 07       	cpc	r31, r21
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__udivmodsi4_ep>
 9c8:	a2 1b       	sub	r26, r18
 9ca:	b3 0b       	sbc	r27, r19
 9cc:	e4 0b       	sbc	r30, r20
 9ce:	f5 0b       	sbc	r31, r21

000009d0 <__udivmodsi4_ep>:
 9d0:	66 1f       	adc	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	1a 94       	dec	r1
 9da:	69 f7       	brne	.-38     	; 0x9b6 <__udivmodsi4_loop>
 9dc:	60 95       	com	r22
 9de:	70 95       	com	r23
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	9b 01       	movw	r18, r22
 9e6:	ac 01       	movw	r20, r24
 9e8:	bd 01       	movw	r22, r26
 9ea:	cf 01       	movw	r24, r30
 9ec:	08 95       	ret

000009ee <_exit>:
 9ee:	f8 94       	cli

000009f0 <__stop_program>:
 9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <__stop_program>
