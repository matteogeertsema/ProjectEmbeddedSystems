
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800100  00800100  00000d02  2**0
                  ALLOC
  3 .stab         000023c4  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000585  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00003650  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae8  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fa  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007de  00000000  00000000  00004632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00004e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031f  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d7  00000000  00000000  0000532b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00005c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_11>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	lds	r16, 0x00
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__mulsf3_pse>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
  f4:	ba a5       	lds	r27, 0x6a
  f6:	6f a5       	lds	r22, 0x6f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <hcsr04+0x1e>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <SCH_Add_Task+0x1e>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ee e6       	ldi	r30, 0x6E	; 110
 176:	fc e0       	ldi	r31, 0x0C	; 12
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	a0 30       	cpi	r26, 0x00	; 0
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	11 e0       	ldi	r17, 0x01	; 1
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	af 32       	cpi	r26, 0x2F	; 47
 190:	b1 07       	cpc	r27, r17
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 44 02 	call	0x488	; 0x488 <main>
 198:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <transmit>:

void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	95 ff       	sbrs	r25, 5
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <transmit+0x4>
	// send the data
	UDR0 = data;
 1aa:	80 93 c6 00 	sts	0x00C6, r24
}
 1ae:	08 95       	ret

000001b0 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	8c 01       	movw	r16, r24
 1ba:	eb 01       	movw	r28, r22
 1bc:	da 01       	movw	r26, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 1be:	80 91 00 01 	lds	r24, 0x0100
 1c2:	90 91 01 01 	lds	r25, 0x0101
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <SCH_Add_Task+0x46>
 1ca:	e7 e0       	ldi	r30, 0x07	; 7
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
 1d2:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 1d4:	b9 01       	movw	r22, r18
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	41 f0       	breq	.+16     	; 0x1ee <SCH_Add_Task+0x3e>
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	37 96       	adiw	r30, 0x07	; 7
 1e4:	26 30       	cpi	r18, 0x06	; 6
 1e6:	31 05       	cpc	r19, r1
 1e8:	a1 f7       	brne	.-24     	; 0x1d2 <SCH_Add_Task+0x22>
   {
      Index++;
 1ea:	84 2f       	mov	r24, r20
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <SCH_Add_Task+0x40>
 1ee:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	21 f4       	brne	.+8      	; 0x1fc <SCH_Add_Task+0x4c>
 1f4:	17 c0       	rjmp	.+46     	; 0x224 <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
 1fa:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
 1fc:	cb 01       	movw	r24, r22
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	86 1b       	sub	r24, r22
 20c:	97 0b       	sbc	r25, r23
 20e:	fc 01       	movw	r30, r24
 210:	e0 50       	subi	r30, 0x00	; 0
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	11 83       	std	Z+1, r17	; 0x01
 216:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
 218:	d3 83       	std	Z+3, r29	; 0x03
 21a:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 21c:	b5 83       	std	Z+5, r27	; 0x05
 21e:	a4 83       	std	Z+4, r26	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 220:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
 222:	84 2f       	mov	r24, r20
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e8 1b       	sub	r30, r24
 240:	f9 0b       	sbc	r31, r25
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	11 82       	std	Z+1, r1	; 0x01
 248:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 24a:	13 82       	std	Z+3, r1	; 0x03
 24c:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 24e:	15 82       	std	Z+5, r1	; 0x05
 250:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 252:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret

00000258 <SCH_Dispatch_Tasks>:
  is due to run, SCH_Dispatch_Tasks() will run it.
  This function must be called (repeatedly) from the main loop.
-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 266:	c6 e0       	ldi	r28, 0x06	; 6
 268:	d1 e0       	ldi	r29, 0x01	; 1
 26a:	0f 2e       	mov	r0, r31
 26c:	fa ef       	ldi	r31, 0xFA	; 250
 26e:	ef 2e       	mov	r14, r31
 270:	ff ef       	ldi	r31, 0xFF	; 255
 272:	ff 2e       	mov	r15, r31
 274:	f0 2d       	mov	r31, r0
 276:	ec 0e       	add	r14, r28
 278:	fd 1e       	adc	r15, r29
 27a:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 27c:	88 81       	ld	r24, Y
 27e:	88 23       	and	r24, r24
 280:	91 f0       	breq	.+36     	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
 282:	d7 01       	movw	r26, r14
 284:	ed 91       	ld	r30, X+
 286:	fc 91       	ld	r31, X
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	30 97       	sbiw	r30, 0x00	; 0
 28c:	61 f0       	breq	.+24     	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 28e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 290:	88 81       	ld	r24, Y
 292:	81 50       	subi	r24, 0x01	; 1
 294:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 296:	f7 01       	movw	r30, r14
 298:	84 81       	ldd	r24, Z+4	; 0x04
 29a:	95 81       	ldd	r25, Z+5	; 0x05
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	19 f4       	brne	.+6      	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
 2a0:	81 2f       	mov	r24, r17
 2a2:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 2a6:	1f 5f       	subi	r17, 0xFF	; 255
 2a8:	27 96       	adiw	r28, 0x07	; 7
 2aa:	87 e0       	ldi	r24, 0x07	; 7
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	e8 0e       	add	r14, r24
 2b0:	f9 1e       	adc	r15, r25
 2b2:	15 30       	cpi	r17, 0x05	; 5
 2b4:	19 f7       	brne	.-58     	; 0x27c <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	08 95       	ret

000002c6 <SCH_Init_T1>:
  data structures and sets up timer interrupts at required rate.
  You must call this function before using the scheduler.  
-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 2c6:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 2ca:	8c 2f       	mov	r24, r28
 2cc:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 2d0:	cf 5f       	subi	r28, 0xFF	; 255
 2d2:	c5 30       	cpi	r28, 0x05	; 5
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <SCH_Init_T1+0x4>
   }
   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 2d6:	81 e7       	ldi	r24, 0x71	; 113
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	90 93 89 00 	sts	0x0089, r25
 2de:	80 93 88 00 	sts	0x0088, r24
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 6f 00 	sts	0x006F, r24
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 2f2:	78 94       	sei
}
 2f4:	08 95       	ret

000002f6 <__vector_11>:
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
 314:	e0 e0       	ldi	r30, 0x00	; 0
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	df 01       	movw	r26, r30
 31a:	16 96       	adiw	r26, 0x06	; 6
  SCH_Update
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
 31c:	9f 01       	movw	r18, r30
 31e:	2d 5d       	subi	r18, 0xDD	; 221
 320:	3f 4f       	sbci	r19, 0xFF	; 255
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 322:	80 81       	ld	r24, Z
 324:	91 81       	ldd	r25, Z+1	; 0x01
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	91 f0       	breq	.+36     	; 0x34e <__vector_11+0x58>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 32a:	82 81       	ldd	r24, Z+2	; 0x02
 32c:	93 81       	ldd	r25, Z+3	; 0x03
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	59 f4       	brne	.+22     	; 0x348 <__vector_11+0x52>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 332:	8c 91       	ld	r24, X
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
 338:	84 81       	ldd	r24, Z+4	; 0x04
 33a:	95 81       	ldd	r25, Z+5	; 0x05
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	39 f0       	breq	.+14     	; 0x34e <__vector_11+0x58>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	93 83       	std	Z+3, r25	; 0x03
 344:	82 83       	std	Z+2, r24	; 0x02
 346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_11+0x58>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	93 83       	std	Z+3, r25	; 0x03
 34c:	82 83       	std	Z+2, r24	; 0x02
 34e:	37 96       	adiw	r30, 0x07	; 7
 350:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 352:	e2 17       	cp	r30, r18
 354:	f3 07       	cpc	r31, r19
 356:	29 f7       	brne	.-54     	; 0x322 <__vector_11+0x2c>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <uart_init>:
float tijdelijk_float;
char input;

void uart_init() {
	// set the baud rate
	UBRR0H = 19200;
 376:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 37a:	83 e3       	ldi	r24, 0x33	; 51
 37c:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 380:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	80 93 c2 00 	sts	0x00C2, r24
}
 390:	08 95       	ret

00000392 <UART_Putstring>:

void UART_Putstring(char* eenstring)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
	while(*eenstring != 0X00)
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	39 f0       	breq	.+14     	; 0x3ac <UART_Putstring+0x1a>
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

void UART_Putstring(char* eenstring)
 39e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*eenstring != 0X00)
	{
		transmit(*eenstring);
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmit>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

void UART_Putstring(char* eenstring)
{
	while(*eenstring != 0X00)
 3a6:	89 91       	ld	r24, Y+
 3a8:	88 23       	and	r24, r24
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <UART_Putstring+0xe>
	{
		transmit(*eenstring);
		eenstring++;
	}
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <receive>:

char receive(void) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 3b2:	e0 ec       	ldi	r30, 0xC0	; 192
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	88 23       	and	r24, r24
 3ba:	ec f7       	brge	.-6      	; 0x3b6 <receive+0x4>
	return UDR0;
 3bc:	80 91 c6 00 	lds	r24, 0x00C6
}
 3c0:	08 95       	ret

000003c2 <hcsr04>:
}

uint8_t hcsr04(){
		uint8_t count = 0; 
		
		DDRD |= 1<<5; // Setup HC-SR04 Trigger as an output
 3c2:	55 9a       	sbi	0x0a, 5	; 10
		DDRD &= ~(1<<4); // Setup HC-SR04 Echo a an input
 3c4:	54 98       	cbi	0x0a, 4	; 10
		
		PORTD |= (1<<5); 
 3c6:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	80 e5       	ldi	r24, 0x50	; 80
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <hcsr04+0x8>
		_delay_us(15); //		15 uS pulse naar trigger pin 
		PORTD &= ~(1<<5); 
 3ce:	5d 98       	cbi	0x0b, 5	; 11
		
		// deze code is overgenomen van "http://eecs.oregonstate.edu/tekbots/modules/hcsr04"
		
		while ((PIND & (1<<4)) != (1<<4)); // Loop doorlopen wanneer echo pin HIGH is 
 3d0:	4c 9b       	sbis	0x09, 4	; 9
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <hcsr04+0xe>
		while (1){ 
			if (count == 238) // max waarde van 160 bereikt  
				return(count); // return maximum distance.
			if ((PIND & (1<<4)) != (1<<4)) // Echo pulse on PORTD, Pin 4 is high (detected)
 3d4:	4c 99       	sbic	0x09, 4	; 9
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <hcsr04+0x2e>
 3d8:	09 c0       	rjmp	.+18     	; 0x3ec <hcsr04+0x2a>
 3da:	4c 9b       	sbis	0x09, 4	; 9
 3dc:	08 c0       	rjmp	.+16     	; 0x3ee <hcsr04+0x2c>
 3de:	90 ed       	ldi	r25, 0xD0	; 208
 3e0:	9a 95       	dec	r25
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <hcsr04+0x1e>
				return(count); // Return current count
			_delay_us(39); // delay 40 usec
			count ++; // Increment Count
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
		
		// deze code is overgenomen van "http://eecs.oregonstate.edu/tekbots/modules/hcsr04"
		
		while ((PIND & (1<<4)) != (1<<4)); // Loop doorlopen wanneer echo pin HIGH is 
		while (1){ 
			if (count == 238) // max waarde van 160 bereikt  
 3e6:	8e 3e       	cpi	r24, 0xEE	; 238
 3e8:	c1 f7       	brne	.-16     	; 0x3da <hcsr04+0x18>
 3ea:	08 95       	ret
				return(count); // return maximum distance.
			if ((PIND & (1<<4)) != (1<<4)) // Echo pulse on PORTD, Pin 4 is high (detected)
 3ec:	80 e0       	ldi	r24, 0x00	; 0
				return(count); // Return current count
			_delay_us(39); // delay 40 usec
			count ++; // Increment Count
		}
}		
 3ee:	08 95       	ret
 3f0:	80 ed       	ldi	r24, 0xD0	; 208
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <hcsr04+0x30>
			if (count == 238) // max waarde van 160 bereikt  
				return(count); // return maximum distance.
			if ((PIND & (1<<4)) != (1<<4)) // Echo pulse on PORTD, Pin 4 is high (detected)
				return(count); // Return current count
			_delay_us(39); // delay 40 usec
			count ++; // Increment Count
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	f0 cf       	rjmp	.-32     	; 0x3da <hcsr04+0x18>

000003fa <berekening_verzend>:
		}
}		

void berekening_verzend()
{
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
	uart_init();
 402:	0e 94 bb 01 	call	0x376	; 0x376 <uart_init>
	tijdelijk = hcsr04();
 406:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <hcsr04>
 40a:	80 93 28 01 	sts	0x0128, r24
	tijdelijk_float = (float)(tijdelijk) * 39; //een float maken en omrekenen naar uS
 40e:	68 2f       	mov	r22, r24
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 bb 02 	call	0x576	; 0x576 <__floatunsisf>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	4c e1       	ldi	r20, 0x1C	; 28
 420:	52 e4       	ldi	r21, 0x42	; 66
 422:	0e 94 49 03 	call	0x692	; 0x692 <__mulsf3>
	tijdelijk_float = tijdelijk_float/58; //afstand in cm bereken
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	48 e6       	ldi	r20, 0x68	; 104
 42c:	52 e4       	ldi	r21, 0x42	; 66
 42e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divsf3>
 432:	26 2f       	mov	r18, r22
 434:	37 2f       	mov	r19, r23
 436:	f8 2f       	mov	r31, r24
 438:	e9 2f       	mov	r30, r25
 43a:	46 2f       	mov	r20, r22
 43c:	57 2f       	mov	r21, r23
 43e:	68 2f       	mov	r22, r24
 440:	79 2f       	mov	r23, r25
 442:	40 93 24 01 	sts	0x0124, r20
 446:	50 93 25 01 	sts	0x0125, r21
 44a:	60 93 26 01 	sts	0x0126, r22
 44e:	70 93 27 01 	sts	0x0127, r23
	
	dtostrf(tijdelijk_float, 2, 2, tot_string);// tijdelijk_float naar string
 452:	c9 e2       	ldi	r28, 0x29	; 41
 454:	d1 e0       	ldi	r29, 0x01	; 1
 456:	82 2f       	mov	r24, r18
 458:	93 2f       	mov	r25, r19
 45a:	af 2f       	mov	r26, r31
 45c:	be 2f       	mov	r27, r30
 45e:	bc 01       	movw	r22, r24
 460:	cd 01       	movw	r24, r26
 462:	42 e0       	ldi	r20, 0x02	; 2
 464:	22 e0       	ldi	r18, 0x02	; 2
 466:	8e 01       	movw	r16, r28
 468:	0e 94 ac 03 	call	0x758	; 0x758 <dtostrf>
	
	transmit('\r'); transmit('\n');
 46c:	8d e0       	ldi	r24, 0x0D	; 13
 46e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmit>
 472:	8a e0       	ldi	r24, 0x0A	; 10
 474:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmit>
	UART_Putstring(tot_string);
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 c9 01 	call	0x392	; 0x392 <UART_Putstring>
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <main>:

int main(void)
{
	SCH_Init_T1();
 488:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SCH_Init_T1>
	SCH_Add_Task(berekening_verzend, 0 , 100);
 48c:	8d ef       	ldi	r24, 0xFD	; 253
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	44 e6       	ldi	r20, 0x64	; 100
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SCH_Add_Task>
	SCH_Start();
 49c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SCH_Start>
	while(1)
	{		
		SCH_Dispatch_Tasks();	
 4a0:	0e 94 2c 01 	call	0x258	; 0x258 <SCH_Dispatch_Tasks>
 4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <main+0x18>

000004a6 <__divsf3>:
 4a6:	0c d0       	rcall	.+24     	; 0x4c0 <__divsf3x>
 4a8:	ba c0       	rjmp	.+372    	; 0x61e <__fp_round>
 4aa:	b2 d0       	rcall	.+356    	; 0x610 <__fp_pscB>
 4ac:	40 f0       	brcs	.+16     	; 0x4be <__divsf3+0x18>
 4ae:	a9 d0       	rcall	.+338    	; 0x602 <__fp_pscA>
 4b0:	30 f0       	brcs	.+12     	; 0x4be <__divsf3+0x18>
 4b2:	21 f4       	brne	.+8      	; 0x4bc <__divsf3+0x16>
 4b4:	5f 3f       	cpi	r21, 0xFF	; 255
 4b6:	19 f0       	breq	.+6      	; 0x4be <__divsf3+0x18>
 4b8:	9b c0       	rjmp	.+310    	; 0x5f0 <__fp_inf>
 4ba:	51 11       	cpse	r21, r1
 4bc:	e4 c0       	rjmp	.+456    	; 0x686 <__fp_szero>
 4be:	9e c0       	rjmp	.+316    	; 0x5fc <__fp_nan>

000004c0 <__divsf3x>:
 4c0:	bf d0       	rcall	.+382    	; 0x640 <__fp_split3>
 4c2:	98 f3       	brcs	.-26     	; 0x4aa <__divsf3+0x4>

000004c4 <__divsf3_pse>:
 4c4:	99 23       	and	r25, r25
 4c6:	c9 f3       	breq	.-14     	; 0x4ba <__divsf3+0x14>
 4c8:	55 23       	and	r21, r21
 4ca:	b1 f3       	breq	.-20     	; 0x4b8 <__divsf3+0x12>
 4cc:	95 1b       	sub	r25, r21
 4ce:	55 0b       	sbc	r21, r21
 4d0:	bb 27       	eor	r27, r27
 4d2:	aa 27       	eor	r26, r26
 4d4:	62 17       	cp	r22, r18
 4d6:	73 07       	cpc	r23, r19
 4d8:	84 07       	cpc	r24, r20
 4da:	38 f0       	brcs	.+14     	; 0x4ea <__divsf3_pse+0x26>
 4dc:	9f 5f       	subi	r25, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	44 1f       	adc	r20, r20
 4e6:	aa 1f       	adc	r26, r26
 4e8:	a9 f3       	breq	.-22     	; 0x4d4 <__divsf3_pse+0x10>
 4ea:	33 d0       	rcall	.+102    	; 0x552 <__divsf3_pse+0x8e>
 4ec:	0e 2e       	mov	r0, r30
 4ee:	3a f0       	brmi	.+14     	; 0x4fe <__divsf3_pse+0x3a>
 4f0:	e0 e8       	ldi	r30, 0x80	; 128
 4f2:	30 d0       	rcall	.+96     	; 0x554 <__divsf3_pse+0x90>
 4f4:	91 50       	subi	r25, 0x01	; 1
 4f6:	50 40       	sbci	r21, 0x00	; 0
 4f8:	e6 95       	lsr	r30
 4fa:	00 1c       	adc	r0, r0
 4fc:	ca f7       	brpl	.-14     	; 0x4f0 <__divsf3_pse+0x2c>
 4fe:	29 d0       	rcall	.+82     	; 0x552 <__divsf3_pse+0x8e>
 500:	fe 2f       	mov	r31, r30
 502:	27 d0       	rcall	.+78     	; 0x552 <__divsf3_pse+0x8e>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	bb 1f       	adc	r27, r27
 50c:	26 17       	cp	r18, r22
 50e:	37 07       	cpc	r19, r23
 510:	48 07       	cpc	r20, r24
 512:	ab 07       	cpc	r26, r27
 514:	b0 e8       	ldi	r27, 0x80	; 128
 516:	09 f0       	breq	.+2      	; 0x51a <__divsf3_pse+0x56>
 518:	bb 0b       	sbc	r27, r27
 51a:	80 2d       	mov	r24, r0
 51c:	bf 01       	movw	r22, r30
 51e:	ff 27       	eor	r31, r31
 520:	93 58       	subi	r25, 0x83	; 131
 522:	5f 4f       	sbci	r21, 0xFF	; 255
 524:	2a f0       	brmi	.+10     	; 0x530 <__divsf3_pse+0x6c>
 526:	9e 3f       	cpi	r25, 0xFE	; 254
 528:	51 05       	cpc	r21, r1
 52a:	68 f0       	brcs	.+26     	; 0x546 <__divsf3_pse+0x82>
 52c:	61 c0       	rjmp	.+194    	; 0x5f0 <__fp_inf>
 52e:	ab c0       	rjmp	.+342    	; 0x686 <__fp_szero>
 530:	5f 3f       	cpi	r21, 0xFF	; 255
 532:	ec f3       	brlt	.-6      	; 0x52e <__divsf3_pse+0x6a>
 534:	98 3e       	cpi	r25, 0xE8	; 232
 536:	dc f3       	brlt	.-10     	; 0x52e <__divsf3_pse+0x6a>
 538:	86 95       	lsr	r24
 53a:	77 95       	ror	r23
 53c:	67 95       	ror	r22
 53e:	b7 95       	ror	r27
 540:	f7 95       	ror	r31
 542:	9f 5f       	subi	r25, 0xFF	; 255
 544:	c9 f7       	brne	.-14     	; 0x538 <__divsf3_pse+0x74>
 546:	88 0f       	add	r24, r24
 548:	91 1d       	adc	r25, r1
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret
 552:	e1 e0       	ldi	r30, 0x01	; 1
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	bb 1f       	adc	r27, r27
 55c:	62 17       	cp	r22, r18
 55e:	73 07       	cpc	r23, r19
 560:	84 07       	cpc	r24, r20
 562:	ba 07       	cpc	r27, r26
 564:	20 f0       	brcs	.+8      	; 0x56e <__divsf3_pse+0xaa>
 566:	62 1b       	sub	r22, r18
 568:	73 0b       	sbc	r23, r19
 56a:	84 0b       	sbc	r24, r20
 56c:	ba 0b       	sbc	r27, r26
 56e:	ee 1f       	adc	r30, r30
 570:	88 f7       	brcc	.-30     	; 0x554 <__divsf3_pse+0x90>
 572:	e0 95       	com	r30
 574:	08 95       	ret

00000576 <__floatunsisf>:
 576:	e8 94       	clt
 578:	09 c0       	rjmp	.+18     	; 0x58c <__floatsisf+0x12>

0000057a <__floatsisf>:
 57a:	97 fb       	bst	r25, 7
 57c:	3e f4       	brtc	.+14     	; 0x58c <__floatsisf+0x12>
 57e:	90 95       	com	r25
 580:	80 95       	com	r24
 582:	70 95       	com	r23
 584:	61 95       	neg	r22
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	99 23       	and	r25, r25
 58e:	a9 f0       	breq	.+42     	; 0x5ba <__floatsisf+0x40>
 590:	f9 2f       	mov	r31, r25
 592:	96 e9       	ldi	r25, 0x96	; 150
 594:	bb 27       	eor	r27, r27
 596:	93 95       	inc	r25
 598:	f6 95       	lsr	r31
 59a:	87 95       	ror	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f1 11       	cpse	r31, r1
 5a4:	f8 cf       	rjmp	.-16     	; 0x596 <__floatsisf+0x1c>
 5a6:	fa f4       	brpl	.+62     	; 0x5e6 <__floatsisf+0x6c>
 5a8:	bb 0f       	add	r27, r27
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__floatsisf+0x36>
 5ac:	60 ff       	sbrs	r22, 0
 5ae:	1b c0       	rjmp	.+54     	; 0x5e6 <__floatsisf+0x6c>
 5b0:	6f 5f       	subi	r22, 0xFF	; 255
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	16 c0       	rjmp	.+44     	; 0x5e6 <__floatsisf+0x6c>
 5ba:	88 23       	and	r24, r24
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <__floatsisf+0x48>
 5be:	96 e9       	ldi	r25, 0x96	; 150
 5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <__floatsisf+0x6a>
 5c2:	77 23       	and	r23, r23
 5c4:	21 f0       	breq	.+8      	; 0x5ce <__floatsisf+0x54>
 5c6:	9e e8       	ldi	r25, 0x8E	; 142
 5c8:	87 2f       	mov	r24, r23
 5ca:	76 2f       	mov	r23, r22
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <__floatsisf+0x5e>
 5ce:	66 23       	and	r22, r22
 5d0:	71 f0       	breq	.+28     	; 0x5ee <__floatsisf+0x74>
 5d2:	96 e8       	ldi	r25, 0x86	; 134
 5d4:	86 2f       	mov	r24, r22
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	2a f0       	brmi	.+10     	; 0x5e6 <__floatsisf+0x6c>
 5dc:	9a 95       	dec	r25
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	da f7       	brpl	.-10     	; 0x5dc <__floatsisf+0x62>
 5e6:	88 0f       	add	r24, r24
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret

000005f0 <__fp_inf>:
 5f0:	97 f9       	bld	r25, 7
 5f2:	9f 67       	ori	r25, 0x7F	; 127
 5f4:	80 e8       	ldi	r24, 0x80	; 128
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	08 95       	ret

000005fc <__fp_nan>:
 5fc:	9f ef       	ldi	r25, 0xFF	; 255
 5fe:	80 ec       	ldi	r24, 0xC0	; 192
 600:	08 95       	ret

00000602 <__fp_pscA>:
 602:	00 24       	eor	r0, r0
 604:	0a 94       	dec	r0
 606:	16 16       	cp	r1, r22
 608:	17 06       	cpc	r1, r23
 60a:	18 06       	cpc	r1, r24
 60c:	09 06       	cpc	r0, r25
 60e:	08 95       	ret

00000610 <__fp_pscB>:
 610:	00 24       	eor	r0, r0
 612:	0a 94       	dec	r0
 614:	12 16       	cp	r1, r18
 616:	13 06       	cpc	r1, r19
 618:	14 06       	cpc	r1, r20
 61a:	05 06       	cpc	r0, r21
 61c:	08 95       	ret

0000061e <__fp_round>:
 61e:	09 2e       	mov	r0, r25
 620:	03 94       	inc	r0
 622:	00 0c       	add	r0, r0
 624:	11 f4       	brne	.+4      	; 0x62a <__fp_round+0xc>
 626:	88 23       	and	r24, r24
 628:	52 f0       	brmi	.+20     	; 0x63e <__fp_round+0x20>
 62a:	bb 0f       	add	r27, r27
 62c:	40 f4       	brcc	.+16     	; 0x63e <__fp_round+0x20>
 62e:	bf 2b       	or	r27, r31
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_round+0x18>
 632:	60 ff       	sbrs	r22, 0
 634:	04 c0       	rjmp	.+8      	; 0x63e <__fp_round+0x20>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	08 95       	ret

00000640 <__fp_split3>:
 640:	57 fd       	sbrc	r21, 7
 642:	90 58       	subi	r25, 0x80	; 128
 644:	44 0f       	add	r20, r20
 646:	55 1f       	adc	r21, r21
 648:	59 f0       	breq	.+22     	; 0x660 <__fp_splitA+0x10>
 64a:	5f 3f       	cpi	r21, 0xFF	; 255
 64c:	71 f0       	breq	.+28     	; 0x66a <__fp_splitA+0x1a>
 64e:	47 95       	ror	r20

00000650 <__fp_splitA>:
 650:	88 0f       	add	r24, r24
 652:	97 fb       	bst	r25, 7
 654:	99 1f       	adc	r25, r25
 656:	61 f0       	breq	.+24     	; 0x670 <__fp_splitA+0x20>
 658:	9f 3f       	cpi	r25, 0xFF	; 255
 65a:	79 f0       	breq	.+30     	; 0x67a <__fp_splitA+0x2a>
 65c:	87 95       	ror	r24
 65e:	08 95       	ret
 660:	12 16       	cp	r1, r18
 662:	13 06       	cpc	r1, r19
 664:	14 06       	cpc	r1, r20
 666:	55 1f       	adc	r21, r21
 668:	f2 cf       	rjmp	.-28     	; 0x64e <__fp_split3+0xe>
 66a:	46 95       	lsr	r20
 66c:	f1 df       	rcall	.-30     	; 0x650 <__fp_splitA>
 66e:	08 c0       	rjmp	.+16     	; 0x680 <__fp_splitA+0x30>
 670:	16 16       	cp	r1, r22
 672:	17 06       	cpc	r1, r23
 674:	18 06       	cpc	r1, r24
 676:	99 1f       	adc	r25, r25
 678:	f1 cf       	rjmp	.-30     	; 0x65c <__fp_splitA+0xc>
 67a:	86 95       	lsr	r24
 67c:	71 05       	cpc	r23, r1
 67e:	61 05       	cpc	r22, r1
 680:	08 94       	sec
 682:	08 95       	ret

00000684 <__fp_zero>:
 684:	e8 94       	clt

00000686 <__fp_szero>:
 686:	bb 27       	eor	r27, r27
 688:	66 27       	eor	r22, r22
 68a:	77 27       	eor	r23, r23
 68c:	cb 01       	movw	r24, r22
 68e:	97 f9       	bld	r25, 7
 690:	08 95       	ret

00000692 <__mulsf3>:
 692:	0b d0       	rcall	.+22     	; 0x6aa <__mulsf3x>
 694:	c4 cf       	rjmp	.-120    	; 0x61e <__fp_round>
 696:	b5 df       	rcall	.-150    	; 0x602 <__fp_pscA>
 698:	28 f0       	brcs	.+10     	; 0x6a4 <__mulsf3+0x12>
 69a:	ba df       	rcall	.-140    	; 0x610 <__fp_pscB>
 69c:	18 f0       	brcs	.+6      	; 0x6a4 <__mulsf3+0x12>
 69e:	95 23       	and	r25, r21
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__mulsf3+0x12>
 6a2:	a6 cf       	rjmp	.-180    	; 0x5f0 <__fp_inf>
 6a4:	ab cf       	rjmp	.-170    	; 0x5fc <__fp_nan>
 6a6:	11 24       	eor	r1, r1
 6a8:	ee cf       	rjmp	.-36     	; 0x686 <__fp_szero>

000006aa <__mulsf3x>:
 6aa:	ca df       	rcall	.-108    	; 0x640 <__fp_split3>
 6ac:	a0 f3       	brcs	.-24     	; 0x696 <__mulsf3+0x4>

000006ae <__mulsf3_pse>:
 6ae:	95 9f       	mul	r25, r21
 6b0:	d1 f3       	breq	.-12     	; 0x6a6 <__mulsf3+0x14>
 6b2:	95 0f       	add	r25, r21
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	55 1f       	adc	r21, r21
 6b8:	62 9f       	mul	r22, r18
 6ba:	f0 01       	movw	r30, r0
 6bc:	72 9f       	mul	r23, r18
 6be:	bb 27       	eor	r27, r27
 6c0:	f0 0d       	add	r31, r0
 6c2:	b1 1d       	adc	r27, r1
 6c4:	63 9f       	mul	r22, r19
 6c6:	aa 27       	eor	r26, r26
 6c8:	f0 0d       	add	r31, r0
 6ca:	b1 1d       	adc	r27, r1
 6cc:	aa 1f       	adc	r26, r26
 6ce:	64 9f       	mul	r22, r20
 6d0:	66 27       	eor	r22, r22
 6d2:	b0 0d       	add	r27, r0
 6d4:	a1 1d       	adc	r26, r1
 6d6:	66 1f       	adc	r22, r22
 6d8:	82 9f       	mul	r24, r18
 6da:	22 27       	eor	r18, r18
 6dc:	b0 0d       	add	r27, r0
 6de:	a1 1d       	adc	r26, r1
 6e0:	62 1f       	adc	r22, r18
 6e2:	73 9f       	mul	r23, r19
 6e4:	b0 0d       	add	r27, r0
 6e6:	a1 1d       	adc	r26, r1
 6e8:	62 1f       	adc	r22, r18
 6ea:	83 9f       	mul	r24, r19
 6ec:	a0 0d       	add	r26, r0
 6ee:	61 1d       	adc	r22, r1
 6f0:	22 1f       	adc	r18, r18
 6f2:	74 9f       	mul	r23, r20
 6f4:	33 27       	eor	r19, r19
 6f6:	a0 0d       	add	r26, r0
 6f8:	61 1d       	adc	r22, r1
 6fa:	23 1f       	adc	r18, r19
 6fc:	84 9f       	mul	r24, r20
 6fe:	60 0d       	add	r22, r0
 700:	21 1d       	adc	r18, r1
 702:	82 2f       	mov	r24, r18
 704:	76 2f       	mov	r23, r22
 706:	6a 2f       	mov	r22, r26
 708:	11 24       	eor	r1, r1
 70a:	9f 57       	subi	r25, 0x7F	; 127
 70c:	50 40       	sbci	r21, 0x00	; 0
 70e:	8a f0       	brmi	.+34     	; 0x732 <__mulsf3_pse+0x84>
 710:	e1 f0       	breq	.+56     	; 0x74a <__mulsf3_pse+0x9c>
 712:	88 23       	and	r24, r24
 714:	4a f0       	brmi	.+18     	; 0x728 <__mulsf3_pse+0x7a>
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	bb 1f       	adc	r27, r27
 71c:	66 1f       	adc	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	91 50       	subi	r25, 0x01	; 1
 724:	50 40       	sbci	r21, 0x00	; 0
 726:	a9 f7       	brne	.-22     	; 0x712 <__mulsf3_pse+0x64>
 728:	9e 3f       	cpi	r25, 0xFE	; 254
 72a:	51 05       	cpc	r21, r1
 72c:	70 f0       	brcs	.+28     	; 0x74a <__mulsf3_pse+0x9c>
 72e:	60 cf       	rjmp	.-320    	; 0x5f0 <__fp_inf>
 730:	aa cf       	rjmp	.-172    	; 0x686 <__fp_szero>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	ec f3       	brlt	.-6      	; 0x730 <__mulsf3_pse+0x82>
 736:	98 3e       	cpi	r25, 0xE8	; 232
 738:	dc f3       	brlt	.-10     	; 0x730 <__mulsf3_pse+0x82>
 73a:	86 95       	lsr	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	b7 95       	ror	r27
 742:	f7 95       	ror	r31
 744:	e7 95       	ror	r30
 746:	9f 5f       	subi	r25, 0xFF	; 255
 748:	c1 f7       	brne	.-16     	; 0x73a <__mulsf3_pse+0x8c>
 74a:	fe 2b       	or	r31, r30
 74c:	88 0f       	add	r24, r24
 74e:	91 1d       	adc	r25, r1
 750:	96 95       	lsr	r25
 752:	87 95       	ror	r24
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret

00000758 <dtostrf>:
 758:	ef 92       	push	r14
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	32 2f       	mov	r19, r18
 762:	c0 2f       	mov	r28, r16
 764:	47 ff       	sbrs	r20, 7
 766:	02 c0       	rjmp	.+4      	; 0x76c <dtostrf+0x14>
 768:	a4 e1       	ldi	r26, 0x14	; 20
 76a:	01 c0       	rjmp	.+2      	; 0x76e <dtostrf+0x16>
 76c:	a4 e0       	ldi	r26, 0x04	; 4
 76e:	e4 2f       	mov	r30, r20
 770:	ff 27       	eor	r31, r31
 772:	e7 fd       	sbrc	r30, 7
 774:	f0 95       	com	r31
 776:	f7 ff       	sbrs	r31, 7
 778:	03 c0       	rjmp	.+6      	; 0x780 <dtostrf+0x28>
 77a:	f0 95       	com	r31
 77c:	e1 95       	neg	r30
 77e:	ff 4f       	sbci	r31, 0xFF	; 255
 780:	4c 2f       	mov	r20, r28
 782:	51 2f       	mov	r21, r17
 784:	2e 2f       	mov	r18, r30
 786:	03 2f       	mov	r16, r19
 788:	ea 2e       	mov	r14, r26
 78a:	0e 94 ce 03 	call	0x79c	; 0x79c <dtoa_prf>
 78e:	8c 2f       	mov	r24, r28
 790:	91 2f       	mov	r25, r17
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	ef 90       	pop	r14
 79a:	08 95       	ret

0000079c <dtoa_prf>:
 79c:	a9 e0       	ldi	r26, 0x09	; 9
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e4 ed       	ldi	r30, 0xD4	; 212
 7a2:	f3 e0       	ldi	r31, 0x03	; 3
 7a4:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__prologue_saves__+0x8>
 7a8:	6a 01       	movw	r12, r20
 7aa:	12 2f       	mov	r17, r18
 7ac:	f0 2e       	mov	r15, r16
 7ae:	2b e3       	ldi	r18, 0x3B	; 59
 7b0:	20 17       	cp	r18, r16
 7b2:	18 f0       	brcs	.+6      	; 0x7ba <dtoa_prf+0x1e>
 7b4:	b0 2e       	mov	r11, r16
 7b6:	b3 94       	inc	r11
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <dtoa_prf+0x22>
 7ba:	3c e3       	ldi	r19, 0x3C	; 60
 7bc:	b3 2e       	mov	r11, r19
 7be:	ae 01       	movw	r20, r28
 7c0:	4f 5f       	subi	r20, 0xFF	; 255
 7c2:	5f 4f       	sbci	r21, 0xFF	; 255
 7c4:	27 e0       	ldi	r18, 0x07	; 7
 7c6:	0b 2d       	mov	r16, r11
 7c8:	0e 94 26 05 	call	0xa4c	; 0xa4c <__ftoa_engine>
 7cc:	bc 01       	movw	r22, r24
 7ce:	a9 81       	ldd	r26, Y+1	; 0x01
 7d0:	b0 e0       	ldi	r27, 0x00	; 0
 7d2:	cd 01       	movw	r24, r26
 7d4:	89 70       	andi	r24, 0x09	; 9
 7d6:	90 70       	andi	r25, 0x00	; 0
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	91 05       	cpc	r25, r1
 7dc:	31 f0       	breq	.+12     	; 0x7ea <dtoa_prf+0x4e>
 7de:	e1 fc       	sbrc	r14, 1
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <dtoa_prf+0x52>
 7e2:	e0 fe       	sbrs	r14, 0
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <dtoa_prf+0x56>
 7e6:	40 e2       	ldi	r20, 0x20	; 32
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <dtoa_prf+0x58>
 7ea:	4d e2       	ldi	r20, 0x2D	; 45
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <dtoa_prf+0x58>
 7ee:	4b e2       	ldi	r20, 0x2B	; 43
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <dtoa_prf+0x58>
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	a3 ff       	sbrs	r26, 3
 7f6:	36 c0       	rjmp	.+108    	; 0x864 <dtoa_prf+0xc8>
 7f8:	44 23       	and	r20, r20
 7fa:	11 f0       	breq	.+4      	; 0x800 <dtoa_prf+0x64>
 7fc:	84 e0       	ldi	r24, 0x04	; 4
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <dtoa_prf+0x66>
 800:	83 e0       	ldi	r24, 0x03	; 3
 802:	81 17       	cp	r24, r17
 804:	10 f4       	brcc	.+4      	; 0x80a <dtoa_prf+0x6e>
 806:	18 1b       	sub	r17, r24
 808:	01 c0       	rjmp	.+2      	; 0x80c <dtoa_prf+0x70>
 80a:	10 e0       	ldi	r17, 0x00	; 0
 80c:	e4 fc       	sbrc	r14, 4
 80e:	0b c0       	rjmp	.+22     	; 0x826 <dtoa_prf+0x8a>
 810:	91 2f       	mov	r25, r17
 812:	f6 01       	movw	r30, r12
 814:	80 e2       	ldi	r24, 0x20	; 32
 816:	02 c0       	rjmp	.+4      	; 0x81c <dtoa_prf+0x80>
 818:	81 93       	st	Z+, r24
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	99 23       	and	r25, r25
 81e:	e1 f7       	brne	.-8      	; 0x818 <dtoa_prf+0x7c>
 820:	c1 0e       	add	r12, r17
 822:	d1 1c       	adc	r13, r1
 824:	10 e0       	ldi	r17, 0x00	; 0
 826:	44 23       	and	r20, r20
 828:	19 f0       	breq	.+6      	; 0x830 <dtoa_prf+0x94>
 82a:	f6 01       	movw	r30, r12
 82c:	41 93       	st	Z+, r20
 82e:	6f 01       	movw	r12, r30
 830:	e2 fe       	sbrs	r14, 2
 832:	05 c0       	rjmp	.+10     	; 0x83e <dtoa_prf+0xa2>
 834:	8e e4       	ldi	r24, 0x4E	; 78
 836:	f6 01       	movw	r30, r12
 838:	80 83       	st	Z, r24
 83a:	91 e4       	ldi	r25, 0x41	; 65
 83c:	04 c0       	rjmp	.+8      	; 0x846 <dtoa_prf+0xaa>
 83e:	8e e6       	ldi	r24, 0x6E	; 110
 840:	f6 01       	movw	r30, r12
 842:	80 83       	st	Z, r24
 844:	91 e6       	ldi	r25, 0x61	; 97
 846:	91 83       	std	Z+1, r25	; 0x01
 848:	82 83       	std	Z+2, r24	; 0x02
 84a:	83 e0       	ldi	r24, 0x03	; 3
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	c8 0e       	add	r12, r24
 850:	d9 1e       	adc	r13, r25
 852:	81 2f       	mov	r24, r17
 854:	f6 01       	movw	r30, r12
 856:	90 e2       	ldi	r25, 0x20	; 32
 858:	02 c0       	rjmp	.+4      	; 0x85e <dtoa_prf+0xc2>
 85a:	91 93       	st	Z+, r25
 85c:	81 50       	subi	r24, 0x01	; 1
 85e:	88 23       	and	r24, r24
 860:	e1 f7       	brne	.-8      	; 0x85a <dtoa_prf+0xbe>
 862:	3a c0       	rjmp	.+116    	; 0x8d8 <dtoa_prf+0x13c>
 864:	a2 ff       	sbrs	r26, 2
 866:	3f c0       	rjmp	.+126    	; 0x8e6 <dtoa_prf+0x14a>
 868:	44 23       	and	r20, r20
 86a:	11 f0       	breq	.+4      	; 0x870 <dtoa_prf+0xd4>
 86c:	84 e0       	ldi	r24, 0x04	; 4
 86e:	01 c0       	rjmp	.+2      	; 0x872 <dtoa_prf+0xd6>
 870:	83 e0       	ldi	r24, 0x03	; 3
 872:	81 17       	cp	r24, r17
 874:	10 f4       	brcc	.+4      	; 0x87a <dtoa_prf+0xde>
 876:	18 1b       	sub	r17, r24
 878:	01 c0       	rjmp	.+2      	; 0x87c <dtoa_prf+0xe0>
 87a:	10 e0       	ldi	r17, 0x00	; 0
 87c:	e4 fc       	sbrc	r14, 4
 87e:	0b c0       	rjmp	.+22     	; 0x896 <dtoa_prf+0xfa>
 880:	91 2f       	mov	r25, r17
 882:	f6 01       	movw	r30, r12
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	02 c0       	rjmp	.+4      	; 0x88c <dtoa_prf+0xf0>
 888:	81 93       	st	Z+, r24
 88a:	91 50       	subi	r25, 0x01	; 1
 88c:	99 23       	and	r25, r25
 88e:	e1 f7       	brne	.-8      	; 0x888 <dtoa_prf+0xec>
 890:	c1 0e       	add	r12, r17
 892:	d1 1c       	adc	r13, r1
 894:	10 e0       	ldi	r17, 0x00	; 0
 896:	44 23       	and	r20, r20
 898:	19 f0       	breq	.+6      	; 0x8a0 <dtoa_prf+0x104>
 89a:	f6 01       	movw	r30, r12
 89c:	41 93       	st	Z+, r20
 89e:	6f 01       	movw	r12, r30
 8a0:	e2 fe       	sbrs	r14, 2
 8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <dtoa_prf+0x116>
 8a4:	89 e4       	ldi	r24, 0x49	; 73
 8a6:	f6 01       	movw	r30, r12
 8a8:	80 83       	st	Z, r24
 8aa:	8e e4       	ldi	r24, 0x4E	; 78
 8ac:	81 83       	std	Z+1, r24	; 0x01
 8ae:	86 e4       	ldi	r24, 0x46	; 70
 8b0:	06 c0       	rjmp	.+12     	; 0x8be <dtoa_prf+0x122>
 8b2:	89 e6       	ldi	r24, 0x69	; 105
 8b4:	f6 01       	movw	r30, r12
 8b6:	80 83       	st	Z, r24
 8b8:	8e e6       	ldi	r24, 0x6E	; 110
 8ba:	81 83       	std	Z+1, r24	; 0x01
 8bc:	86 e6       	ldi	r24, 0x66	; 102
 8be:	82 83       	std	Z+2, r24	; 0x02
 8c0:	83 e0       	ldi	r24, 0x03	; 3
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	c8 0e       	add	r12, r24
 8c6:	d9 1e       	adc	r13, r25
 8c8:	81 2f       	mov	r24, r17
 8ca:	f6 01       	movw	r30, r12
 8cc:	90 e2       	ldi	r25, 0x20	; 32
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <dtoa_prf+0x138>
 8d0:	91 93       	st	Z+, r25
 8d2:	81 50       	subi	r24, 0x01	; 1
 8d4:	88 23       	and	r24, r24
 8d6:	e1 f7       	brne	.-8      	; 0x8d0 <dtoa_prf+0x134>
 8d8:	c1 0e       	add	r12, r17
 8da:	d1 1c       	adc	r13, r1
 8dc:	f6 01       	movw	r30, r12
 8de:	10 82       	st	Z, r1
 8e0:	8e ef       	ldi	r24, 0xFE	; 254
 8e2:	9f ef       	ldi	r25, 0xFF	; 255
 8e4:	af c0       	rjmp	.+350    	; 0xa44 <__stack+0x145>
 8e6:	21 e0       	ldi	r18, 0x01	; 1
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	44 23       	and	r20, r20
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <dtoa_prf+0x156>
 8ee:	20 e0       	ldi	r18, 0x00	; 0
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	16 16       	cp	r1, r22
 8f4:	17 06       	cpc	r1, r23
 8f6:	1c f4       	brge	.+6      	; 0x8fe <dtoa_prf+0x162>
 8f8:	cb 01       	movw	r24, r22
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	28 0f       	add	r18, r24
 904:	39 1f       	adc	r19, r25
 906:	ff 20       	and	r15, r15
 908:	21 f0       	breq	.+8      	; 0x912 <__stack+0x13>
 90a:	8f 2d       	mov	r24, r15
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0x17>
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	82 0f       	add	r24, r18
 918:	93 1f       	adc	r25, r19
 91a:	21 2f       	mov	r18, r17
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	82 17       	cp	r24, r18
 920:	93 07       	cpc	r25, r19
 922:	1c f4       	brge	.+6      	; 0x92a <__stack+0x2b>
 924:	51 2f       	mov	r21, r17
 926:	58 1b       	sub	r21, r24
 928:	01 c0       	rjmp	.+2      	; 0x92c <__stack+0x2d>
 92a:	50 e0       	ldi	r21, 0x00	; 0
 92c:	8e 2d       	mov	r24, r14
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	9c 01       	movw	r18, r24
 932:	20 71       	andi	r18, 0x10	; 16
 934:	30 70       	andi	r19, 0x00	; 0
 936:	e4 fc       	sbrc	r14, 4
 938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0x55>
 93a:	e3 fc       	sbrc	r14, 3
 93c:	0b c0       	rjmp	.+22     	; 0x954 <__stack+0x55>
 93e:	85 2f       	mov	r24, r21
 940:	f6 01       	movw	r30, r12
 942:	90 e2       	ldi	r25, 0x20	; 32
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
 946:	91 93       	st	Z+, r25
 948:	81 50       	subi	r24, 0x01	; 1
 94a:	88 23       	and	r24, r24
 94c:	e1 f7       	brne	.-8      	; 0x946 <__stack+0x47>
 94e:	c5 0e       	add	r12, r21
 950:	d1 1c       	adc	r13, r1
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	44 23       	and	r20, r20
 956:	19 f0       	breq	.+6      	; 0x95e <__stack+0x5f>
 958:	f6 01       	movw	r30, r12
 95a:	41 93       	st	Z+, r20
 95c:	6f 01       	movw	r12, r30
 95e:	21 15       	cp	r18, r1
 960:	31 05       	cpc	r19, r1
 962:	59 f4       	brne	.+22     	; 0x97a <__stack+0x7b>
 964:	85 2f       	mov	r24, r21
 966:	f6 01       	movw	r30, r12
 968:	90 e3       	ldi	r25, 0x30	; 48
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
 96c:	91 93       	st	Z+, r25
 96e:	81 50       	subi	r24, 0x01	; 1
 970:	88 23       	and	r24, r24
 972:	e1 f7       	brne	.-8      	; 0x96c <__stack+0x6d>
 974:	c5 0e       	add	r12, r21
 976:	d1 1c       	adc	r13, r1
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	b6 0e       	add	r11, r22
 97c:	4a 81       	ldd	r20, Y+2	; 0x02
 97e:	20 e1       	ldi	r18, 0x10	; 16
 980:	62 2e       	mov	r6, r18
 982:	71 2c       	mov	r7, r1
 984:	6a 22       	and	r6, r26
 986:	7b 22       	and	r7, r27
 988:	a4 ff       	sbrs	r26, 4
 98a:	03 c0       	rjmp	.+6      	; 0x992 <__stack+0x93>
 98c:	41 33       	cpi	r20, 0x31	; 49
 98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x93>
 990:	ba 94       	dec	r11
 992:	1b 14       	cp	r1, r11
 994:	2c f4       	brge	.+10     	; 0x9a0 <__stack+0xa1>
 996:	8b 2d       	mov	r24, r11
 998:	89 30       	cpi	r24, 0x09	; 9
 99a:	18 f0       	brcs	.+6      	; 0x9a2 <__stack+0xa3>
 99c:	88 e0       	ldi	r24, 0x08	; 8
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <__stack+0xa3>
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	9b 01       	movw	r18, r22
 9a4:	77 ff       	sbrs	r23, 7
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>
 9a8:	20 e0       	ldi	r18, 0x00	; 0
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	a0 e0       	ldi	r26, 0x00	; 0
 9ae:	b0 e0       	ldi	r27, 0x00	; 0
 9b0:	9e e2       	ldi	r25, 0x2E	; 46
 9b2:	e9 2e       	mov	r14, r25
 9b4:	4b 01       	movw	r8, r22
 9b6:	88 1a       	sub	r8, r24
 9b8:	91 08       	sbc	r9, r1
 9ba:	cb 01       	movw	r24, r22
 9bc:	82 1b       	sub	r24, r18
 9be:	93 0b       	sbc	r25, r19
 9c0:	8e 01       	movw	r16, r28
 9c2:	0f 5f       	subi	r16, 0xFF	; 255
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	08 0f       	add	r16, r24
 9c8:	19 1f       	adc	r17, r25
 9ca:	8f 2d       	mov	r24, r15
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	aa 24       	eor	r10, r10
 9d0:	bb 24       	eor	r11, r11
 9d2:	a8 1a       	sub	r10, r24
 9d4:	b9 0a       	sbc	r11, r25
 9d6:	ff ef       	ldi	r31, 0xFF	; 255
 9d8:	2f 3f       	cpi	r18, 0xFF	; 255
 9da:	3f 07       	cpc	r19, r31
 9dc:	19 f4       	brne	.+6      	; 0x9e4 <__stack+0xe5>
 9de:	f6 01       	movw	r30, r12
 9e0:	e1 92       	st	Z+, r14
 9e2:	6f 01       	movw	r12, r30
 9e4:	62 17       	cp	r22, r18
 9e6:	73 07       	cpc	r23, r19
 9e8:	44 f0       	brlt	.+16     	; 0x9fa <__stack+0xfb>
 9ea:	82 16       	cp	r8, r18
 9ec:	93 06       	cpc	r9, r19
 9ee:	2c f4       	brge	.+10     	; 0x9fa <__stack+0xfb>
 9f0:	f8 01       	movw	r30, r16
 9f2:	ea 0f       	add	r30, r26
 9f4:	fb 1f       	adc	r31, r27
 9f6:	81 81       	ldd	r24, Z+1	; 0x01
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__stack+0xfd>
 9fa:	80 e3       	ldi	r24, 0x30	; 48
 9fc:	21 50       	subi	r18, 0x01	; 1
 9fe:	30 40       	sbci	r19, 0x00	; 0
 a00:	11 96       	adiw	r26, 0x01	; 1
 a02:	2a 15       	cp	r18, r10
 a04:	3b 05       	cpc	r19, r11
 a06:	24 f0       	brlt	.+8      	; 0xa10 <__stack+0x111>
 a08:	f6 01       	movw	r30, r12
 a0a:	81 93       	st	Z+, r24
 a0c:	6f 01       	movw	r12, r30
 a0e:	e3 cf       	rjmp	.-58     	; 0x9d6 <__stack+0xd7>
 a10:	26 17       	cp	r18, r22
 a12:	37 07       	cpc	r19, r23
 a14:	41 f4       	brne	.+16     	; 0xa26 <__stack+0x127>
 a16:	46 33       	cpi	r20, 0x36	; 54
 a18:	28 f4       	brcc	.+10     	; 0xa24 <__stack+0x125>
 a1a:	45 33       	cpi	r20, 0x35	; 53
 a1c:	21 f4       	brne	.+8      	; 0xa26 <__stack+0x127>
 a1e:	61 14       	cp	r6, r1
 a20:	71 04       	cpc	r7, r1
 a22:	09 f4       	brne	.+2      	; 0xa26 <__stack+0x127>
 a24:	81 e3       	ldi	r24, 0x31	; 49
 a26:	f6 01       	movw	r30, r12
 a28:	81 93       	st	Z+, r24
 a2a:	85 2f       	mov	r24, r21
 a2c:	df 01       	movw	r26, r30
 a2e:	90 e2       	ldi	r25, 0x20	; 32
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <__stack+0x137>
 a32:	9d 93       	st	X+, r25
 a34:	81 50       	subi	r24, 0x01	; 1
 a36:	88 23       	and	r24, r24
 a38:	e1 f7       	brne	.-8      	; 0xa32 <__stack+0x133>
 a3a:	e5 0f       	add	r30, r21
 a3c:	f1 1d       	adc	r31, r1
 a3e:	10 82       	st	Z, r1
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	29 96       	adiw	r28, 0x09	; 9
 a46:	ee e0       	ldi	r30, 0x0E	; 14
 a48:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__epilogue_restores__+0x8>

00000a4c <__ftoa_engine>:
 a4c:	28 30       	cpi	r18, 0x08	; 8
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__ftoa_engine+0x6>
 a50:	27 e0       	ldi	r18, 0x07	; 7
 a52:	33 27       	eor	r19, r19
 a54:	da 01       	movw	r26, r20
 a56:	99 0f       	add	r25, r25
 a58:	31 1d       	adc	r19, r1
 a5a:	87 fd       	sbrc	r24, 7
 a5c:	91 60       	ori	r25, 0x01	; 1
 a5e:	00 96       	adiw	r24, 0x00	; 0
 a60:	61 05       	cpc	r22, r1
 a62:	71 05       	cpc	r23, r1
 a64:	39 f4       	brne	.+14     	; 0xa74 <__ftoa_engine+0x28>
 a66:	32 60       	ori	r19, 0x02	; 2
 a68:	2e 5f       	subi	r18, 0xFE	; 254
 a6a:	3d 93       	st	X+, r19
 a6c:	30 e3       	ldi	r19, 0x30	; 48
 a6e:	2a 95       	dec	r18
 a70:	e1 f7       	brne	.-8      	; 0xa6a <__ftoa_engine+0x1e>
 a72:	08 95       	ret
 a74:	9f 3f       	cpi	r25, 0xFF	; 255
 a76:	30 f0       	brcs	.+12     	; 0xa84 <__ftoa_engine+0x38>
 a78:	80 38       	cpi	r24, 0x80	; 128
 a7a:	71 05       	cpc	r23, r1
 a7c:	61 05       	cpc	r22, r1
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__ftoa_engine+0x36>
 a80:	3c 5f       	subi	r19, 0xFC	; 252
 a82:	3c 5f       	subi	r19, 0xFC	; 252
 a84:	3d 93       	st	X+, r19
 a86:	91 30       	cpi	r25, 0x01	; 1
 a88:	08 f0       	brcs	.+2      	; 0xa8c <__ftoa_engine+0x40>
 a8a:	80 68       	ori	r24, 0x80	; 128
 a8c:	91 1d       	adc	r25, r1
 a8e:	df 93       	push	r29
 a90:	cf 93       	push	r28
 a92:	1f 93       	push	r17
 a94:	0f 93       	push	r16
 a96:	ff 92       	push	r15
 a98:	ef 92       	push	r14
 a9a:	19 2f       	mov	r17, r25
 a9c:	98 7f       	andi	r25, 0xF8	; 248
 a9e:	96 95       	lsr	r25
 aa0:	e9 2f       	mov	r30, r25
 aa2:	96 95       	lsr	r25
 aa4:	96 95       	lsr	r25
 aa6:	e9 0f       	add	r30, r25
 aa8:	ff 27       	eor	r31, r31
 aaa:	ee 53       	subi	r30, 0x3E	; 62
 aac:	ff 4f       	sbci	r31, 0xFF	; 255
 aae:	99 27       	eor	r25, r25
 ab0:	33 27       	eor	r19, r19
 ab2:	ee 24       	eor	r14, r14
 ab4:	ff 24       	eor	r15, r15
 ab6:	a7 01       	movw	r20, r14
 ab8:	e7 01       	movw	r28, r14
 aba:	05 90       	lpm	r0, Z+
 abc:	08 94       	sec
 abe:	07 94       	ror	r0
 ac0:	28 f4       	brcc	.+10     	; 0xacc <__ftoa_engine+0x80>
 ac2:	36 0f       	add	r19, r22
 ac4:	e7 1e       	adc	r14, r23
 ac6:	f8 1e       	adc	r15, r24
 ac8:	49 1f       	adc	r20, r25
 aca:	51 1d       	adc	r21, r1
 acc:	66 0f       	add	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	99 1f       	adc	r25, r25
 ad4:	06 94       	lsr	r0
 ad6:	a1 f7       	brne	.-24     	; 0xac0 <__ftoa_engine+0x74>
 ad8:	05 90       	lpm	r0, Z+
 ada:	07 94       	ror	r0
 adc:	28 f4       	brcc	.+10     	; 0xae8 <__ftoa_engine+0x9c>
 ade:	e7 0e       	add	r14, r23
 ae0:	f8 1e       	adc	r15, r24
 ae2:	49 1f       	adc	r20, r25
 ae4:	56 1f       	adc	r21, r22
 ae6:	c1 1d       	adc	r28, r1
 ae8:	77 0f       	add	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	66 1f       	adc	r22, r22
 af0:	06 94       	lsr	r0
 af2:	a1 f7       	brne	.-24     	; 0xadc <__ftoa_engine+0x90>
 af4:	05 90       	lpm	r0, Z+
 af6:	07 94       	ror	r0
 af8:	28 f4       	brcc	.+10     	; 0xb04 <__ftoa_engine+0xb8>
 afa:	f8 0e       	add	r15, r24
 afc:	49 1f       	adc	r20, r25
 afe:	56 1f       	adc	r21, r22
 b00:	c7 1f       	adc	r28, r23
 b02:	d1 1d       	adc	r29, r1
 b04:	88 0f       	add	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	66 1f       	adc	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	06 94       	lsr	r0
 b0e:	a1 f7       	brne	.-24     	; 0xaf8 <__ftoa_engine+0xac>
 b10:	05 90       	lpm	r0, Z+
 b12:	07 94       	ror	r0
 b14:	20 f4       	brcc	.+8      	; 0xb1e <__ftoa_engine+0xd2>
 b16:	49 0f       	add	r20, r25
 b18:	56 1f       	adc	r21, r22
 b1a:	c7 1f       	adc	r28, r23
 b1c:	d8 1f       	adc	r29, r24
 b1e:	99 0f       	add	r25, r25
 b20:	66 1f       	adc	r22, r22
 b22:	77 1f       	adc	r23, r23
 b24:	88 1f       	adc	r24, r24
 b26:	06 94       	lsr	r0
 b28:	a9 f7       	brne	.-22     	; 0xb14 <__ftoa_engine+0xc8>
 b2a:	84 91       	lpm	r24, Z
 b2c:	10 95       	com	r17
 b2e:	17 70       	andi	r17, 0x07	; 7
 b30:	41 f0       	breq	.+16     	; 0xb42 <__ftoa_engine+0xf6>
 b32:	d6 95       	lsr	r29
 b34:	c7 95       	ror	r28
 b36:	57 95       	ror	r21
 b38:	47 95       	ror	r20
 b3a:	f7 94       	ror	r15
 b3c:	e7 94       	ror	r14
 b3e:	1a 95       	dec	r17
 b40:	c1 f7       	brne	.-16     	; 0xb32 <__ftoa_engine+0xe6>
 b42:	e8 e6       	ldi	r30, 0x68	; 104
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	68 94       	set
 b48:	15 90       	lpm	r1, Z+
 b4a:	15 91       	lpm	r17, Z+
 b4c:	35 91       	lpm	r19, Z+
 b4e:	65 91       	lpm	r22, Z+
 b50:	95 91       	lpm	r25, Z+
 b52:	05 90       	lpm	r0, Z+
 b54:	7f e2       	ldi	r23, 0x2F	; 47
 b56:	73 95       	inc	r23
 b58:	e1 18       	sub	r14, r1
 b5a:	f1 0a       	sbc	r15, r17
 b5c:	43 0b       	sbc	r20, r19
 b5e:	56 0b       	sbc	r21, r22
 b60:	c9 0b       	sbc	r28, r25
 b62:	d0 09       	sbc	r29, r0
 b64:	c0 f7       	brcc	.-16     	; 0xb56 <__ftoa_engine+0x10a>
 b66:	e1 0c       	add	r14, r1
 b68:	f1 1e       	adc	r15, r17
 b6a:	43 1f       	adc	r20, r19
 b6c:	56 1f       	adc	r21, r22
 b6e:	c9 1f       	adc	r28, r25
 b70:	d0 1d       	adc	r29, r0
 b72:	7e f4       	brtc	.+30     	; 0xb92 <__ftoa_engine+0x146>
 b74:	70 33       	cpi	r23, 0x30	; 48
 b76:	11 f4       	brne	.+4      	; 0xb7c <__ftoa_engine+0x130>
 b78:	8a 95       	dec	r24
 b7a:	e6 cf       	rjmp	.-52     	; 0xb48 <__ftoa_engine+0xfc>
 b7c:	e8 94       	clt
 b7e:	01 50       	subi	r16, 0x01	; 1
 b80:	30 f0       	brcs	.+12     	; 0xb8e <__ftoa_engine+0x142>
 b82:	08 0f       	add	r16, r24
 b84:	0a f4       	brpl	.+2      	; 0xb88 <__ftoa_engine+0x13c>
 b86:	00 27       	eor	r16, r16
 b88:	02 17       	cp	r16, r18
 b8a:	08 f4       	brcc	.+2      	; 0xb8e <__ftoa_engine+0x142>
 b8c:	20 2f       	mov	r18, r16
 b8e:	23 95       	inc	r18
 b90:	02 2f       	mov	r16, r18
 b92:	7a 33       	cpi	r23, 0x3A	; 58
 b94:	28 f0       	brcs	.+10     	; 0xba0 <__ftoa_engine+0x154>
 b96:	79 e3       	ldi	r23, 0x39	; 57
 b98:	7d 93       	st	X+, r23
 b9a:	2a 95       	dec	r18
 b9c:	e9 f7       	brne	.-6      	; 0xb98 <__ftoa_engine+0x14c>
 b9e:	10 c0       	rjmp	.+32     	; 0xbc0 <__ftoa_engine+0x174>
 ba0:	7d 93       	st	X+, r23
 ba2:	2a 95       	dec	r18
 ba4:	89 f6       	brne	.-94     	; 0xb48 <__ftoa_engine+0xfc>
 ba6:	06 94       	lsr	r0
 ba8:	97 95       	ror	r25
 baa:	67 95       	ror	r22
 bac:	37 95       	ror	r19
 bae:	17 95       	ror	r17
 bb0:	17 94       	ror	r1
 bb2:	e1 18       	sub	r14, r1
 bb4:	f1 0a       	sbc	r15, r17
 bb6:	43 0b       	sbc	r20, r19
 bb8:	56 0b       	sbc	r21, r22
 bba:	c9 0b       	sbc	r28, r25
 bbc:	d0 09       	sbc	r29, r0
 bbe:	98 f0       	brcs	.+38     	; 0xbe6 <__ftoa_engine+0x19a>
 bc0:	23 95       	inc	r18
 bc2:	7e 91       	ld	r23, -X
 bc4:	73 95       	inc	r23
 bc6:	7a 33       	cpi	r23, 0x3A	; 58
 bc8:	08 f0       	brcs	.+2      	; 0xbcc <__ftoa_engine+0x180>
 bca:	70 e3       	ldi	r23, 0x30	; 48
 bcc:	7c 93       	st	X, r23
 bce:	20 13       	cpse	r18, r16
 bd0:	b8 f7       	brcc	.-18     	; 0xbc0 <__ftoa_engine+0x174>
 bd2:	7e 91       	ld	r23, -X
 bd4:	70 61       	ori	r23, 0x10	; 16
 bd6:	7d 93       	st	X+, r23
 bd8:	30 f0       	brcs	.+12     	; 0xbe6 <__ftoa_engine+0x19a>
 bda:	83 95       	inc	r24
 bdc:	71 e3       	ldi	r23, 0x31	; 49
 bde:	7d 93       	st	X+, r23
 be0:	70 e3       	ldi	r23, 0x30	; 48
 be2:	2a 95       	dec	r18
 be4:	e1 f7       	brne	.-8      	; 0xbde <__ftoa_engine+0x192>
 be6:	11 24       	eor	r1, r1
 be8:	ef 90       	pop	r14
 bea:	ff 90       	pop	r15
 bec:	0f 91       	pop	r16
 bee:	1f 91       	pop	r17
 bf0:	cf 91       	pop	r28
 bf2:	df 91       	pop	r29
 bf4:	99 27       	eor	r25, r25
 bf6:	87 fd       	sbrc	r24, 7
 bf8:	90 95       	com	r25
 bfa:	08 95       	ret

00000bfc <__prologue_saves__>:
 bfc:	2f 92       	push	r2
 bfe:	3f 92       	push	r3
 c00:	4f 92       	push	r4
 c02:	5f 92       	push	r5
 c04:	6f 92       	push	r6
 c06:	7f 92       	push	r7
 c08:	8f 92       	push	r8
 c0a:	9f 92       	push	r9
 c0c:	af 92       	push	r10
 c0e:	bf 92       	push	r11
 c10:	cf 92       	push	r12
 c12:	df 92       	push	r13
 c14:	ef 92       	push	r14
 c16:	ff 92       	push	r15
 c18:	0f 93       	push	r16
 c1a:	1f 93       	push	r17
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	cd b7       	in	r28, 0x3d	; 61
 c22:	de b7       	in	r29, 0x3e	; 62
 c24:	ca 1b       	sub	r28, r26
 c26:	db 0b       	sbc	r29, r27
 c28:	0f b6       	in	r0, 0x3f	; 63
 c2a:	f8 94       	cli
 c2c:	de bf       	out	0x3e, r29	; 62
 c2e:	0f be       	out	0x3f, r0	; 63
 c30:	cd bf       	out	0x3d, r28	; 61
 c32:	09 94       	ijmp

00000c34 <__epilogue_restores__>:
 c34:	2a 88       	ldd	r2, Y+18	; 0x12
 c36:	39 88       	ldd	r3, Y+17	; 0x11
 c38:	48 88       	ldd	r4, Y+16	; 0x10
 c3a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c3c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c3e:	7d 84       	ldd	r7, Y+13	; 0x0d
 c40:	8c 84       	ldd	r8, Y+12	; 0x0c
 c42:	9b 84       	ldd	r9, Y+11	; 0x0b
 c44:	aa 84       	ldd	r10, Y+10	; 0x0a
 c46:	b9 84       	ldd	r11, Y+9	; 0x09
 c48:	c8 84       	ldd	r12, Y+8	; 0x08
 c4a:	df 80       	ldd	r13, Y+7	; 0x07
 c4c:	ee 80       	ldd	r14, Y+6	; 0x06
 c4e:	fd 80       	ldd	r15, Y+5	; 0x05
 c50:	0c 81       	ldd	r16, Y+4	; 0x04
 c52:	1b 81       	ldd	r17, Y+3	; 0x03
 c54:	aa 81       	ldd	r26, Y+2	; 0x02
 c56:	b9 81       	ldd	r27, Y+1	; 0x01
 c58:	ce 0f       	add	r28, r30
 c5a:	d1 1d       	adc	r29, r1
 c5c:	0f b6       	in	r0, 0x3f	; 63
 c5e:	f8 94       	cli
 c60:	de bf       	out	0x3e, r29	; 62
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	cd bf       	out	0x3d, r28	; 61
 c66:	ed 01       	movw	r28, r26
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
