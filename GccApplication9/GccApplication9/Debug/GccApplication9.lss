
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001168  000011fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800100  00800100  000011fc  2**0
                  ALLOC
  3 .stab         00002e80  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000831  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000048b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e96  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046f  00000000  00000000  00005846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000861  00000000  00000000  00005cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00006518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  00006824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b65  00000000  00000000  00006c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_11>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	lds	r16, 0x00
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__fixsfsi+0x4>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <simulatie_motor+0x1e>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
      f4:	ba a5       	lds	r27, 0x6a
      f6:	6f a5       	lds	r22, 0x6f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <hcsr04+0x24>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <SCH_Add_Task+0x1e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e8 e6       	ldi	r30, 0x68	; 104
     176:	f1 e1       	ldi	r31, 0x11	; 17
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a0 30       	cpi	r26, 0x00	; 0
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a3 35       	cpi	r26, 0x53	; 83
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <main>
     198:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <transmit>:

void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     1a0:	e0 ec       	ldi	r30, 0xC0	; 192
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	90 81       	ld	r25, Z
     1a6:	95 ff       	sbrs	r25, 5
     1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <transmit+0x4>
	// send the data
	UDR0 = data;
     1aa:	80 93 c6 00 	sts	0x00C6, r24
}
     1ae:	08 95       	ret

000001b0 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	8c 01       	movw	r16, r24
     1ba:	eb 01       	movw	r28, r22
     1bc:	da 01       	movw	r26, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     1be:	80 91 00 01 	lds	r24, 0x0100
     1c2:	90 91 01 01 	lds	r25, 0x0101
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	b1 f0       	breq	.+44     	; 0x1f6 <SCH_Add_Task+0x46>
     1ca:	e7 e0       	ldi	r30, 0x07	; 7
     1cc:	f1 e0       	ldi	r31, 0x01	; 1
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
     1d2:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     1d4:	b9 01       	movw	r22, r18
     1d6:	80 81       	ld	r24, Z
     1d8:	91 81       	ldd	r25, Z+1	; 0x01
     1da:	00 97       	sbiw	r24, 0x00	; 0
     1dc:	41 f0       	breq	.+16     	; 0x1ee <SCH_Add_Task+0x3e>
     1de:	2f 5f       	subi	r18, 0xFF	; 255
     1e0:	3f 4f       	sbci	r19, 0xFF	; 255
     1e2:	37 96       	adiw	r30, 0x07	; 7
     1e4:	26 30       	cpi	r18, 0x06	; 6
     1e6:	31 05       	cpc	r19, r1
     1e8:	a1 f7       	brne	.-24     	; 0x1d2 <SCH_Add_Task+0x22>
   {
      Index++;
     1ea:	84 2f       	mov	r24, r20
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <SCH_Add_Task+0x40>
     1ee:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
     1f0:	85 30       	cpi	r24, 0x05	; 5
     1f2:	21 f4       	brne	.+8      	; 0x1fc <SCH_Add_Task+0x4c>
     1f4:	17 c0       	rjmp	.+46     	; 0x224 <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
     1fa:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
     1fc:	cb 01       	movw	r24, r22
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	86 1b       	sub	r24, r22
     20c:	97 0b       	sbc	r25, r23
     20e:	fc 01       	movw	r30, r24
     210:	e0 50       	subi	r30, 0x00	; 0
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	11 83       	std	Z+1, r17	; 0x01
     216:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
     218:	d3 83       	std	Z+3, r29	; 0x03
     21a:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
     21c:	b5 83       	std	Z+5, r27	; 0x05
     21e:	a4 83       	std	Z+4, r26	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
     220:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
     222:	84 2f       	mov	r24, r20
}
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	08 95       	ret

0000022e <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	fc 01       	movw	r30, r24
     232:	ee 0f       	add	r30, r30
     234:	ff 1f       	adc	r31, r31
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	e8 1b       	sub	r30, r24
     240:	f9 0b       	sbc	r31, r25
     242:	e0 50       	subi	r30, 0x00	; 0
     244:	ff 4f       	sbci	r31, 0xFF	; 255
     246:	11 82       	std	Z+1, r1	; 0x01
     248:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
     24a:	13 82       	std	Z+3, r1	; 0x03
     24c:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
     24e:	15 82       	std	Z+5, r1	; 0x05
     250:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
     252:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret

00000258 <SCH_Dispatch_Tasks>:
  is due to run, SCH_Dispatch_Tasks() will run it.
  This function must be called (repeatedly) from the main loop.
-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     266:	c6 e0       	ldi	r28, 0x06	; 6
     268:	d1 e0       	ldi	r29, 0x01	; 1
     26a:	0f 2e       	mov	r0, r31
     26c:	fa ef       	ldi	r31, 0xFA	; 250
     26e:	ef 2e       	mov	r14, r31
     270:	ff ef       	ldi	r31, 0xFF	; 255
     272:	ff 2e       	mov	r15, r31
     274:	f0 2d       	mov	r31, r0
     276:	ec 0e       	add	r14, r28
     278:	fd 1e       	adc	r15, r29
     27a:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
     27c:	88 81       	ld	r24, Y
     27e:	88 23       	and	r24, r24
     280:	91 f0       	breq	.+36     	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
     282:	d7 01       	movw	r26, r14
     284:	ed 91       	ld	r30, X+
     286:	fc 91       	ld	r31, X
     288:	11 97       	sbiw	r26, 0x01	; 1
     28a:	30 97       	sbiw	r30, 0x00	; 0
     28c:	61 f0       	breq	.+24     	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
     28e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
     290:	88 81       	ld	r24, Y
     292:	81 50       	subi	r24, 0x01	; 1
     294:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
     296:	f7 01       	movw	r30, r14
     298:	84 81       	ldd	r24, Z+4	; 0x04
     29a:	95 81       	ldd	r25, Z+5	; 0x05
     29c:	00 97       	sbiw	r24, 0x00	; 0
     29e:	19 f4       	brne	.+6      	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
     2a0:	81 2f       	mov	r24, r17
     2a2:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     2a6:	1f 5f       	subi	r17, 0xFF	; 255
     2a8:	27 96       	adiw	r28, 0x07	; 7
     2aa:	87 e0       	ldi	r24, 0x07	; 7
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	e8 0e       	add	r14, r24
     2b0:	f9 1e       	adc	r15, r25
     2b2:	15 30       	cpi	r17, 0x05	; 5
     2b4:	19 f7       	brne	.-58     	; 0x27c <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	df 90       	pop	r13
     2c2:	cf 90       	pop	r12
     2c4:	08 95       	ret

000002c6 <SCH_Init_T1>:
  data structures and sets up timer interrupts at required rate.
  You must call this function before using the scheduler.  
-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
     2c6:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     2c8:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
     2ca:	8c 2f       	mov	r24, r28
     2cc:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     2d0:	cf 5f       	subi	r28, 0xFF	; 255
     2d2:	c5 30       	cpi	r28, 0x05	; 5
     2d4:	d1 f7       	brne	.-12     	; 0x2ca <SCH_Init_T1+0x4>
   }
   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
     2d6:	81 e7       	ldi	r24, 0x71	; 113
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	90 93 89 00 	sts	0x0089, r25
     2de:	80 93 88 00 	sts	0x0088, r24
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
     2e2:	8c e0       	ldi	r24, 0x0C	; 12
     2e4:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	80 93 6f 00 	sts	0x006F, r24
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
     2f2:	78 94       	sei
}
     2f4:	08 95       	ret

000002f6 <__vector_11>:
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	2f 93       	push	r18
     302:	3f 93       	push	r19
     304:	8f 93       	push	r24
     306:	9f 93       	push	r25
     308:	af 93       	push	r26
     30a:	bf 93       	push	r27
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
     314:	e0 e0       	ldi	r30, 0x00	; 0
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	df 01       	movw	r26, r30
     31a:	16 96       	adiw	r26, 0x06	; 6
  SCH_Update
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
     31c:	9f 01       	movw	r18, r30
     31e:	2d 5d       	subi	r18, 0xDD	; 221
     320:	3f 4f       	sbci	r19, 0xFF	; 255
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	91 f0       	breq	.+36     	; 0x34e <__vector_11+0x58>
      {
         if(SCH_tasks_G[Index].Delay == 0)
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	59 f4       	brne	.+22     	; 0x348 <__vector_11+0x52>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
     332:	8c 91       	ld	r24, X
     334:	8f 5f       	subi	r24, 0xFF	; 255
     336:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
     338:	84 81       	ldd	r24, Z+4	; 0x04
     33a:	95 81       	ldd	r25, Z+5	; 0x05
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	39 f0       	breq	.+14     	; 0x34e <__vector_11+0x58>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	93 83       	std	Z+3, r25	; 0x03
     344:	82 83       	std	Z+2, r24	; 0x02
     346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_11+0x58>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	93 83       	std	Z+3, r25	; 0x03
     34c:	82 83       	std	Z+2, r24	; 0x02
     34e:	37 96       	adiw	r30, 0x07	; 7
     350:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     352:	e2 17       	cp	r30, r18
     354:	f3 07       	cpc	r31, r19
     356:	29 f7       	brne	.-54     	; 0x322 <__vector_11+0x2c>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <uart_init>:
int lichtintensiteit;

void uart_init()
{
	// set the baud rate
	UBRR0H = 19200;
     376:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
     37a:	83 e3       	ldi	r24, 0x33	; 51
     37c:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
     380:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
     384:	88 e1       	ldi	r24, 0x18	; 24
     386:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	80 93 c2 00 	sts	0x00C2, r24
}
     390:	08 95       	ret

00000392 <UART_Putstring>:

void UART_Putstring(char* eenstring)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
	while(*eenstring != 0X00)
     398:	88 81       	ld	r24, Y
     39a:	88 23       	and	r24, r24
     39c:	39 f0       	breq	.+14     	; 0x3ac <UART_Putstring+0x1a>
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

void UART_Putstring(char* eenstring)
     39e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*eenstring != 0X00)
	{
		transmit(*eenstring);
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmit>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

void UART_Putstring(char* eenstring)
{
	while(*eenstring != 0X00)
     3a6:	89 91       	ld	r24, Y+
     3a8:	88 23       	and	r24, r24
     3aa:	d1 f7       	brne	.-12     	; 0x3a0 <UART_Putstring+0xe>
	{
		transmit(*eenstring);
		eenstring++;
	}
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <receive>:

char receive(void)
{
	        while(!(UCSR0A) & (1<<RXC0));                     // wait while data is being received
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
	        return UDR0;
     3b6:	80 91 c6 00 	lds	r24, 0x00C6
}
     3ba:	08 95       	ret

000003bc <hcsr04>:

uint8_t hcsr04()
{
	uint8_t count = 0;
	
	DDRD |= 1<<5; //HC-SR04 Trigger als output
     3bc:	55 9a       	sbi	0x0a, 5	; 10
	DDRD &= ~(1<<4); //HC-SR04 Echo als input
     3be:	54 98       	cbi	0x0a, 4	; 10
	
	PORTD |= (1<<5);
     3c0:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c2:	80 e5       	ldi	r24, 0x50	; 80
     3c4:	8a 95       	dec	r24
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <hcsr04+0x8>
	_delay_us(15); //		15 uS pulse naar trigger pin
	PORTD &= ~(1<<5);
     3c8:	5d 98       	cbi	0x0b, 5	; 11
	
	// deze code is overgenomen van "http://eecs.oregonstate.edu/tekbots/modules/hcsr04"
	
	while ((PIND & (1<<4)) != (1<<4)); // Loop doorlopen wanneer echo pin HIGH is
     3ca:	4c 9b       	sbis	0x09, 4	; 9
     3cc:	fe cf       	rjmp	.-4      	; 0x3ca <hcsr04+0xe>
	while (1){
		if (count == 238) // max waarde van 160 bereikt
		return(count); // return maximum distance.
		if ((PIND & (1<<4)) != (1<<4)) // Echo pulse on PORTD, Pin 4 is high (detected)
     3ce:	4c 99       	sbic	0x09, 4	; 9
     3d0:	0c c0       	rjmp	.+24     	; 0x3ea <hcsr04+0x2e>
     3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <hcsr04+0x2a>
     3d4:	4c 9b       	sbis	0x09, 4	; 9
     3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <hcsr04+0x2c>
     3d8:	90 ed       	ldi	r25, 0xD0	; 208
     3da:	9a 95       	dec	r25
     3dc:	f1 f7       	brne	.-4      	; 0x3da <hcsr04+0x1e>
		return(count); // Return current count
		_delay_us(39); // delay 40 usec
		count ++; // Increment Count
     3de:	8f 5f       	subi	r24, 0xFF	; 255
	
	// deze code is overgenomen van "http://eecs.oregonstate.edu/tekbots/modules/hcsr04"
	
	while ((PIND & (1<<4)) != (1<<4)); // Loop doorlopen wanneer echo pin HIGH is
	while (1){
		if (count == 238) // max waarde van 160 bereikt
     3e0:	8e 3e       	cpi	r24, 0xEE	; 238
     3e2:	c1 f7       	brne	.-16     	; 0x3d4 <hcsr04+0x18>
     3e4:	08 95       	ret
		return(count); // return maximum distance.
		if ((PIND & (1<<4)) != (1<<4)) // Echo pulse on PORTD, Pin 4 is high (detected)
     3e6:	80 e0       	ldi	r24, 0x00	; 0
		return(count); // Return current count
		_delay_us(39); // delay 40 usec
		count ++; // Increment Count
	}
}
     3e8:	08 95       	ret
     3ea:	80 ed       	ldi	r24, 0xD0	; 208
     3ec:	8a 95       	dec	r24
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <hcsr04+0x30>
		if (count == 238) // max waarde van 160 bereikt
		return(count); // return maximum distance.
		if ((PIND & (1<<4)) != (1<<4)) // Echo pulse on PORTD, Pin 4 is high (detected)
		return(count); // Return current count
		_delay_us(39); // delay 40 usec
		count ++; // Increment Count
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <hcsr04+0x18>

000003f4 <berekening_verzend>:
	}
}

void berekening_verzend()
{
	uart_init();
     3f4:	0e 94 bb 01 	call	0x376	; 0x376 <uart_init>
	tijdelijk = hcsr04();
     3f8:	0e 94 de 01 	call	0x3bc	; 0x3bc <hcsr04>
     3fc:	80 93 48 01 	sts	0x0148, r24
	tijdelijk_float = (float)(tijdelijk) * 39; //een float maken en omrekenen naar uS
     400:	68 2f       	mov	r22, r24
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatunsisf>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	4c e1       	ldi	r20, 0x1C	; 28
     412:	52 e4       	ldi	r21, 0x42	; 66
     414:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
	tijdelijk_float = tijdelijk_float/58; //afstand in cm bereken
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	48 e6       	ldi	r20, 0x68	; 104
     41e:	52 e4       	ldi	r21, 0x42	; 66
     420:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	80 93 36 01 	sts	0x0136, r24
     42c:	90 93 37 01 	sts	0x0137, r25
     430:	a0 93 38 01 	sts	0x0138, r26
     434:	b0 93 39 01 	sts	0x0139, r27
}
     438:	08 95       	ret

0000043a <initADC>:

void initADC(){
	
	ADMUX |=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
     43a:	ec e7       	ldi	r30, 0x7C	; 124
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	80 6e       	ori	r24, 0xE0	; 224
     442:	80 83       	st	Z, r24

	// enable ADC
	// set prescaler to 128
	ADCSRA |=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
     444:	ea e7       	ldi	r30, 0x7A	; 122
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	87 68       	ori	r24, 0x87	; 135
     44c:	80 83       	st	Z, r24
}
     44e:	08 95       	ret

00000450 <ADC_switch>:

uint16_t ADC_switch(uint8_t pin)
{
	ADMUX &= 0xf0;
     450:	ec e7       	ldi	r30, 0x7C	; 124
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	90 81       	ld	r25, Z
     456:	90 7f       	andi	r25, 0xF0	; 240
     458:	90 83       	st	Z, r25
	ADMUX |=pin;
     45a:	90 81       	ld	r25, Z
     45c:	89 2b       	or	r24, r25
     45e:	80 83       	st	Z, r24
	
	ADCSRA |= _BV(ADSC);
     460:	ea e7       	ldi	r30, 0x7A	; 122
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	80 64       	ori	r24, 0x40	; 64
     468:	80 83       	st	Z, r24
	while((ADCSRA & _BV(ADSC)));
     46a:	80 81       	ld	r24, Z
     46c:	86 fd       	sbrc	r24, 6
     46e:	fd cf       	rjmp	.-6      	; 0x46a <ADC_switch+0x1a>
	return ADCH;
     470:	80 91 79 00 	lds	r24, 0x0079
}
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	08 95       	ret

00000478 <lichtsensor>:
	dtostrf(avg_temp, 2, 2, ADCOut);// float naar string
		UART_Putstring(ADCOut);
		_delay_ms(1800);
}

void lichtsensor(){
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
	uint16_t voltage2;
	voltage2 = ADC_switch(0);
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 28 02 	call	0x450	; 0x450 <ADC_switch>
	
	licht1 = voltage2 * 4.98 / 1023; //berekening om lichtintesiteit te berekenen
     486:	bc 01       	movw	r22, r24
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatunsisf>
     490:	29 e2       	ldi	r18, 0x29	; 41
     492:	3c e5       	ldi	r19, 0x5C	; 92
     494:	4f e9       	ldi	r20, 0x9F	; 159
     496:	50 e4       	ldi	r21, 0x40	; 64
     498:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 ec       	ldi	r19, 0xC0	; 192
     4a0:	4f e7       	ldi	r20, 0x7F	; 127
     4a2:	54 e4       	ldi	r21, 0x44	; 68
     4a4:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
     4a8:	26 2f       	mov	r18, r22
     4aa:	37 2f       	mov	r19, r23
     4ac:	f8 2f       	mov	r31, r24
     4ae:	e9 2f       	mov	r30, r25
     4b0:	46 2f       	mov	r20, r22
     4b2:	57 2f       	mov	r21, r23
     4b4:	68 2f       	mov	r22, r24
     4b6:	79 2f       	mov	r23, r25
     4b8:	40 93 3a 01 	sts	0x013A, r20
     4bc:	50 93 3b 01 	sts	0x013B, r21
     4c0:	60 93 3c 01 	sts	0x013C, r22
     4c4:	70 93 3d 01 	sts	0x013D, r23
	
	 dtostrf(licht1, 2, 2, licht2);// licht 1 naar string (licht2)
     4c8:	c8 e2       	ldi	r28, 0x28	; 40
     4ca:	d1 e0       	ldi	r29, 0x01	; 1
     4cc:	82 2f       	mov	r24, r18
     4ce:	93 2f       	mov	r25, r19
     4d0:	af 2f       	mov	r26, r31
     4d2:	be 2f       	mov	r27, r30
     4d4:	bc 01       	movw	r22, r24
     4d6:	cd 01       	movw	r24, r26
     4d8:	42 e0       	ldi	r20, 0x02	; 2
     4da:	22 e0       	ldi	r18, 0x02	; 2
     4dc:	8e 01       	movw	r16, r28
     4de:	0e 94 29 06 	call	0xc52	; 0xc52 <dtostrf>
	 
	 UART_Putstring(licht2);
     4e2:	ce 01       	movw	r24, r28
     4e4:	0e 94 c9 01 	call	0x392	; 0x392 <UART_Putstring>
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	08 95       	ret

000004f2 <temp_gem>:
	ADCSRA |= _BV(ADSC);
	while((ADCSRA & _BV(ADSC)));
	return ADCH;
}

double temp_gem(){
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
	
	int duur;
	double total = 0;
	uint16_t voltage1;
	voltage1 = ADC_switch(1);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 28 02 	call	0x450	; 0x450 <ADC_switch>
	
	for(duur = 0; duur < 40; duur++){
		ADCRes = (voltage1*(1100.0/256)-500)/10; //Bereken temperatuur in Celsius van de ADC output
     510:	bc 01       	movw	r22, r24
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatunsisf>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e8       	ldi	r19, 0x80	; 128
     51e:	49 e8       	ldi	r20, 0x89	; 137
     520:	50 e4       	ldi	r21, 0x40	; 64
     522:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__mulsf3>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a ef       	ldi	r20, 0xFA	; 250
     52c:	53 e4       	ldi	r21, 0x43	; 67
     52e:	0e 94 0e 04 	call	0x81c	; 0x81c <__subsf3>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e2       	ldi	r20, 0x20	; 32
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
     53e:	b6 2e       	mov	r11, r22
     540:	a7 2e       	mov	r10, r23
     542:	98 2e       	mov	r9, r24
     544:	89 2e       	mov	r8, r25
     546:	f6 2e       	mov	r15, r22
     548:	e7 2e       	mov	r14, r23
     54a:	d8 2e       	mov	r13, r24
     54c:	c9 2e       	mov	r12, r25
     54e:	c8 e2       	ldi	r28, 0x28	; 40
     550:	d0 e0       	ldi	r29, 0x00	; 0
}

double temp_gem(){
	
	int duur;
	double total = 0;
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t voltage1;
	voltage1 = ADC_switch(1);
	
	for(duur = 0; duur < 40; duur++){
		ADCRes = (voltage1*(1100.0/256)-500)/10; //Bereken temperatuur in Celsius van de ADC output
		total += ADCRes; //Geef temperatuur aan total
     55a:	58 2f       	mov	r21, r24
     55c:	49 2f       	mov	r20, r25
     55e:	83 2f       	mov	r24, r19
     560:	92 2f       	mov	r25, r18
     562:	a5 2f       	mov	r26, r21
     564:	b4 2f       	mov	r27, r20
     566:	bc 01       	movw	r22, r24
     568:	cd 01       	movw	r24, r26
     56a:	0f 2d       	mov	r16, r15
     56c:	1e 2d       	mov	r17, r14
     56e:	2d 2d       	mov	r18, r13
     570:	3c 2d       	mov	r19, r12
     572:	a9 01       	movw	r20, r18
     574:	98 01       	movw	r18, r16
     576:	0e 94 0f 04 	call	0x81e	; 0x81e <__addsf3>
     57a:	36 2f       	mov	r19, r22
     57c:	27 2f       	mov	r18, r23
     57e:	21 97       	sbiw	r28, 0x01	; 1
	int duur;
	double total = 0;
	uint16_t voltage1;
	voltage1 = ADC_switch(1);
	
	for(duur = 0; duur < 40; duur++){
     580:	61 f7       	brne	.-40     	; 0x55a <temp_gem+0x68>
     582:	4b 2d       	mov	r20, r11
     584:	5a 2d       	mov	r21, r10
     586:	69 2d       	mov	r22, r9
     588:	78 2d       	mov	r23, r8
     58a:	40 93 4f 01 	sts	0x014F, r20
     58e:	50 93 50 01 	sts	0x0150, r21
     592:	60 93 51 01 	sts	0x0151, r22
     596:	70 93 52 01 	sts	0x0152, r23
		ADCRes = (voltage1*(1100.0/256)-500)/10; //Bereken temperatuur in Celsius van de ADC output
		total += ADCRes; //Geef temperatuur aan total
	}	
	double avg = total / 40; //bereken gemiddelde
     59a:	58 2f       	mov	r21, r24
     59c:	49 2f       	mov	r20, r25
     59e:	83 2f       	mov	r24, r19
     5a0:	92 2f       	mov	r25, r18
     5a2:	a5 2f       	mov	r26, r21
     5a4:	b4 2f       	mov	r27, r20
     5a6:	bc 01       	movw	r22, r24
     5a8:	cd 01       	movw	r24, r26
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e2       	ldi	r20, 0x20	; 32
     5b0:	52 e4       	ldi	r21, 0x42	; 66
     5b2:	0e 94 77 04 	call	0x8ee	; 0x8ee <__divsf3>
	
	return avg;
}
     5b6:	46 2f       	mov	r20, r22
     5b8:	57 2f       	mov	r21, r23
     5ba:	68 2f       	mov	r22, r24
     5bc:	79 2f       	mov	r23, r25
     5be:	cb 01       	movw	r24, r22
     5c0:	ba 01       	movw	r22, r20
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	08 95       	ret

000005dc <temp_show>:

void temp_show(){
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
	double avg_temp = temp_gem();//gemiddelde temperatuur aan avg_temp geven
     5e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <temp_gem>
	
	dtostrf(avg_temp, 2, 2, ADCOut);// float naar string
     5e8:	ce e3       	ldi	r28, 0x3E	; 62
     5ea:	d1 e0       	ldi	r29, 0x01	; 1
     5ec:	42 e0       	ldi	r20, 0x02	; 2
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	8e 01       	movw	r16, r28
     5f2:	0e 94 29 06 	call	0xc52	; 0xc52 <dtostrf>
		UART_Putstring(ADCOut);
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 c9 01 	call	0x392	; 0x392 <UART_Putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	93 ee       	ldi	r25, 0xE3	; 227
     600:	a7 e5       	ldi	r26, 0x57	; 87
     602:	81 50       	subi	r24, 0x01	; 1
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	a0 40       	sbci	r26, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <temp_show+0x26>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <temp_show+0x30>
     60c:	00 00       	nop
		_delay_ms(1800);
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	08 95       	ret

00000618 <led_groen>:
	 UART_Putstring(licht2);
}

void led_groen()
{
	DDRB = 0xff;
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	85 b9       	out	0x05, r24	; 5
}
     620:	08 95       	ret

00000622 <uitrollen>:

void uitrollen()
{
	DDRB = 0xff;
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000110;
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	85 b9       	out	0x05, r24	; 5
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	99 e6       	ldi	r25, 0x69	; 105
     62e:	a8 e1       	ldi	r26, 0x18	; 24
     630:	81 50       	subi	r24, 0x01	; 1
     632:	90 40       	sbci	r25, 0x00	; 0
     634:	a0 40       	sbci	r26, 0x00	; 0
     636:	e1 f7       	brne	.-8      	; 0x630 <uitrollen+0xe>
     638:	00 c0       	rjmp	.+0      	; 0x63a <uitrollen+0x18>
     63a:	00 00       	nop
	_delay_ms(500);
	PORTB = 0b00000100;
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	85 b9       	out	0x05, r24	; 5
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	99 e6       	ldi	r25, 0x69	; 105
     644:	a8 e1       	ldi	r26, 0x18	; 24
     646:	81 50       	subi	r24, 0x01	; 1
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	a0 40       	sbci	r26, 0x00	; 0
     64c:	e1 f7       	brne	.-8      	; 0x646 <uitrollen+0x24>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <uitrollen+0x2e>
     650:	00 00       	nop
	_delay_ms(500);
}
     652:	08 95       	ret

00000654 <inrollen>:

void inrollen()
{
	DDRB = 0xff;
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000011;
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	85 b9       	out	0x05, r24	; 5
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	93 ed       	ldi	r25, 0xD3	; 211
     660:	a0 e3       	ldi	r26, 0x30	; 48
     662:	81 50       	subi	r24, 0x01	; 1
     664:	90 40       	sbci	r25, 0x00	; 0
     666:	a0 40       	sbci	r26, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <inrollen+0xe>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <inrollen+0x18>
     66c:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0b00000001;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	85 b9       	out	0x05, r24	; 5
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	93 ed       	ldi	r25, 0xD3	; 211
     676:	a0 e3       	ldi	r26, 0x30	; 48
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	a0 40       	sbci	r26, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <inrollen+0x24>
     680:	00 c0       	rjmp	.+0      	; 0x682 <inrollen+0x2e>
     682:	00 00       	nop
	_delay_ms(1000);
}
     684:	08 95       	ret

00000686 <led_rood>:

void led_rood()
{
	DDRB = 0xff;
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000100;
     68a:	84 e0       	ldi	r24, 0x04	; 4
     68c:	85 b9       	out	0x05, r24	; 5
}
     68e:	08 95       	ret

00000690 <simulatie_motor>:

void simulatie_motor()
{
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
	avg_temp = temp_gem();
     69c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <temp_gem>
     6a0:	6b 01       	movw	r12, r22
     6a2:	7c 01       	movw	r14, r24
     6a4:	60 93 32 01 	sts	0x0132, r22
     6a8:	70 93 33 01 	sts	0x0133, r23
     6ac:	80 93 34 01 	sts	0x0134, r24
     6b0:	90 93 35 01 	sts	0x0135, r25
	overgang_temp = 18;
     6b4:	82 e1       	ldi	r24, 0x12	; 18
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	90 93 26 01 	sts	0x0126, r25
     6bc:	80 93 25 01 	sts	0x0125, r24
	lichtintensiteit = licht1;
     6c0:	60 91 3a 01 	lds	r22, 0x013A
     6c4:	70 91 3b 01 	lds	r23, 0x013B
     6c8:	80 91 3c 01 	lds	r24, 0x013C
     6cc:	90 91 3d 01 	lds	r25, 0x013D
     6d0:	0e 94 df 04 	call	0x9be	; 0x9be <__fixsfsi>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	ec 01       	movw	r28, r24
     6da:	90 93 24 01 	sts	0x0124, r25
     6de:	80 93 23 01 	sts	0x0123, r24
	
	if(avg_temp > overgang_temp && lichtintensiteit < 0.90)
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e9       	ldi	r20, 0x90	; 144
     6ec:	51 e4       	ldi	r21, 0x41	; 65
     6ee:	0e 94 c2 05 	call	0xb84	; 0xb84 <__gesf2>
     6f2:	18 16       	cp	r1, r24
     6f4:	24 f5       	brge	.+72     	; 0x73e <simulatie_motor+0xae>
     6f6:	be 01       	movw	r22, r28
     6f8:	88 27       	eor	r24, r24
     6fa:	77 fd       	sbrc	r23, 7
     6fc:	80 95       	com	r24
     6fe:	98 2f       	mov	r25, r24
     700:	0e 94 12 05 	call	0xa24	; 0xa24 <__floatsisf>
     704:	26 e6       	ldi	r18, 0x66	; 102
     706:	36 e6       	ldi	r19, 0x66	; 102
     708:	46 e6       	ldi	r20, 0x66	; 102
     70a:	5f e3       	ldi	r21, 0x3F	; 63
     70c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__cmpsf2>
     710:	88 23       	and	r24, r24
     712:	ac f4       	brge	.+42     	; 0x73e <simulatie_motor+0xae>
	{
		if (tijdelijk_float < 50)
     714:	60 91 36 01 	lds	r22, 0x0136
     718:	70 91 37 01 	lds	r23, 0x0137
     71c:	80 91 38 01 	lds	r24, 0x0138
     720:	90 91 39 01 	lds	r25, 0x0139
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	48 e4       	ldi	r20, 0x48	; 72
     72a:	52 e4       	ldi	r21, 0x42	; 66
     72c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	1c f4       	brge	.+6      	; 0x73a <simulatie_motor+0xaa>
		{
			uitrollen();
     734:	0e 94 11 03 	call	0x622	; 0x622 <uitrollen>
     738:	02 c0       	rjmp	.+4      	; 0x73e <simulatie_motor+0xae>
		}
		else
		{
			led_rood();
     73a:	0e 94 43 03 	call	0x686	; 0x686 <led_rood>
		}			
	}
	if(avg_temp < overgang_temp || lichtintensiteit > 0.90)
     73e:	60 91 25 01 	lds	r22, 0x0125
     742:	70 91 26 01 	lds	r23, 0x0126
     746:	88 27       	eor	r24, r24
     748:	77 fd       	sbrc	r23, 7
     74a:	80 95       	com	r24
     74c:	98 2f       	mov	r25, r24
     74e:	0e 94 12 05 	call	0xa24	; 0xa24 <__floatsisf>
     752:	20 91 32 01 	lds	r18, 0x0132
     756:	30 91 33 01 	lds	r19, 0x0133
     75a:	40 91 34 01 	lds	r20, 0x0134
     75e:	50 91 35 01 	lds	r21, 0x0135
     762:	0e 94 c2 05 	call	0xb84	; 0xb84 <__gesf2>
     766:	18 16       	cp	r1, r24
     768:	94 f0       	brlt	.+36     	; 0x78e <simulatie_motor+0xfe>
     76a:	60 91 23 01 	lds	r22, 0x0123
     76e:	70 91 24 01 	lds	r23, 0x0124
     772:	88 27       	eor	r24, r24
     774:	77 fd       	sbrc	r23, 7
     776:	80 95       	com	r24
     778:	98 2f       	mov	r25, r24
     77a:	0e 94 12 05 	call	0xa24	; 0xa24 <__floatsisf>
     77e:	26 e6       	ldi	r18, 0x66	; 102
     780:	36 e6       	ldi	r19, 0x66	; 102
     782:	46 e6       	ldi	r20, 0x66	; 102
     784:	5f e3       	ldi	r21, 0x3F	; 63
     786:	0e 94 c2 05 	call	0xb84	; 0xb84 <__gesf2>
     78a:	18 16       	cp	r1, r24
     78c:	ac f4       	brge	.+42     	; 0x7b8 <simulatie_motor+0x128>
	{
		if(tijdelijk_float > 5)
     78e:	60 91 36 01 	lds	r22, 0x0136
     792:	70 91 37 01 	lds	r23, 0x0137
     796:	80 91 38 01 	lds	r24, 0x0138
     79a:	90 91 39 01 	lds	r25, 0x0139
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 ea       	ldi	r20, 0xA0	; 160
     7a4:	50 e4       	ldi	r21, 0x40	; 64
     7a6:	0e 94 c2 05 	call	0xb84	; 0xb84 <__gesf2>
     7aa:	18 16       	cp	r1, r24
     7ac:	1c f4       	brge	.+6      	; 0x7b4 <simulatie_motor+0x124>
		{
			inrollen();
     7ae:	0e 94 2a 03 	call	0x654	; 0x654 <inrollen>
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <simulatie_motor+0x128>
		}
		else
		{
			led_groen();
     7b4:	0e 94 0c 03 	call	0x618	; 0x618 <led_groen>
		}			
	}
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <main>:

int main(void)
{
 	uart_init();
     7c6:	0e 94 bb 01 	call	0x376	; 0x376 <uart_init>
	initADC();
     7ca:	0e 94 1d 02 	call	0x43a	; 0x43a <initADC>
	
	SCH_Init_T1();
     7ce:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SCH_Init_T1>
	SCH_Add_Task(berekening_verzend, 0, 10);	//10 ticks = 0.1 seconde
     7d2:	8a ef       	ldi	r24, 0xFA	; 250
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	4a e0       	ldi	r20, 0x0A	; 10
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SCH_Add_Task>
	SCH_Add_Task(simulatie_motor, 0, 10);		//10 ticks = 0.1 seconde
     7e2:	88 e4       	ldi	r24, 0x48	; 72
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	4a e0       	ldi	r20, 0x0A	; 10
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SCH_Add_Task>
	SCH_Add_Task(temp_show, 0, 6000);			//6000 ticks = 1 minuut
     7f2:	8e ee       	ldi	r24, 0xEE	; 238
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	40 e7       	ldi	r20, 0x70	; 112
     7fc:	57 e1       	ldi	r21, 0x17	; 23
     7fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SCH_Add_Task>
	SCH_Add_Task(lichtsensor, 0, 6000);			//6000 ticks = 1 minuut
     802:	8c e3       	ldi	r24, 0x3C	; 60
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	40 e7       	ldi	r20, 0x70	; 112
     80c:	57 e1       	ldi	r21, 0x17	; 23
     80e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SCH_Add_Task>
	SCH_Start();
     812:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SCH_Start>
	while(1)
	{
		SCH_Dispatch_Tasks();
     816:	0e 94 2c 01 	call	0x258	; 0x258 <SCH_Dispatch_Tasks>
     81a:	fd cf       	rjmp	.-6      	; 0x816 <main+0x50>

0000081c <__subsf3>:
     81c:	50 58       	subi	r21, 0x80	; 128

0000081e <__addsf3>:
     81e:	bb 27       	eor	r27, r27
     820:	aa 27       	eor	r26, r26
     822:	0e d0       	rcall	.+28     	; 0x840 <__addsf3x>
     824:	75 c1       	rjmp	.+746    	; 0xb10 <__fp_round>
     826:	66 d1       	rcall	.+716    	; 0xaf4 <__fp_pscA>
     828:	30 f0       	brcs	.+12     	; 0x836 <__addsf3+0x18>
     82a:	6b d1       	rcall	.+726    	; 0xb02 <__fp_pscB>
     82c:	20 f0       	brcs	.+8      	; 0x836 <__addsf3+0x18>
     82e:	31 f4       	brne	.+12     	; 0x83c <__addsf3+0x1e>
     830:	9f 3f       	cpi	r25, 0xFF	; 255
     832:	11 f4       	brne	.+4      	; 0x838 <__addsf3+0x1a>
     834:	1e f4       	brtc	.+6      	; 0x83c <__addsf3+0x1e>
     836:	5b c1       	rjmp	.+694    	; 0xaee <__fp_nan>
     838:	0e f4       	brtc	.+2      	; 0x83c <__addsf3+0x1e>
     83a:	e0 95       	com	r30
     83c:	e7 fb       	bst	r30, 7
     83e:	51 c1       	rjmp	.+674    	; 0xae2 <__fp_inf>

00000840 <__addsf3x>:
     840:	e9 2f       	mov	r30, r25
     842:	77 d1       	rcall	.+750    	; 0xb32 <__fp_split3>
     844:	80 f3       	brcs	.-32     	; 0x826 <__addsf3+0x8>
     846:	ba 17       	cp	r27, r26
     848:	62 07       	cpc	r22, r18
     84a:	73 07       	cpc	r23, r19
     84c:	84 07       	cpc	r24, r20
     84e:	95 07       	cpc	r25, r21
     850:	18 f0       	brcs	.+6      	; 0x858 <__addsf3x+0x18>
     852:	71 f4       	brne	.+28     	; 0x870 <__addsf3x+0x30>
     854:	9e f5       	brtc	.+102    	; 0x8bc <__addsf3x+0x7c>
     856:	8f c1       	rjmp	.+798    	; 0xb76 <__fp_zero>
     858:	0e f4       	brtc	.+2      	; 0x85c <__addsf3x+0x1c>
     85a:	e0 95       	com	r30
     85c:	0b 2e       	mov	r0, r27
     85e:	ba 2f       	mov	r27, r26
     860:	a0 2d       	mov	r26, r0
     862:	0b 01       	movw	r0, r22
     864:	b9 01       	movw	r22, r18
     866:	90 01       	movw	r18, r0
     868:	0c 01       	movw	r0, r24
     86a:	ca 01       	movw	r24, r20
     86c:	a0 01       	movw	r20, r0
     86e:	11 24       	eor	r1, r1
     870:	ff 27       	eor	r31, r31
     872:	59 1b       	sub	r21, r25
     874:	99 f0       	breq	.+38     	; 0x89c <__addsf3x+0x5c>
     876:	59 3f       	cpi	r21, 0xF9	; 249
     878:	50 f4       	brcc	.+20     	; 0x88e <__addsf3x+0x4e>
     87a:	50 3e       	cpi	r21, 0xE0	; 224
     87c:	68 f1       	brcs	.+90     	; 0x8d8 <__addsf3x+0x98>
     87e:	1a 16       	cp	r1, r26
     880:	f0 40       	sbci	r31, 0x00	; 0
     882:	a2 2f       	mov	r26, r18
     884:	23 2f       	mov	r18, r19
     886:	34 2f       	mov	r19, r20
     888:	44 27       	eor	r20, r20
     88a:	58 5f       	subi	r21, 0xF8	; 248
     88c:	f3 cf       	rjmp	.-26     	; 0x874 <__addsf3x+0x34>
     88e:	46 95       	lsr	r20
     890:	37 95       	ror	r19
     892:	27 95       	ror	r18
     894:	a7 95       	ror	r26
     896:	f0 40       	sbci	r31, 0x00	; 0
     898:	53 95       	inc	r21
     89a:	c9 f7       	brne	.-14     	; 0x88e <__addsf3x+0x4e>
     89c:	7e f4       	brtc	.+30     	; 0x8bc <__addsf3x+0x7c>
     89e:	1f 16       	cp	r1, r31
     8a0:	ba 0b       	sbc	r27, r26
     8a2:	62 0b       	sbc	r22, r18
     8a4:	73 0b       	sbc	r23, r19
     8a6:	84 0b       	sbc	r24, r20
     8a8:	ba f0       	brmi	.+46     	; 0x8d8 <__addsf3x+0x98>
     8aa:	91 50       	subi	r25, 0x01	; 1
     8ac:	a1 f0       	breq	.+40     	; 0x8d6 <__addsf3x+0x96>
     8ae:	ff 0f       	add	r31, r31
     8b0:	bb 1f       	adc	r27, r27
     8b2:	66 1f       	adc	r22, r22
     8b4:	77 1f       	adc	r23, r23
     8b6:	88 1f       	adc	r24, r24
     8b8:	c2 f7       	brpl	.-16     	; 0x8aa <__addsf3x+0x6a>
     8ba:	0e c0       	rjmp	.+28     	; 0x8d8 <__addsf3x+0x98>
     8bc:	ba 0f       	add	r27, r26
     8be:	62 1f       	adc	r22, r18
     8c0:	73 1f       	adc	r23, r19
     8c2:	84 1f       	adc	r24, r20
     8c4:	48 f4       	brcc	.+18     	; 0x8d8 <__addsf3x+0x98>
     8c6:	87 95       	ror	r24
     8c8:	77 95       	ror	r23
     8ca:	67 95       	ror	r22
     8cc:	b7 95       	ror	r27
     8ce:	f7 95       	ror	r31
     8d0:	9e 3f       	cpi	r25, 0xFE	; 254
     8d2:	08 f0       	brcs	.+2      	; 0x8d6 <__addsf3x+0x96>
     8d4:	b3 cf       	rjmp	.-154    	; 0x83c <__addsf3+0x1e>
     8d6:	93 95       	inc	r25
     8d8:	88 0f       	add	r24, r24
     8da:	08 f0       	brcs	.+2      	; 0x8de <__addsf3x+0x9e>
     8dc:	99 27       	eor	r25, r25
     8de:	ee 0f       	add	r30, r30
     8e0:	97 95       	ror	r25
     8e2:	87 95       	ror	r24
     8e4:	08 95       	ret

000008e6 <__cmpsf2>:
     8e6:	d9 d0       	rcall	.+434    	; 0xa9a <__fp_cmp>
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <__cmpsf2+0x6>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	08 95       	ret

000008ee <__divsf3>:
     8ee:	0c d0       	rcall	.+24     	; 0x908 <__divsf3x>
     8f0:	0f c1       	rjmp	.+542    	; 0xb10 <__fp_round>
     8f2:	07 d1       	rcall	.+526    	; 0xb02 <__fp_pscB>
     8f4:	40 f0       	brcs	.+16     	; 0x906 <__stack+0x7>
     8f6:	fe d0       	rcall	.+508    	; 0xaf4 <__fp_pscA>
     8f8:	30 f0       	brcs	.+12     	; 0x906 <__stack+0x7>
     8fa:	21 f4       	brne	.+8      	; 0x904 <__stack+0x5>
     8fc:	5f 3f       	cpi	r21, 0xFF	; 255
     8fe:	19 f0       	breq	.+6      	; 0x906 <__stack+0x7>
     900:	f0 c0       	rjmp	.+480    	; 0xae2 <__fp_inf>
     902:	51 11       	cpse	r21, r1
     904:	39 c1       	rjmp	.+626    	; 0xb78 <__fp_szero>
     906:	f3 c0       	rjmp	.+486    	; 0xaee <__fp_nan>

00000908 <__divsf3x>:
     908:	14 d1       	rcall	.+552    	; 0xb32 <__fp_split3>
     90a:	98 f3       	brcs	.-26     	; 0x8f2 <__divsf3+0x4>

0000090c <__divsf3_pse>:
     90c:	99 23       	and	r25, r25
     90e:	c9 f3       	breq	.-14     	; 0x902 <__stack+0x3>
     910:	55 23       	and	r21, r21
     912:	b1 f3       	breq	.-20     	; 0x900 <__stack+0x1>
     914:	95 1b       	sub	r25, r21
     916:	55 0b       	sbc	r21, r21
     918:	bb 27       	eor	r27, r27
     91a:	aa 27       	eor	r26, r26
     91c:	62 17       	cp	r22, r18
     91e:	73 07       	cpc	r23, r19
     920:	84 07       	cpc	r24, r20
     922:	38 f0       	brcs	.+14     	; 0x932 <__divsf3_pse+0x26>
     924:	9f 5f       	subi	r25, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	44 1f       	adc	r20, r20
     92e:	aa 1f       	adc	r26, r26
     930:	a9 f3       	breq	.-22     	; 0x91c <__divsf3_pse+0x10>
     932:	33 d0       	rcall	.+102    	; 0x99a <__divsf3_pse+0x8e>
     934:	0e 2e       	mov	r0, r30
     936:	3a f0       	brmi	.+14     	; 0x946 <__divsf3_pse+0x3a>
     938:	e0 e8       	ldi	r30, 0x80	; 128
     93a:	30 d0       	rcall	.+96     	; 0x99c <__divsf3_pse+0x90>
     93c:	91 50       	subi	r25, 0x01	; 1
     93e:	50 40       	sbci	r21, 0x00	; 0
     940:	e6 95       	lsr	r30
     942:	00 1c       	adc	r0, r0
     944:	ca f7       	brpl	.-14     	; 0x938 <__divsf3_pse+0x2c>
     946:	29 d0       	rcall	.+82     	; 0x99a <__divsf3_pse+0x8e>
     948:	fe 2f       	mov	r31, r30
     94a:	27 d0       	rcall	.+78     	; 0x99a <__divsf3_pse+0x8e>
     94c:	66 0f       	add	r22, r22
     94e:	77 1f       	adc	r23, r23
     950:	88 1f       	adc	r24, r24
     952:	bb 1f       	adc	r27, r27
     954:	26 17       	cp	r18, r22
     956:	37 07       	cpc	r19, r23
     958:	48 07       	cpc	r20, r24
     95a:	ab 07       	cpc	r26, r27
     95c:	b0 e8       	ldi	r27, 0x80	; 128
     95e:	09 f0       	breq	.+2      	; 0x962 <__divsf3_pse+0x56>
     960:	bb 0b       	sbc	r27, r27
     962:	80 2d       	mov	r24, r0
     964:	bf 01       	movw	r22, r30
     966:	ff 27       	eor	r31, r31
     968:	93 58       	subi	r25, 0x83	; 131
     96a:	5f 4f       	sbci	r21, 0xFF	; 255
     96c:	2a f0       	brmi	.+10     	; 0x978 <__divsf3_pse+0x6c>
     96e:	9e 3f       	cpi	r25, 0xFE	; 254
     970:	51 05       	cpc	r21, r1
     972:	68 f0       	brcs	.+26     	; 0x98e <__divsf3_pse+0x82>
     974:	b6 c0       	rjmp	.+364    	; 0xae2 <__fp_inf>
     976:	00 c1       	rjmp	.+512    	; 0xb78 <__fp_szero>
     978:	5f 3f       	cpi	r21, 0xFF	; 255
     97a:	ec f3       	brlt	.-6      	; 0x976 <__divsf3_pse+0x6a>
     97c:	98 3e       	cpi	r25, 0xE8	; 232
     97e:	dc f3       	brlt	.-10     	; 0x976 <__divsf3_pse+0x6a>
     980:	86 95       	lsr	r24
     982:	77 95       	ror	r23
     984:	67 95       	ror	r22
     986:	b7 95       	ror	r27
     988:	f7 95       	ror	r31
     98a:	9f 5f       	subi	r25, 0xFF	; 255
     98c:	c9 f7       	brne	.-14     	; 0x980 <__divsf3_pse+0x74>
     98e:	88 0f       	add	r24, r24
     990:	91 1d       	adc	r25, r1
     992:	96 95       	lsr	r25
     994:	87 95       	ror	r24
     996:	97 f9       	bld	r25, 7
     998:	08 95       	ret
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	66 0f       	add	r22, r22
     99e:	77 1f       	adc	r23, r23
     9a0:	88 1f       	adc	r24, r24
     9a2:	bb 1f       	adc	r27, r27
     9a4:	62 17       	cp	r22, r18
     9a6:	73 07       	cpc	r23, r19
     9a8:	84 07       	cpc	r24, r20
     9aa:	ba 07       	cpc	r27, r26
     9ac:	20 f0       	brcs	.+8      	; 0x9b6 <__divsf3_pse+0xaa>
     9ae:	62 1b       	sub	r22, r18
     9b0:	73 0b       	sbc	r23, r19
     9b2:	84 0b       	sbc	r24, r20
     9b4:	ba 0b       	sbc	r27, r26
     9b6:	ee 1f       	adc	r30, r30
     9b8:	88 f7       	brcc	.-30     	; 0x99c <__divsf3_pse+0x90>
     9ba:	e0 95       	com	r30
     9bc:	08 95       	ret

000009be <__fixsfsi>:
     9be:	04 d0       	rcall	.+8      	; 0x9c8 <__fixunssfsi>
     9c0:	68 94       	set
     9c2:	b1 11       	cpse	r27, r1
     9c4:	d9 c0       	rjmp	.+434    	; 0xb78 <__fp_szero>
     9c6:	08 95       	ret

000009c8 <__fixunssfsi>:
     9c8:	bc d0       	rcall	.+376    	; 0xb42 <__fp_splitA>
     9ca:	88 f0       	brcs	.+34     	; 0x9ee <__fixunssfsi+0x26>
     9cc:	9f 57       	subi	r25, 0x7F	; 127
     9ce:	90 f0       	brcs	.+36     	; 0x9f4 <__fixunssfsi+0x2c>
     9d0:	b9 2f       	mov	r27, r25
     9d2:	99 27       	eor	r25, r25
     9d4:	b7 51       	subi	r27, 0x17	; 23
     9d6:	a0 f0       	brcs	.+40     	; 0xa00 <__fixunssfsi+0x38>
     9d8:	d1 f0       	breq	.+52     	; 0xa0e <__fixunssfsi+0x46>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	1a f0       	brmi	.+6      	; 0x9ea <__fixunssfsi+0x22>
     9e4:	ba 95       	dec	r27
     9e6:	c9 f7       	brne	.-14     	; 0x9da <__fixunssfsi+0x12>
     9e8:	12 c0       	rjmp	.+36     	; 0xa0e <__fixunssfsi+0x46>
     9ea:	b1 30       	cpi	r27, 0x01	; 1
     9ec:	81 f0       	breq	.+32     	; 0xa0e <__fixunssfsi+0x46>
     9ee:	c3 d0       	rcall	.+390    	; 0xb76 <__fp_zero>
     9f0:	b1 e0       	ldi	r27, 0x01	; 1
     9f2:	08 95       	ret
     9f4:	c0 c0       	rjmp	.+384    	; 0xb76 <__fp_zero>
     9f6:	67 2f       	mov	r22, r23
     9f8:	78 2f       	mov	r23, r24
     9fa:	88 27       	eor	r24, r24
     9fc:	b8 5f       	subi	r27, 0xF8	; 248
     9fe:	39 f0       	breq	.+14     	; 0xa0e <__fixunssfsi+0x46>
     a00:	b9 3f       	cpi	r27, 0xF9	; 249
     a02:	cc f3       	brlt	.-14     	; 0x9f6 <__fixunssfsi+0x2e>
     a04:	86 95       	lsr	r24
     a06:	77 95       	ror	r23
     a08:	67 95       	ror	r22
     a0a:	b3 95       	inc	r27
     a0c:	d9 f7       	brne	.-10     	; 0xa04 <__fixunssfsi+0x3c>
     a0e:	3e f4       	brtc	.+14     	; 0xa1e <__fixunssfsi+0x56>
     a10:	90 95       	com	r25
     a12:	80 95       	com	r24
     a14:	70 95       	com	r23
     a16:	61 95       	neg	r22
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	8f 4f       	sbci	r24, 0xFF	; 255
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	08 95       	ret

00000a20 <__floatunsisf>:
     a20:	e8 94       	clt
     a22:	09 c0       	rjmp	.+18     	; 0xa36 <__floatsisf+0x12>

00000a24 <__floatsisf>:
     a24:	97 fb       	bst	r25, 7
     a26:	3e f4       	brtc	.+14     	; 0xa36 <__floatsisf+0x12>
     a28:	90 95       	com	r25
     a2a:	80 95       	com	r24
     a2c:	70 95       	com	r23
     a2e:	61 95       	neg	r22
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8f 4f       	sbci	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	99 23       	and	r25, r25
     a38:	a9 f0       	breq	.+42     	; 0xa64 <__floatsisf+0x40>
     a3a:	f9 2f       	mov	r31, r25
     a3c:	96 e9       	ldi	r25, 0x96	; 150
     a3e:	bb 27       	eor	r27, r27
     a40:	93 95       	inc	r25
     a42:	f6 95       	lsr	r31
     a44:	87 95       	ror	r24
     a46:	77 95       	ror	r23
     a48:	67 95       	ror	r22
     a4a:	b7 95       	ror	r27
     a4c:	f1 11       	cpse	r31, r1
     a4e:	f8 cf       	rjmp	.-16     	; 0xa40 <__floatsisf+0x1c>
     a50:	fa f4       	brpl	.+62     	; 0xa90 <__floatsisf+0x6c>
     a52:	bb 0f       	add	r27, r27
     a54:	11 f4       	brne	.+4      	; 0xa5a <__floatsisf+0x36>
     a56:	60 ff       	sbrs	r22, 0
     a58:	1b c0       	rjmp	.+54     	; 0xa90 <__floatsisf+0x6c>
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	8f 4f       	sbci	r24, 0xFF	; 255
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	16 c0       	rjmp	.+44     	; 0xa90 <__floatsisf+0x6c>
     a64:	88 23       	and	r24, r24
     a66:	11 f0       	breq	.+4      	; 0xa6c <__floatsisf+0x48>
     a68:	96 e9       	ldi	r25, 0x96	; 150
     a6a:	11 c0       	rjmp	.+34     	; 0xa8e <__floatsisf+0x6a>
     a6c:	77 23       	and	r23, r23
     a6e:	21 f0       	breq	.+8      	; 0xa78 <__floatsisf+0x54>
     a70:	9e e8       	ldi	r25, 0x8E	; 142
     a72:	87 2f       	mov	r24, r23
     a74:	76 2f       	mov	r23, r22
     a76:	05 c0       	rjmp	.+10     	; 0xa82 <__floatsisf+0x5e>
     a78:	66 23       	and	r22, r22
     a7a:	71 f0       	breq	.+28     	; 0xa98 <__floatsisf+0x74>
     a7c:	96 e8       	ldi	r25, 0x86	; 134
     a7e:	86 2f       	mov	r24, r22
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	2a f0       	brmi	.+10     	; 0xa90 <__floatsisf+0x6c>
     a86:	9a 95       	dec	r25
     a88:	66 0f       	add	r22, r22
     a8a:	77 1f       	adc	r23, r23
     a8c:	88 1f       	adc	r24, r24
     a8e:	da f7       	brpl	.-10     	; 0xa86 <__floatsisf+0x62>
     a90:	88 0f       	add	r24, r24
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	97 f9       	bld	r25, 7
     a98:	08 95       	ret

00000a9a <__fp_cmp>:
     a9a:	99 0f       	add	r25, r25
     a9c:	00 08       	sbc	r0, r0
     a9e:	55 0f       	add	r21, r21
     aa0:	aa 0b       	sbc	r26, r26
     aa2:	e0 e8       	ldi	r30, 0x80	; 128
     aa4:	fe ef       	ldi	r31, 0xFE	; 254
     aa6:	16 16       	cp	r1, r22
     aa8:	17 06       	cpc	r1, r23
     aaa:	e8 07       	cpc	r30, r24
     aac:	f9 07       	cpc	r31, r25
     aae:	c0 f0       	brcs	.+48     	; 0xae0 <__fp_cmp+0x46>
     ab0:	12 16       	cp	r1, r18
     ab2:	13 06       	cpc	r1, r19
     ab4:	e4 07       	cpc	r30, r20
     ab6:	f5 07       	cpc	r31, r21
     ab8:	98 f0       	brcs	.+38     	; 0xae0 <__fp_cmp+0x46>
     aba:	62 1b       	sub	r22, r18
     abc:	73 0b       	sbc	r23, r19
     abe:	84 0b       	sbc	r24, r20
     ac0:	95 0b       	sbc	r25, r21
     ac2:	39 f4       	brne	.+14     	; 0xad2 <__fp_cmp+0x38>
     ac4:	0a 26       	eor	r0, r26
     ac6:	61 f0       	breq	.+24     	; 0xae0 <__fp_cmp+0x46>
     ac8:	23 2b       	or	r18, r19
     aca:	24 2b       	or	r18, r20
     acc:	25 2b       	or	r18, r21
     ace:	21 f4       	brne	.+8      	; 0xad8 <__fp_cmp+0x3e>
     ad0:	08 95       	ret
     ad2:	0a 26       	eor	r0, r26
     ad4:	09 f4       	brne	.+2      	; 0xad8 <__fp_cmp+0x3e>
     ad6:	a1 40       	sbci	r26, 0x01	; 1
     ad8:	a6 95       	lsr	r26
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	81 1d       	adc	r24, r1
     ade:	81 1d       	adc	r24, r1
     ae0:	08 95       	ret

00000ae2 <__fp_inf>:
     ae2:	97 f9       	bld	r25, 7
     ae4:	9f 67       	ori	r25, 0x7F	; 127
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	08 95       	ret

00000aee <__fp_nan>:
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	80 ec       	ldi	r24, 0xC0	; 192
     af2:	08 95       	ret

00000af4 <__fp_pscA>:
     af4:	00 24       	eor	r0, r0
     af6:	0a 94       	dec	r0
     af8:	16 16       	cp	r1, r22
     afa:	17 06       	cpc	r1, r23
     afc:	18 06       	cpc	r1, r24
     afe:	09 06       	cpc	r0, r25
     b00:	08 95       	ret

00000b02 <__fp_pscB>:
     b02:	00 24       	eor	r0, r0
     b04:	0a 94       	dec	r0
     b06:	12 16       	cp	r1, r18
     b08:	13 06       	cpc	r1, r19
     b0a:	14 06       	cpc	r1, r20
     b0c:	05 06       	cpc	r0, r21
     b0e:	08 95       	ret

00000b10 <__fp_round>:
     b10:	09 2e       	mov	r0, r25
     b12:	03 94       	inc	r0
     b14:	00 0c       	add	r0, r0
     b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0xc>
     b18:	88 23       	and	r24, r24
     b1a:	52 f0       	brmi	.+20     	; 0xb30 <__fp_round+0x20>
     b1c:	bb 0f       	add	r27, r27
     b1e:	40 f4       	brcc	.+16     	; 0xb30 <__fp_round+0x20>
     b20:	bf 2b       	or	r27, r31
     b22:	11 f4       	brne	.+4      	; 0xb28 <__fp_round+0x18>
     b24:	60 ff       	sbrs	r22, 0
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__fp_round+0x20>
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <__fp_split3>:
     b32:	57 fd       	sbrc	r21, 7
     b34:	90 58       	subi	r25, 0x80	; 128
     b36:	44 0f       	add	r20, r20
     b38:	55 1f       	adc	r21, r21
     b3a:	59 f0       	breq	.+22     	; 0xb52 <__fp_splitA+0x10>
     b3c:	5f 3f       	cpi	r21, 0xFF	; 255
     b3e:	71 f0       	breq	.+28     	; 0xb5c <__fp_splitA+0x1a>
     b40:	47 95       	ror	r20

00000b42 <__fp_splitA>:
     b42:	88 0f       	add	r24, r24
     b44:	97 fb       	bst	r25, 7
     b46:	99 1f       	adc	r25, r25
     b48:	61 f0       	breq	.+24     	; 0xb62 <__fp_splitA+0x20>
     b4a:	9f 3f       	cpi	r25, 0xFF	; 255
     b4c:	79 f0       	breq	.+30     	; 0xb6c <__fp_splitA+0x2a>
     b4e:	87 95       	ror	r24
     b50:	08 95       	ret
     b52:	12 16       	cp	r1, r18
     b54:	13 06       	cpc	r1, r19
     b56:	14 06       	cpc	r1, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	f2 cf       	rjmp	.-28     	; 0xb40 <__fp_split3+0xe>
     b5c:	46 95       	lsr	r20
     b5e:	f1 df       	rcall	.-30     	; 0xb42 <__fp_splitA>
     b60:	08 c0       	rjmp	.+16     	; 0xb72 <__fp_splitA+0x30>
     b62:	16 16       	cp	r1, r22
     b64:	17 06       	cpc	r1, r23
     b66:	18 06       	cpc	r1, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	f1 cf       	rjmp	.-30     	; 0xb4e <__fp_splitA+0xc>
     b6c:	86 95       	lsr	r24
     b6e:	71 05       	cpc	r23, r1
     b70:	61 05       	cpc	r22, r1
     b72:	08 94       	sec
     b74:	08 95       	ret

00000b76 <__fp_zero>:
     b76:	e8 94       	clt

00000b78 <__fp_szero>:
     b78:	bb 27       	eor	r27, r27
     b7a:	66 27       	eor	r22, r22
     b7c:	77 27       	eor	r23, r23
     b7e:	cb 01       	movw	r24, r22
     b80:	97 f9       	bld	r25, 7
     b82:	08 95       	ret

00000b84 <__gesf2>:
     b84:	8a df       	rcall	.-236    	; 0xa9a <__fp_cmp>
     b86:	08 f4       	brcc	.+2      	; 0xb8a <__gesf2+0x6>
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	08 95       	ret

00000b8c <__mulsf3>:
     b8c:	0b d0       	rcall	.+22     	; 0xba4 <__mulsf3x>
     b8e:	c0 cf       	rjmp	.-128    	; 0xb10 <__fp_round>
     b90:	b1 df       	rcall	.-158    	; 0xaf4 <__fp_pscA>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <__mulsf3+0x12>
     b94:	b6 df       	rcall	.-148    	; 0xb02 <__fp_pscB>
     b96:	18 f0       	brcs	.+6      	; 0xb9e <__mulsf3+0x12>
     b98:	95 23       	and	r25, r21
     b9a:	09 f0       	breq	.+2      	; 0xb9e <__mulsf3+0x12>
     b9c:	a2 cf       	rjmp	.-188    	; 0xae2 <__fp_inf>
     b9e:	a7 cf       	rjmp	.-178    	; 0xaee <__fp_nan>
     ba0:	11 24       	eor	r1, r1
     ba2:	ea cf       	rjmp	.-44     	; 0xb78 <__fp_szero>

00000ba4 <__mulsf3x>:
     ba4:	c6 df       	rcall	.-116    	; 0xb32 <__fp_split3>
     ba6:	a0 f3       	brcs	.-24     	; 0xb90 <__mulsf3+0x4>

00000ba8 <__mulsf3_pse>:
     ba8:	95 9f       	mul	r25, r21
     baa:	d1 f3       	breq	.-12     	; 0xba0 <__mulsf3+0x14>
     bac:	95 0f       	add	r25, r21
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	55 1f       	adc	r21, r21
     bb2:	62 9f       	mul	r22, r18
     bb4:	f0 01       	movw	r30, r0
     bb6:	72 9f       	mul	r23, r18
     bb8:	bb 27       	eor	r27, r27
     bba:	f0 0d       	add	r31, r0
     bbc:	b1 1d       	adc	r27, r1
     bbe:	63 9f       	mul	r22, r19
     bc0:	aa 27       	eor	r26, r26
     bc2:	f0 0d       	add	r31, r0
     bc4:	b1 1d       	adc	r27, r1
     bc6:	aa 1f       	adc	r26, r26
     bc8:	64 9f       	mul	r22, r20
     bca:	66 27       	eor	r22, r22
     bcc:	b0 0d       	add	r27, r0
     bce:	a1 1d       	adc	r26, r1
     bd0:	66 1f       	adc	r22, r22
     bd2:	82 9f       	mul	r24, r18
     bd4:	22 27       	eor	r18, r18
     bd6:	b0 0d       	add	r27, r0
     bd8:	a1 1d       	adc	r26, r1
     bda:	62 1f       	adc	r22, r18
     bdc:	73 9f       	mul	r23, r19
     bde:	b0 0d       	add	r27, r0
     be0:	a1 1d       	adc	r26, r1
     be2:	62 1f       	adc	r22, r18
     be4:	83 9f       	mul	r24, r19
     be6:	a0 0d       	add	r26, r0
     be8:	61 1d       	adc	r22, r1
     bea:	22 1f       	adc	r18, r18
     bec:	74 9f       	mul	r23, r20
     bee:	33 27       	eor	r19, r19
     bf0:	a0 0d       	add	r26, r0
     bf2:	61 1d       	adc	r22, r1
     bf4:	23 1f       	adc	r18, r19
     bf6:	84 9f       	mul	r24, r20
     bf8:	60 0d       	add	r22, r0
     bfa:	21 1d       	adc	r18, r1
     bfc:	82 2f       	mov	r24, r18
     bfe:	76 2f       	mov	r23, r22
     c00:	6a 2f       	mov	r22, r26
     c02:	11 24       	eor	r1, r1
     c04:	9f 57       	subi	r25, 0x7F	; 127
     c06:	50 40       	sbci	r21, 0x00	; 0
     c08:	8a f0       	brmi	.+34     	; 0xc2c <__mulsf3_pse+0x84>
     c0a:	e1 f0       	breq	.+56     	; 0xc44 <__mulsf3_pse+0x9c>
     c0c:	88 23       	and	r24, r24
     c0e:	4a f0       	brmi	.+18     	; 0xc22 <__mulsf3_pse+0x7a>
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	bb 1f       	adc	r27, r27
     c16:	66 1f       	adc	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	88 1f       	adc	r24, r24
     c1c:	91 50       	subi	r25, 0x01	; 1
     c1e:	50 40       	sbci	r21, 0x00	; 0
     c20:	a9 f7       	brne	.-22     	; 0xc0c <__mulsf3_pse+0x64>
     c22:	9e 3f       	cpi	r25, 0xFE	; 254
     c24:	51 05       	cpc	r21, r1
     c26:	70 f0       	brcs	.+28     	; 0xc44 <__mulsf3_pse+0x9c>
     c28:	5c cf       	rjmp	.-328    	; 0xae2 <__fp_inf>
     c2a:	a6 cf       	rjmp	.-180    	; 0xb78 <__fp_szero>
     c2c:	5f 3f       	cpi	r21, 0xFF	; 255
     c2e:	ec f3       	brlt	.-6      	; 0xc2a <__mulsf3_pse+0x82>
     c30:	98 3e       	cpi	r25, 0xE8	; 232
     c32:	dc f3       	brlt	.-10     	; 0xc2a <__mulsf3_pse+0x82>
     c34:	86 95       	lsr	r24
     c36:	77 95       	ror	r23
     c38:	67 95       	ror	r22
     c3a:	b7 95       	ror	r27
     c3c:	f7 95       	ror	r31
     c3e:	e7 95       	ror	r30
     c40:	9f 5f       	subi	r25, 0xFF	; 255
     c42:	c1 f7       	brne	.-16     	; 0xc34 <__mulsf3_pse+0x8c>
     c44:	fe 2b       	or	r31, r30
     c46:	88 0f       	add	r24, r24
     c48:	91 1d       	adc	r25, r1
     c4a:	96 95       	lsr	r25
     c4c:	87 95       	ror	r24
     c4e:	97 f9       	bld	r25, 7
     c50:	08 95       	ret

00000c52 <dtostrf>:
     c52:	ef 92       	push	r14
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	32 2f       	mov	r19, r18
     c5c:	c0 2f       	mov	r28, r16
     c5e:	47 ff       	sbrs	r20, 7
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <dtostrf+0x14>
     c62:	a4 e1       	ldi	r26, 0x14	; 20
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <dtostrf+0x16>
     c66:	a4 e0       	ldi	r26, 0x04	; 4
     c68:	e4 2f       	mov	r30, r20
     c6a:	ff 27       	eor	r31, r31
     c6c:	e7 fd       	sbrc	r30, 7
     c6e:	f0 95       	com	r31
     c70:	f7 ff       	sbrs	r31, 7
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <dtostrf+0x28>
     c74:	f0 95       	com	r31
     c76:	e1 95       	neg	r30
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	4c 2f       	mov	r20, r28
     c7c:	51 2f       	mov	r21, r17
     c7e:	2e 2f       	mov	r18, r30
     c80:	03 2f       	mov	r16, r19
     c82:	ea 2e       	mov	r14, r26
     c84:	0e 94 4b 06 	call	0xc96	; 0xc96 <dtoa_prf>
     c88:	8c 2f       	mov	r24, r28
     c8a:	91 2f       	mov	r25, r17
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ef 90       	pop	r14
     c94:	08 95       	ret

00000c96 <dtoa_prf>:
     c96:	a9 e0       	ldi	r26, 0x09	; 9
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e1 e5       	ldi	r30, 0x51	; 81
     c9c:	f6 e0       	ldi	r31, 0x06	; 6
     c9e:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x8>
     ca2:	6a 01       	movw	r12, r20
     ca4:	12 2f       	mov	r17, r18
     ca6:	f0 2e       	mov	r15, r16
     ca8:	2b e3       	ldi	r18, 0x3B	; 59
     caa:	20 17       	cp	r18, r16
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <dtoa_prf+0x1e>
     cae:	b0 2e       	mov	r11, r16
     cb0:	b3 94       	inc	r11
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <dtoa_prf+0x22>
     cb4:	3c e3       	ldi	r19, 0x3C	; 60
     cb6:	b3 2e       	mov	r11, r19
     cb8:	ae 01       	movw	r20, r28
     cba:	4f 5f       	subi	r20, 0xFF	; 255
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	27 e0       	ldi	r18, 0x07	; 7
     cc0:	0b 2d       	mov	r16, r11
     cc2:	0e 94 a3 07 	call	0xf46	; 0xf46 <__ftoa_engine>
     cc6:	bc 01       	movw	r22, r24
     cc8:	a9 81       	ldd	r26, Y+1	; 0x01
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	cd 01       	movw	r24, r26
     cce:	89 70       	andi	r24, 0x09	; 9
     cd0:	90 70       	andi	r25, 0x00	; 0
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	31 f0       	breq	.+12     	; 0xce4 <dtoa_prf+0x4e>
     cd8:	e1 fc       	sbrc	r14, 1
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <dtoa_prf+0x52>
     cdc:	e0 fe       	sbrs	r14, 0
     cde:	06 c0       	rjmp	.+12     	; 0xcec <dtoa_prf+0x56>
     ce0:	40 e2       	ldi	r20, 0x20	; 32
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <dtoa_prf+0x58>
     ce4:	4d e2       	ldi	r20, 0x2D	; 45
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <dtoa_prf+0x58>
     ce8:	4b e2       	ldi	r20, 0x2B	; 43
     cea:	01 c0       	rjmp	.+2      	; 0xcee <dtoa_prf+0x58>
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	a3 ff       	sbrs	r26, 3
     cf0:	36 c0       	rjmp	.+108    	; 0xd5e <dtoa_prf+0xc8>
     cf2:	44 23       	and	r20, r20
     cf4:	11 f0       	breq	.+4      	; 0xcfa <dtoa_prf+0x64>
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <dtoa_prf+0x66>
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	81 17       	cp	r24, r17
     cfe:	10 f4       	brcc	.+4      	; 0xd04 <dtoa_prf+0x6e>
     d00:	18 1b       	sub	r17, r24
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <dtoa_prf+0x70>
     d04:	10 e0       	ldi	r17, 0x00	; 0
     d06:	e4 fc       	sbrc	r14, 4
     d08:	0b c0       	rjmp	.+22     	; 0xd20 <dtoa_prf+0x8a>
     d0a:	91 2f       	mov	r25, r17
     d0c:	f6 01       	movw	r30, r12
     d0e:	80 e2       	ldi	r24, 0x20	; 32
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <dtoa_prf+0x80>
     d12:	81 93       	st	Z+, r24
     d14:	91 50       	subi	r25, 0x01	; 1
     d16:	99 23       	and	r25, r25
     d18:	e1 f7       	brne	.-8      	; 0xd12 <dtoa_prf+0x7c>
     d1a:	c1 0e       	add	r12, r17
     d1c:	d1 1c       	adc	r13, r1
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	44 23       	and	r20, r20
     d22:	19 f0       	breq	.+6      	; 0xd2a <dtoa_prf+0x94>
     d24:	f6 01       	movw	r30, r12
     d26:	41 93       	st	Z+, r20
     d28:	6f 01       	movw	r12, r30
     d2a:	e2 fe       	sbrs	r14, 2
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <dtoa_prf+0xa2>
     d2e:	8e e4       	ldi	r24, 0x4E	; 78
     d30:	f6 01       	movw	r30, r12
     d32:	80 83       	st	Z, r24
     d34:	91 e4       	ldi	r25, 0x41	; 65
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <dtoa_prf+0xaa>
     d38:	8e e6       	ldi	r24, 0x6E	; 110
     d3a:	f6 01       	movw	r30, r12
     d3c:	80 83       	st	Z, r24
     d3e:	91 e6       	ldi	r25, 0x61	; 97
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	82 83       	std	Z+2, r24	; 0x02
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	c8 0e       	add	r12, r24
     d4a:	d9 1e       	adc	r13, r25
     d4c:	81 2f       	mov	r24, r17
     d4e:	f6 01       	movw	r30, r12
     d50:	90 e2       	ldi	r25, 0x20	; 32
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <dtoa_prf+0xc2>
     d54:	91 93       	st	Z+, r25
     d56:	81 50       	subi	r24, 0x01	; 1
     d58:	88 23       	and	r24, r24
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <dtoa_prf+0xbe>
     d5c:	3a c0       	rjmp	.+116    	; 0xdd2 <dtoa_prf+0x13c>
     d5e:	a2 ff       	sbrs	r26, 2
     d60:	3f c0       	rjmp	.+126    	; 0xde0 <dtoa_prf+0x14a>
     d62:	44 23       	and	r20, r20
     d64:	11 f0       	breq	.+4      	; 0xd6a <dtoa_prf+0xd4>
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <dtoa_prf+0xd6>
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	81 17       	cp	r24, r17
     d6e:	10 f4       	brcc	.+4      	; 0xd74 <dtoa_prf+0xde>
     d70:	18 1b       	sub	r17, r24
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <dtoa_prf+0xe0>
     d74:	10 e0       	ldi	r17, 0x00	; 0
     d76:	e4 fc       	sbrc	r14, 4
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <dtoa_prf+0xfa>
     d7a:	91 2f       	mov	r25, r17
     d7c:	f6 01       	movw	r30, r12
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <dtoa_prf+0xf0>
     d82:	81 93       	st	Z+, r24
     d84:	91 50       	subi	r25, 0x01	; 1
     d86:	99 23       	and	r25, r25
     d88:	e1 f7       	brne	.-8      	; 0xd82 <dtoa_prf+0xec>
     d8a:	c1 0e       	add	r12, r17
     d8c:	d1 1c       	adc	r13, r1
     d8e:	10 e0       	ldi	r17, 0x00	; 0
     d90:	44 23       	and	r20, r20
     d92:	19 f0       	breq	.+6      	; 0xd9a <dtoa_prf+0x104>
     d94:	f6 01       	movw	r30, r12
     d96:	41 93       	st	Z+, r20
     d98:	6f 01       	movw	r12, r30
     d9a:	e2 fe       	sbrs	r14, 2
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <dtoa_prf+0x116>
     d9e:	89 e4       	ldi	r24, 0x49	; 73
     da0:	f6 01       	movw	r30, r12
     da2:	80 83       	st	Z, r24
     da4:	8e e4       	ldi	r24, 0x4E	; 78
     da6:	81 83       	std	Z+1, r24	; 0x01
     da8:	86 e4       	ldi	r24, 0x46	; 70
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <dtoa_prf+0x122>
     dac:	89 e6       	ldi	r24, 0x69	; 105
     dae:	f6 01       	movw	r30, r12
     db0:	80 83       	st	Z, r24
     db2:	8e e6       	ldi	r24, 0x6E	; 110
     db4:	81 83       	std	Z+1, r24	; 0x01
     db6:	86 e6       	ldi	r24, 0x66	; 102
     db8:	82 83       	std	Z+2, r24	; 0x02
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	c8 0e       	add	r12, r24
     dc0:	d9 1e       	adc	r13, r25
     dc2:	81 2f       	mov	r24, r17
     dc4:	f6 01       	movw	r30, r12
     dc6:	90 e2       	ldi	r25, 0x20	; 32
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <dtoa_prf+0x138>
     dca:	91 93       	st	Z+, r25
     dcc:	81 50       	subi	r24, 0x01	; 1
     dce:	88 23       	and	r24, r24
     dd0:	e1 f7       	brne	.-8      	; 0xdca <dtoa_prf+0x134>
     dd2:	c1 0e       	add	r12, r17
     dd4:	d1 1c       	adc	r13, r1
     dd6:	f6 01       	movw	r30, r12
     dd8:	10 82       	st	Z, r1
     dda:	8e ef       	ldi	r24, 0xFE	; 254
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	af c0       	rjmp	.+350    	; 0xf3e <dtoa_prf+0x2a8>
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	44 23       	and	r20, r20
     de6:	11 f4       	brne	.+4      	; 0xdec <dtoa_prf+0x156>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	16 16       	cp	r1, r22
     dee:	17 06       	cpc	r1, r23
     df0:	1c f4       	brge	.+6      	; 0xdf8 <dtoa_prf+0x162>
     df2:	cb 01       	movw	r24, r22
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <dtoa_prf+0x166>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	28 0f       	add	r18, r24
     dfe:	39 1f       	adc	r19, r25
     e00:	ff 20       	and	r15, r15
     e02:	21 f0       	breq	.+8      	; 0xe0c <dtoa_prf+0x176>
     e04:	8f 2d       	mov	r24, r15
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <dtoa_prf+0x17a>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	82 0f       	add	r24, r18
     e12:	93 1f       	adc	r25, r19
     e14:	21 2f       	mov	r18, r17
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	82 17       	cp	r24, r18
     e1a:	93 07       	cpc	r25, r19
     e1c:	1c f4       	brge	.+6      	; 0xe24 <dtoa_prf+0x18e>
     e1e:	51 2f       	mov	r21, r17
     e20:	58 1b       	sub	r21, r24
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <dtoa_prf+0x190>
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	8e 2d       	mov	r24, r14
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9c 01       	movw	r18, r24
     e2c:	20 71       	andi	r18, 0x10	; 16
     e2e:	30 70       	andi	r19, 0x00	; 0
     e30:	e4 fc       	sbrc	r14, 4
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <dtoa_prf+0x1b8>
     e34:	e3 fc       	sbrc	r14, 3
     e36:	0b c0       	rjmp	.+22     	; 0xe4e <dtoa_prf+0x1b8>
     e38:	85 2f       	mov	r24, r21
     e3a:	f6 01       	movw	r30, r12
     e3c:	90 e2       	ldi	r25, 0x20	; 32
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <dtoa_prf+0x1ae>
     e40:	91 93       	st	Z+, r25
     e42:	81 50       	subi	r24, 0x01	; 1
     e44:	88 23       	and	r24, r24
     e46:	e1 f7       	brne	.-8      	; 0xe40 <dtoa_prf+0x1aa>
     e48:	c5 0e       	add	r12, r21
     e4a:	d1 1c       	adc	r13, r1
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	44 23       	and	r20, r20
     e50:	19 f0       	breq	.+6      	; 0xe58 <dtoa_prf+0x1c2>
     e52:	f6 01       	movw	r30, r12
     e54:	41 93       	st	Z+, r20
     e56:	6f 01       	movw	r12, r30
     e58:	21 15       	cp	r18, r1
     e5a:	31 05       	cpc	r19, r1
     e5c:	59 f4       	brne	.+22     	; 0xe74 <dtoa_prf+0x1de>
     e5e:	85 2f       	mov	r24, r21
     e60:	f6 01       	movw	r30, r12
     e62:	90 e3       	ldi	r25, 0x30	; 48
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <dtoa_prf+0x1d4>
     e66:	91 93       	st	Z+, r25
     e68:	81 50       	subi	r24, 0x01	; 1
     e6a:	88 23       	and	r24, r24
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <dtoa_prf+0x1d0>
     e6e:	c5 0e       	add	r12, r21
     e70:	d1 1c       	adc	r13, r1
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	b6 0e       	add	r11, r22
     e76:	4a 81       	ldd	r20, Y+2	; 0x02
     e78:	20 e1       	ldi	r18, 0x10	; 16
     e7a:	62 2e       	mov	r6, r18
     e7c:	71 2c       	mov	r7, r1
     e7e:	6a 22       	and	r6, r26
     e80:	7b 22       	and	r7, r27
     e82:	a4 ff       	sbrs	r26, 4
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <dtoa_prf+0x1f6>
     e86:	41 33       	cpi	r20, 0x31	; 49
     e88:	09 f4       	brne	.+2      	; 0xe8c <dtoa_prf+0x1f6>
     e8a:	ba 94       	dec	r11
     e8c:	1b 14       	cp	r1, r11
     e8e:	2c f4       	brge	.+10     	; 0xe9a <dtoa_prf+0x204>
     e90:	8b 2d       	mov	r24, r11
     e92:	89 30       	cpi	r24, 0x09	; 9
     e94:	18 f0       	brcs	.+6      	; 0xe9c <dtoa_prf+0x206>
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <dtoa_prf+0x206>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	9b 01       	movw	r18, r22
     e9e:	77 ff       	sbrs	r23, 7
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <dtoa_prf+0x210>
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	9e e2       	ldi	r25, 0x2E	; 46
     eac:	e9 2e       	mov	r14, r25
     eae:	4b 01       	movw	r8, r22
     eb0:	88 1a       	sub	r8, r24
     eb2:	91 08       	sbc	r9, r1
     eb4:	cb 01       	movw	r24, r22
     eb6:	82 1b       	sub	r24, r18
     eb8:	93 0b       	sbc	r25, r19
     eba:	8e 01       	movw	r16, r28
     ebc:	0f 5f       	subi	r16, 0xFF	; 255
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	08 0f       	add	r16, r24
     ec2:	19 1f       	adc	r17, r25
     ec4:	8f 2d       	mov	r24, r15
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	aa 24       	eor	r10, r10
     eca:	bb 24       	eor	r11, r11
     ecc:	a8 1a       	sub	r10, r24
     ece:	b9 0a       	sbc	r11, r25
     ed0:	ff ef       	ldi	r31, 0xFF	; 255
     ed2:	2f 3f       	cpi	r18, 0xFF	; 255
     ed4:	3f 07       	cpc	r19, r31
     ed6:	19 f4       	brne	.+6      	; 0xede <dtoa_prf+0x248>
     ed8:	f6 01       	movw	r30, r12
     eda:	e1 92       	st	Z+, r14
     edc:	6f 01       	movw	r12, r30
     ede:	62 17       	cp	r22, r18
     ee0:	73 07       	cpc	r23, r19
     ee2:	44 f0       	brlt	.+16     	; 0xef4 <dtoa_prf+0x25e>
     ee4:	82 16       	cp	r8, r18
     ee6:	93 06       	cpc	r9, r19
     ee8:	2c f4       	brge	.+10     	; 0xef4 <dtoa_prf+0x25e>
     eea:	f8 01       	movw	r30, r16
     eec:	ea 0f       	add	r30, r26
     eee:	fb 1f       	adc	r31, r27
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <dtoa_prf+0x260>
     ef4:	80 e3       	ldi	r24, 0x30	; 48
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	30 40       	sbci	r19, 0x00	; 0
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	2a 15       	cp	r18, r10
     efe:	3b 05       	cpc	r19, r11
     f00:	24 f0       	brlt	.+8      	; 0xf0a <dtoa_prf+0x274>
     f02:	f6 01       	movw	r30, r12
     f04:	81 93       	st	Z+, r24
     f06:	6f 01       	movw	r12, r30
     f08:	e3 cf       	rjmp	.-58     	; 0xed0 <dtoa_prf+0x23a>
     f0a:	26 17       	cp	r18, r22
     f0c:	37 07       	cpc	r19, r23
     f0e:	41 f4       	brne	.+16     	; 0xf20 <dtoa_prf+0x28a>
     f10:	46 33       	cpi	r20, 0x36	; 54
     f12:	28 f4       	brcc	.+10     	; 0xf1e <dtoa_prf+0x288>
     f14:	45 33       	cpi	r20, 0x35	; 53
     f16:	21 f4       	brne	.+8      	; 0xf20 <dtoa_prf+0x28a>
     f18:	61 14       	cp	r6, r1
     f1a:	71 04       	cpc	r7, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <dtoa_prf+0x28a>
     f1e:	81 e3       	ldi	r24, 0x31	; 49
     f20:	f6 01       	movw	r30, r12
     f22:	81 93       	st	Z+, r24
     f24:	85 2f       	mov	r24, r21
     f26:	df 01       	movw	r26, r30
     f28:	90 e2       	ldi	r25, 0x20	; 32
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <dtoa_prf+0x29a>
     f2c:	9d 93       	st	X+, r25
     f2e:	81 50       	subi	r24, 0x01	; 1
     f30:	88 23       	and	r24, r24
     f32:	e1 f7       	brne	.-8      	; 0xf2c <dtoa_prf+0x296>
     f34:	e5 0f       	add	r30, r21
     f36:	f1 1d       	adc	r31, r1
     f38:	10 82       	st	Z, r1
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	29 96       	adiw	r28, 0x09	; 9
     f40:	ee e0       	ldi	r30, 0x0E	; 14
     f42:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x8>

00000f46 <__ftoa_engine>:
     f46:	28 30       	cpi	r18, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <__ftoa_engine+0x6>
     f4a:	27 e0       	ldi	r18, 0x07	; 7
     f4c:	33 27       	eor	r19, r19
     f4e:	da 01       	movw	r26, r20
     f50:	99 0f       	add	r25, r25
     f52:	31 1d       	adc	r19, r1
     f54:	87 fd       	sbrc	r24, 7
     f56:	91 60       	ori	r25, 0x01	; 1
     f58:	00 96       	adiw	r24, 0x00	; 0
     f5a:	61 05       	cpc	r22, r1
     f5c:	71 05       	cpc	r23, r1
     f5e:	39 f4       	brne	.+14     	; 0xf6e <__ftoa_engine+0x28>
     f60:	32 60       	ori	r19, 0x02	; 2
     f62:	2e 5f       	subi	r18, 0xFE	; 254
     f64:	3d 93       	st	X+, r19
     f66:	30 e3       	ldi	r19, 0x30	; 48
     f68:	2a 95       	dec	r18
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <__ftoa_engine+0x1e>
     f6c:	08 95       	ret
     f6e:	9f 3f       	cpi	r25, 0xFF	; 255
     f70:	30 f0       	brcs	.+12     	; 0xf7e <__ftoa_engine+0x38>
     f72:	80 38       	cpi	r24, 0x80	; 128
     f74:	71 05       	cpc	r23, r1
     f76:	61 05       	cpc	r22, r1
     f78:	09 f0       	breq	.+2      	; 0xf7c <__ftoa_engine+0x36>
     f7a:	3c 5f       	subi	r19, 0xFC	; 252
     f7c:	3c 5f       	subi	r19, 0xFC	; 252
     f7e:	3d 93       	st	X+, r19
     f80:	91 30       	cpi	r25, 0x01	; 1
     f82:	08 f0       	brcs	.+2      	; 0xf86 <__ftoa_engine+0x40>
     f84:	80 68       	ori	r24, 0x80	; 128
     f86:	91 1d       	adc	r25, r1
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	1f 93       	push	r17
     f8e:	0f 93       	push	r16
     f90:	ff 92       	push	r15
     f92:	ef 92       	push	r14
     f94:	19 2f       	mov	r17, r25
     f96:	98 7f       	andi	r25, 0xF8	; 248
     f98:	96 95       	lsr	r25
     f9a:	e9 2f       	mov	r30, r25
     f9c:	96 95       	lsr	r25
     f9e:	96 95       	lsr	r25
     fa0:	e9 0f       	add	r30, r25
     fa2:	ff 27       	eor	r31, r31
     fa4:	ee 53       	subi	r30, 0x3E	; 62
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	99 27       	eor	r25, r25
     faa:	33 27       	eor	r19, r19
     fac:	ee 24       	eor	r14, r14
     fae:	ff 24       	eor	r15, r15
     fb0:	a7 01       	movw	r20, r14
     fb2:	e7 01       	movw	r28, r14
     fb4:	05 90       	lpm	r0, Z+
     fb6:	08 94       	sec
     fb8:	07 94       	ror	r0
     fba:	28 f4       	brcc	.+10     	; 0xfc6 <__ftoa_engine+0x80>
     fbc:	36 0f       	add	r19, r22
     fbe:	e7 1e       	adc	r14, r23
     fc0:	f8 1e       	adc	r15, r24
     fc2:	49 1f       	adc	r20, r25
     fc4:	51 1d       	adc	r21, r1
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	06 94       	lsr	r0
     fd0:	a1 f7       	brne	.-24     	; 0xfba <__ftoa_engine+0x74>
     fd2:	05 90       	lpm	r0, Z+
     fd4:	07 94       	ror	r0
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <__ftoa_engine+0x9c>
     fd8:	e7 0e       	add	r14, r23
     fda:	f8 1e       	adc	r15, r24
     fdc:	49 1f       	adc	r20, r25
     fde:	56 1f       	adc	r21, r22
     fe0:	c1 1d       	adc	r28, r1
     fe2:	77 0f       	add	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	66 1f       	adc	r22, r22
     fea:	06 94       	lsr	r0
     fec:	a1 f7       	brne	.-24     	; 0xfd6 <__ftoa_engine+0x90>
     fee:	05 90       	lpm	r0, Z+
     ff0:	07 94       	ror	r0
     ff2:	28 f4       	brcc	.+10     	; 0xffe <__ftoa_engine+0xb8>
     ff4:	f8 0e       	add	r15, r24
     ff6:	49 1f       	adc	r20, r25
     ff8:	56 1f       	adc	r21, r22
     ffa:	c7 1f       	adc	r28, r23
     ffc:	d1 1d       	adc	r29, r1
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	66 1f       	adc	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	06 94       	lsr	r0
    1008:	a1 f7       	brne	.-24     	; 0xff2 <__ftoa_engine+0xac>
    100a:	05 90       	lpm	r0, Z+
    100c:	07 94       	ror	r0
    100e:	20 f4       	brcc	.+8      	; 0x1018 <__ftoa_engine+0xd2>
    1010:	49 0f       	add	r20, r25
    1012:	56 1f       	adc	r21, r22
    1014:	c7 1f       	adc	r28, r23
    1016:	d8 1f       	adc	r29, r24
    1018:	99 0f       	add	r25, r25
    101a:	66 1f       	adc	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	06 94       	lsr	r0
    1022:	a9 f7       	brne	.-22     	; 0x100e <__ftoa_engine+0xc8>
    1024:	84 91       	lpm	r24, Z
    1026:	10 95       	com	r17
    1028:	17 70       	andi	r17, 0x07	; 7
    102a:	41 f0       	breq	.+16     	; 0x103c <__ftoa_engine+0xf6>
    102c:	d6 95       	lsr	r29
    102e:	c7 95       	ror	r28
    1030:	57 95       	ror	r21
    1032:	47 95       	ror	r20
    1034:	f7 94       	ror	r15
    1036:	e7 94       	ror	r14
    1038:	1a 95       	dec	r17
    103a:	c1 f7       	brne	.-16     	; 0x102c <__ftoa_engine+0xe6>
    103c:	e8 e6       	ldi	r30, 0x68	; 104
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	68 94       	set
    1042:	15 90       	lpm	r1, Z+
    1044:	15 91       	lpm	r17, Z+
    1046:	35 91       	lpm	r19, Z+
    1048:	65 91       	lpm	r22, Z+
    104a:	95 91       	lpm	r25, Z+
    104c:	05 90       	lpm	r0, Z+
    104e:	7f e2       	ldi	r23, 0x2F	; 47
    1050:	73 95       	inc	r23
    1052:	e1 18       	sub	r14, r1
    1054:	f1 0a       	sbc	r15, r17
    1056:	43 0b       	sbc	r20, r19
    1058:	56 0b       	sbc	r21, r22
    105a:	c9 0b       	sbc	r28, r25
    105c:	d0 09       	sbc	r29, r0
    105e:	c0 f7       	brcc	.-16     	; 0x1050 <__ftoa_engine+0x10a>
    1060:	e1 0c       	add	r14, r1
    1062:	f1 1e       	adc	r15, r17
    1064:	43 1f       	adc	r20, r19
    1066:	56 1f       	adc	r21, r22
    1068:	c9 1f       	adc	r28, r25
    106a:	d0 1d       	adc	r29, r0
    106c:	7e f4       	brtc	.+30     	; 0x108c <__ftoa_engine+0x146>
    106e:	70 33       	cpi	r23, 0x30	; 48
    1070:	11 f4       	brne	.+4      	; 0x1076 <__ftoa_engine+0x130>
    1072:	8a 95       	dec	r24
    1074:	e6 cf       	rjmp	.-52     	; 0x1042 <__ftoa_engine+0xfc>
    1076:	e8 94       	clt
    1078:	01 50       	subi	r16, 0x01	; 1
    107a:	30 f0       	brcs	.+12     	; 0x1088 <__ftoa_engine+0x142>
    107c:	08 0f       	add	r16, r24
    107e:	0a f4       	brpl	.+2      	; 0x1082 <__ftoa_engine+0x13c>
    1080:	00 27       	eor	r16, r16
    1082:	02 17       	cp	r16, r18
    1084:	08 f4       	brcc	.+2      	; 0x1088 <__ftoa_engine+0x142>
    1086:	20 2f       	mov	r18, r16
    1088:	23 95       	inc	r18
    108a:	02 2f       	mov	r16, r18
    108c:	7a 33       	cpi	r23, 0x3A	; 58
    108e:	28 f0       	brcs	.+10     	; 0x109a <__ftoa_engine+0x154>
    1090:	79 e3       	ldi	r23, 0x39	; 57
    1092:	7d 93       	st	X+, r23
    1094:	2a 95       	dec	r18
    1096:	e9 f7       	brne	.-6      	; 0x1092 <__ftoa_engine+0x14c>
    1098:	10 c0       	rjmp	.+32     	; 0x10ba <__ftoa_engine+0x174>
    109a:	7d 93       	st	X+, r23
    109c:	2a 95       	dec	r18
    109e:	89 f6       	brne	.-94     	; 0x1042 <__ftoa_engine+0xfc>
    10a0:	06 94       	lsr	r0
    10a2:	97 95       	ror	r25
    10a4:	67 95       	ror	r22
    10a6:	37 95       	ror	r19
    10a8:	17 95       	ror	r17
    10aa:	17 94       	ror	r1
    10ac:	e1 18       	sub	r14, r1
    10ae:	f1 0a       	sbc	r15, r17
    10b0:	43 0b       	sbc	r20, r19
    10b2:	56 0b       	sbc	r21, r22
    10b4:	c9 0b       	sbc	r28, r25
    10b6:	d0 09       	sbc	r29, r0
    10b8:	98 f0       	brcs	.+38     	; 0x10e0 <__ftoa_engine+0x19a>
    10ba:	23 95       	inc	r18
    10bc:	7e 91       	ld	r23, -X
    10be:	73 95       	inc	r23
    10c0:	7a 33       	cpi	r23, 0x3A	; 58
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__ftoa_engine+0x180>
    10c4:	70 e3       	ldi	r23, 0x30	; 48
    10c6:	7c 93       	st	X, r23
    10c8:	20 13       	cpse	r18, r16
    10ca:	b8 f7       	brcc	.-18     	; 0x10ba <__ftoa_engine+0x174>
    10cc:	7e 91       	ld	r23, -X
    10ce:	70 61       	ori	r23, 0x10	; 16
    10d0:	7d 93       	st	X+, r23
    10d2:	30 f0       	brcs	.+12     	; 0x10e0 <__ftoa_engine+0x19a>
    10d4:	83 95       	inc	r24
    10d6:	71 e3       	ldi	r23, 0x31	; 49
    10d8:	7d 93       	st	X+, r23
    10da:	70 e3       	ldi	r23, 0x30	; 48
    10dc:	2a 95       	dec	r18
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <__ftoa_engine+0x192>
    10e0:	11 24       	eor	r1, r1
    10e2:	ef 90       	pop	r14
    10e4:	ff 90       	pop	r15
    10e6:	0f 91       	pop	r16
    10e8:	1f 91       	pop	r17
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	99 27       	eor	r25, r25
    10f0:	87 fd       	sbrc	r24, 7
    10f2:	90 95       	com	r25
    10f4:	08 95       	ret

000010f6 <__prologue_saves__>:
    10f6:	2f 92       	push	r2
    10f8:	3f 92       	push	r3
    10fa:	4f 92       	push	r4
    10fc:	5f 92       	push	r5
    10fe:	6f 92       	push	r6
    1100:	7f 92       	push	r7
    1102:	8f 92       	push	r8
    1104:	9f 92       	push	r9
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	ca 1b       	sub	r28, r26
    1120:	db 0b       	sbc	r29, r27
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	09 94       	ijmp

0000112e <__epilogue_restores__>:
    112e:	2a 88       	ldd	r2, Y+18	; 0x12
    1130:	39 88       	ldd	r3, Y+17	; 0x11
    1132:	48 88       	ldd	r4, Y+16	; 0x10
    1134:	5f 84       	ldd	r5, Y+15	; 0x0f
    1136:	6e 84       	ldd	r6, Y+14	; 0x0e
    1138:	7d 84       	ldd	r7, Y+13	; 0x0d
    113a:	8c 84       	ldd	r8, Y+12	; 0x0c
    113c:	9b 84       	ldd	r9, Y+11	; 0x0b
    113e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1140:	b9 84       	ldd	r11, Y+9	; 0x09
    1142:	c8 84       	ldd	r12, Y+8	; 0x08
    1144:	df 80       	ldd	r13, Y+7	; 0x07
    1146:	ee 80       	ldd	r14, Y+6	; 0x06
    1148:	fd 80       	ldd	r15, Y+5	; 0x05
    114a:	0c 81       	ldd	r16, Y+4	; 0x04
    114c:	1b 81       	ldd	r17, Y+3	; 0x03
    114e:	aa 81       	ldd	r26, Y+2	; 0x02
    1150:	b9 81       	ldd	r27, Y+1	; 0x01
    1152:	ce 0f       	add	r28, r30
    1154:	d1 1d       	adc	r29, r1
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	ed 01       	movw	r28, r26
    1162:	08 95       	ret

00001164 <_exit>:
    1164:	f8 94       	cli

00001166 <__stop_program>:
    1166:	ff cf       	rjmp	.-2      	; 0x1166 <__stop_program>
