
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000ede  00000f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800100  00800100  00000f72  2**0
                  ALLOC
  3 .stab         00002bd4  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000076a  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000042b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3c  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000405  00000000  00000000  00004ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000819  00000000  00000000  000053f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00005c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033e  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099f  00000000  00000000  000061ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00006b69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_11>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	lds	r16, 0x00
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__mulsf3_pse+0xa4>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__addsf3x+0x96>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__SREG__+0x45>
  f4:	ba a5       	lds	r27, 0x6a
  f6:	6f a5       	lds	r22, 0x6f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__SREG__+0x89>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <uitrollen+0x8>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__SREG__+0xd1>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <SCH_Add_Task+0x1e>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ee ed       	ldi	r30, 0xDE	; 222
 176:	fe e0       	ldi	r31, 0x0E	; 14
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	a0 30       	cpi	r26, 0x00	; 0
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	11 e0       	ldi	r17, 0x01	; 1
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	ad 32       	cpi	r26, 0x2D	; 45
 190:	b1 07       	cpc	r27, r17
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
 198:	0c 94 6d 07 	jmp	0xeda	; 0xeda <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <transmit>:

void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	95 ff       	sbrs	r25, 5
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <transmit+0x4>
	// send the data
	UDR0 = data;
 1aa:	80 93 c6 00 	sts	0x00C6, r24
}
 1ae:	08 95       	ret

000001b0 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	8c 01       	movw	r16, r24
 1ba:	eb 01       	movw	r28, r22
 1bc:	da 01       	movw	r26, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 1be:	80 91 00 01 	lds	r24, 0x0100
 1c2:	90 91 01 01 	lds	r25, 0x0101
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <SCH_Add_Task+0x46>
 1ca:	e7 e0       	ldi	r30, 0x07	; 7
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
 1d2:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 1d4:	b9 01       	movw	r22, r18
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	41 f0       	breq	.+16     	; 0x1ee <SCH_Add_Task+0x3e>
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	37 96       	adiw	r30, 0x07	; 7
 1e4:	26 30       	cpi	r18, 0x06	; 6
 1e6:	31 05       	cpc	r19, r1
 1e8:	a1 f7       	brne	.-24     	; 0x1d2 <SCH_Add_Task+0x22>
   {
      Index++;
 1ea:	84 2f       	mov	r24, r20
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <SCH_Add_Task+0x40>
 1ee:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	21 f4       	brne	.+8      	; 0x1fc <SCH_Add_Task+0x4c>
 1f4:	17 c0       	rjmp	.+46     	; 0x224 <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
 1fa:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
 1fc:	cb 01       	movw	r24, r22
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	86 1b       	sub	r24, r22
 20c:	97 0b       	sbc	r25, r23
 20e:	fc 01       	movw	r30, r24
 210:	e0 50       	subi	r30, 0x00	; 0
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	11 83       	std	Z+1, r17	; 0x01
 216:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
 218:	d3 83       	std	Z+3, r29	; 0x03
 21a:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 21c:	b5 83       	std	Z+5, r27	; 0x05
 21e:	a4 83       	std	Z+4, r26	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 220:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
 222:	84 2f       	mov	r24, r20
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e8 1b       	sub	r30, r24
 240:	f9 0b       	sbc	r31, r25
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	11 82       	std	Z+1, r1	; 0x01
 248:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 24a:	13 82       	std	Z+3, r1	; 0x03
 24c:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 24e:	15 82       	std	Z+5, r1	; 0x05
 250:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 252:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret

00000258 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 266:	c6 e0       	ldi	r28, 0x06	; 6
 268:	d1 e0       	ldi	r29, 0x01	; 1
 26a:	0f 2e       	mov	r0, r31
 26c:	fa ef       	ldi	r31, 0xFA	; 250
 26e:	ef 2e       	mov	r14, r31
 270:	ff ef       	ldi	r31, 0xFF	; 255
 272:	ff 2e       	mov	r15, r31
 274:	f0 2d       	mov	r31, r0
 276:	ec 0e       	add	r14, r28
 278:	fd 1e       	adc	r15, r29
 27a:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 27c:	88 81       	ld	r24, Y
 27e:	88 23       	and	r24, r24
 280:	91 f0       	breq	.+36     	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
 282:	d7 01       	movw	r26, r14
 284:	ed 91       	ld	r30, X+
 286:	fc 91       	ld	r31, X
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	30 97       	sbiw	r30, 0x00	; 0
 28c:	61 f0       	breq	.+24     	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 28e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 290:	88 81       	ld	r24, Y
 292:	81 50       	subi	r24, 0x01	; 1
 294:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 296:	f7 01       	movw	r30, r14
 298:	84 81       	ldd	r24, Z+4	; 0x04
 29a:	95 81       	ldd	r25, Z+5	; 0x05
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	19 f4       	brne	.+6      	; 0x2a6 <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
 2a0:	81 2f       	mov	r24, r17
 2a2:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 2a6:	1f 5f       	subi	r17, 0xFF	; 255
 2a8:	27 96       	adiw	r28, 0x07	; 7
 2aa:	87 e0       	ldi	r24, 0x07	; 7
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	e8 0e       	add	r14, r24
 2b0:	f9 1e       	adc	r15, r25
 2b2:	15 30       	cpi	r17, 0x05	; 5
 2b4:	19 f7       	brne	.-58     	; 0x27c <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	08 95       	ret

000002c6 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 2c6:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 2ca:	8c 2f       	mov	r24, r28
 2cc:	0e 94 17 01 	call	0x22e	; 0x22e <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 2d0:	cf 5f       	subi	r28, 0xFF	; 255
 2d2:	c5 30       	cpi	r28, 0x05	; 5
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <SCH_Init_T1+0x4>
   }
   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 2d6:	81 e7       	ldi	r24, 0x71	; 113
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	90 93 89 00 	sts	0x0089, r25
 2de:	80 93 88 00 	sts	0x0088, r24
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	80 93 81 00 	sts	0x0081, r24
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	80 93 6f 00 	sts	0x006F, r24
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 2f2:	78 94       	sei
}
 2f4:	08 95       	ret

000002f6 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
 314:	e0 e0       	ldi	r30, 0x00	; 0
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	df 01       	movw	r26, r30
 31a:	16 96       	adiw	r26, 0x06	; 6
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
 31c:	9f 01       	movw	r18, r30
 31e:	2d 5d       	subi	r18, 0xDD	; 221
 320:	3f 4f       	sbci	r19, 0xFF	; 255
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 322:	80 81       	ld	r24, Z
 324:	91 81       	ldd	r25, Z+1	; 0x01
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	91 f0       	breq	.+36     	; 0x34e <__vector_11+0x58>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 32a:	82 81       	ldd	r24, Z+2	; 0x02
 32c:	93 81       	ldd	r25, Z+3	; 0x03
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	59 f4       	brne	.+22     	; 0x348 <__vector_11+0x52>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 332:	8c 91       	ld	r24, X
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
 338:	84 81       	ldd	r24, Z+4	; 0x04
 33a:	95 81       	ldd	r25, Z+5	; 0x05
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	39 f0       	breq	.+14     	; 0x34e <__vector_11+0x58>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	93 83       	std	Z+3, r25	; 0x03
 344:	82 83       	std	Z+2, r24	; 0x02
 346:	03 c0       	rjmp	.+6      	; 0x34e <__vector_11+0x58>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	93 83       	std	Z+3, r25	; 0x03
 34c:	82 83       	std	Z+2, r24	; 0x02
 34e:	37 96       	adiw	r30, 0x07	; 7
 350:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 352:	e2 17       	cp	r30, r18
 354:	f3 07       	cpc	r31, r19
 356:	29 f7       	brne	.-54     	; 0x322 <__vector_11+0x2c>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <uart_init>:
double ADCRes;
char ADCOut[6];

void uart_init() {
	// set the baud rate
	UBRR0H = 19200;
 376:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 37a:	83 e3       	ldi	r24, 0x33	; 51
 37c:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 380:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
 384:	88 e1       	ldi	r24, 0x18	; 24
 386:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	80 93 c2 00 	sts	0x00C2, r24
}
 390:	08 95       	ret

00000392 <UART_Putstring>:

void UART_Putstring(char* eenstring)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
	while(*eenstring != 0X00)
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	39 f0       	breq	.+14     	; 0x3ac <UART_Putstring+0x1a>
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

void UART_Putstring(char* eenstring)
 39e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*eenstring != 0X00)
	{
		transmit(*eenstring);
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmit>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
}

void UART_Putstring(char* eenstring)
{
	while(*eenstring != 0X00)
 3a6:	89 91       	ld	r24, Y+
 3a8:	88 23       	and	r24, r24
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <UART_Putstring+0xe>
	{
		transmit(*eenstring);
		eenstring++;
	}
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <initADC>:
	UDR0 = data;
}

void initADC(){
	// zet ADC0 als de ADC input channel
	ADMUX |=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
 3b2:	ec e7       	ldi	r30, 0x7C	; 124
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 6e       	ori	r24, 0xE0	; 224
 3ba:	80 83       	st	Z, r24

	// schakel ADC in
	// zet prescaler naar 128
	ADCSRA |=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 3bc:	ea e7       	ldi	r30, 0x7A	; 122
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	87 6a       	ori	r24, 0xA7	; 167
 3c4:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADSC);
 3c6:	80 81       	ld	r24, Z
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	80 83       	st	Z, r24
}
 3cc:	08 95       	ret

000003ce <led_groen>:

void led_groen()
{
	DDRB = 0xff;
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;	
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	85 b9       	out	0x05, r24	; 5
}
 3d6:	08 95       	ret

000003d8 <uitrollen>:

void uitrollen()
{
	DDRB = 0xff;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000110;
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	93 ed       	ldi	r25, 0xD3	; 211
 3e4:	a0 e3       	ldi	r26, 0x30	; 48
 3e6:	81 50       	subi	r24, 0x01	; 1
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	a0 40       	sbci	r26, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <uitrollen+0xe>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <uitrollen+0x18>
 3f0:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0b00000100;
 3f2:	84 e0       	ldi	r24, 0x04	; 4
 3f4:	85 b9       	out	0x05, r24	; 5
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	93 ed       	ldi	r25, 0xD3	; 211
 3fa:	a0 e3       	ldi	r26, 0x30	; 48
 3fc:	81 50       	subi	r24, 0x01	; 1
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	a0 40       	sbci	r26, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <uitrollen+0x24>
 404:	00 c0       	rjmp	.+0      	; 0x406 <uitrollen+0x2e>
 406:	00 00       	nop
	_delay_ms(1000);
}
 408:	08 95       	ret

0000040a <inrollen>:

void inrollen()
{
	DDRB = 0xff;
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000011;
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	85 b9       	out	0x05, r24	; 5
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	93 ed       	ldi	r25, 0xD3	; 211
 416:	a0 e3       	ldi	r26, 0x30	; 48
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	a0 40       	sbci	r26, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <inrollen+0xe>
 420:	00 c0       	rjmp	.+0      	; 0x422 <inrollen+0x18>
 422:	00 00       	nop
	_delay_ms(1000);
	PORTB = 0b00000001;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	85 b9       	out	0x05, r24	; 5
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	93 ed       	ldi	r25, 0xD3	; 211
 42c:	a0 e3       	ldi	r26, 0x30	; 48
 42e:	81 50       	subi	r24, 0x01	; 1
 430:	90 40       	sbci	r25, 0x00	; 0
 432:	a0 40       	sbci	r26, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <inrollen+0x24>
 436:	00 c0       	rjmp	.+0      	; 0x438 <inrollen+0x2e>
 438:	00 00       	nop
	_delay_ms(1000);
}
 43a:	08 95       	ret

0000043c <led_rood>:

void led_rood()
{
	DDRB = 0xff;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000100;	
 440:	84 e0       	ldi	r24, 0x04	; 4
 442:	85 b9       	out	0x05, r24	; 5
}
 444:	08 95       	ret

00000446 <temp_gem>:

double temp_gem(){
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	0f 2e       	mov	r0, r31
 458:	f8 e2       	ldi	r31, 0x28	; 40
 45a:	ef 2e       	mov	r14, r31
 45c:	ff 24       	eor	r15, r15
 45e:	f0 2d       	mov	r31, r0
	
	int duur;
	double total = 0;
 460:	c0 e0       	ldi	r28, 0x00	; 0
 462:	00 e0       	ldi	r16, 0x00	; 0
 464:	d0 e0       	ldi	r29, 0x00	; 0
 466:	10 e0       	ldi	r17, 0x00	; 0
	
	for(duur = 0; duur < 40; duur++){
		ADCRes = (ADCH*(1100.0/256)-500)/10; //Bereken temperatuur in Celsius van de ADC output
 468:	0f 2e       	mov	r0, r31
 46a:	f9 e7       	ldi	r31, 0x79	; 121
 46c:	cf 2e       	mov	r12, r31
 46e:	dd 24       	eor	r13, r13
 470:	f0 2d       	mov	r31, r0
 472:	d6 01       	movw	r26, r12
 474:	6c 91       	ld	r22, X
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatsisf>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e8       	ldi	r19, 0x80	; 128
 484:	49 e8       	ldi	r20, 0x89	; 137
 486:	50 e4       	ldi	r21, 0x40	; 64
 488:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	4a ef       	ldi	r20, 0xFA	; 250
 492:	53 e4       	ldi	r21, 0x43	; 67
 494:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__subsf3>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e2       	ldi	r20, 0x20	; 32
 49e:	51 e4       	ldi	r21, 0x41	; 65
 4a0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__divsf3>
 4a4:	f6 2f       	mov	r31, r22
 4a6:	e7 2f       	mov	r30, r23
 4a8:	38 2f       	mov	r19, r24
 4aa:	29 2f       	mov	r18, r25
 4ac:	98 2f       	mov	r25, r24
 4ae:	4f 2f       	mov	r20, r31
 4b0:	5e 2f       	mov	r21, r30
 4b2:	69 2f       	mov	r22, r25
 4b4:	72 2f       	mov	r23, r18
 4b6:	40 93 29 01 	sts	0x0129, r20
 4ba:	50 93 2a 01 	sts	0x012A, r21
 4be:	60 93 2b 01 	sts	0x012B, r22
 4c2:	70 93 2c 01 	sts	0x012C, r23
		total += ADCRes; //Geef temperatuur aan total
 4c6:	4c 2f       	mov	r20, r28
 4c8:	50 2f       	mov	r21, r16
 4ca:	6d 2f       	mov	r22, r29
 4cc:	71 2f       	mov	r23, r17
 4ce:	cb 01       	movw	r24, r22
 4d0:	ba 01       	movw	r22, r20
 4d2:	42 2f       	mov	r20, r18
 4d4:	0f 2f       	mov	r16, r31
 4d6:	1e 2f       	mov	r17, r30
 4d8:	23 2f       	mov	r18, r19
 4da:	34 2f       	mov	r19, r20
 4dc:	a9 01       	movw	r20, r18
 4de:	98 01       	movw	r18, r16
 4e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__addsf3>
 4e4:	c6 2f       	mov	r28, r22
 4e6:	07 2f       	mov	r16, r23
 4e8:	d8 2f       	mov	r29, r24
 4ea:	19 2f       	mov	r17, r25
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	93 ed       	ldi	r25, 0xD3	; 211
 4f0:	a0 e3       	ldi	r26, 0x30	; 48
 4f2:	81 50       	subi	r24, 0x01	; 1
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	a0 40       	sbci	r26, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <temp_gem+0xac>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <temp_gem+0xb6>
 4fc:	00 00       	nop
 4fe:	08 94       	sec
 500:	e1 08       	sbc	r14, r1
 502:	f1 08       	sbc	r15, r1
double temp_gem(){
	
	int duur;
	double total = 0;
	
	for(duur = 0; duur < 40; duur++){
 504:	e1 14       	cp	r14, r1
 506:	f1 04       	cpc	r15, r1
 508:	09 f0       	breq	.+2      	; 0x50c <temp_gem+0xc6>
 50a:	b3 cf       	rjmp	.-154    	; 0x472 <temp_gem+0x2c>
		ADCRes = (ADCH*(1100.0/256)-500)/10; //Bereken temperatuur in Celsius van de ADC output
		total += ADCRes; //Geef temperatuur aan total
		_delay_ms(1000); //1 sec delay * 40 = 40 sec delay
	}	
	double avg = total / 40; //bereken gemiddelde
 50c:	8c 2f       	mov	r24, r28
 50e:	90 2f       	mov	r25, r16
 510:	ad 2f       	mov	r26, r29
 512:	b1 2f       	mov	r27, r17
 514:	bc 01       	movw	r22, r24
 516:	cd 01       	movw	r24, r26
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e2       	ldi	r20, 0x20	; 32
 51e:	52 e4       	ldi	r21, 0x42	; 66
 520:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__divsf3>
	
	return avg;
}
 524:	46 2f       	mov	r20, r22
 526:	57 2f       	mov	r21, r23
 528:	68 2f       	mov	r22, r24
 52a:	79 2f       	mov	r23, r25
 52c:	cb 01       	movw	r24, r22
 52e:	ba 01       	movw	r22, r20
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	df 90       	pop	r13
 53e:	cf 90       	pop	r12
 540:	08 95       	ret

00000542 <temp_show>:

void temp_show(){
 542:	cf 92       	push	r12
 544:	df 92       	push	r13
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
	double avg_temp = temp_gem();//gemiddelde temperatuur aan avg_temp geven
 552:	0e 94 23 02 	call	0x446	; 0x446 <temp_gem>
 556:	6b 01       	movw	r12, r22
 558:	7c 01       	movw	r14, r24
	int overgang_temp = 23;//temperatuur waarbij de rolluik omhoog of omlaag moet
	
	
	if(avg_temp < overgang_temp){  
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	48 eb       	ldi	r20, 0xB8	; 184
 560:	51 e4       	ldi	r21, 0x41	; 65
 562:	0e 94 5f 03 	call	0x6be	; 0x6be <__cmpsf2>
 566:	88 23       	and	r24, r24
 568:	1c f4       	brge	.+6      	; 0x570 <temp_show+0x2e>
		for(int i = 0; i < 2; i++){
			
		}
		led_groen();
 56a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <led_groen>
 56e:	0c c0       	rjmp	.+24     	; 0x588 <temp_show+0x46>
	}
	else if(avg_temp >= overgang_temp){
 570:	c7 01       	movw	r24, r14
 572:	b6 01       	movw	r22, r12
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	48 eb       	ldi	r20, 0xB8	; 184
 57a:	51 e4       	ldi	r21, 0x41	; 65
 57c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__gesf2>
 580:	88 23       	and	r24, r24
 582:	14 f0       	brlt	.+4      	; 0x588 <temp_show+0x46>
		led_rood();
 584:	0e 94 1e 02 	call	0x43c	; 0x43c <led_rood>
	}
	
	dtostrf(avg_temp, 2, 2, ADCOut);// float naar string
 588:	c3 e2       	ldi	r28, 0x23	; 35
 58a:	d1 e0       	ldi	r29, 0x01	; 1
 58c:	c7 01       	movw	r24, r14
 58e:	b6 01       	movw	r22, r12
 590:	42 e0       	ldi	r20, 0x02	; 2
 592:	22 e0       	ldi	r18, 0x02	; 2
 594:	8e 01       	movw	r16, r28
 596:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dtostrf>
 59a:	84 e5       	ldi	r24, 0x54	; 84
 59c:	9d ec       	ldi	r25, 0xCD	; 205
 59e:	ad e2       	ldi	r26, 0x2D	; 45
 5a0:	b3 e0       	ldi	r27, 0x03	; 3
 5a2:	81 50       	subi	r24, 0x01	; 1
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	a0 40       	sbci	r26, 0x00	; 0
 5a8:	b0 40       	sbci	r27, 0x00	; 0
 5aa:	d9 f7       	brne	.-10     	; 0x5a2 <temp_show+0x60>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <temp_show+0x6c>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <temp_show+0x6e>
 5b0:	00 00       	nop
	_delay_ms(20000);//20 sec delay zodat de centrale om de 60 sec de gemiddelde temperatuur krijgt
	UART_Putstring(ADCOut);
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 c9 01 	call	0x392	; 0x392 <UART_Putstring>
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	ef 90       	pop	r14
 5c4:	df 90       	pop	r13
 5c6:	cf 90       	pop	r12
 5c8:	08 95       	ret

000005ca <main>:


int main(void)
{
	led_groen(); // rolluik is eerst opgerold
 5ca:	0e 94 e7 01 	call	0x3ce	; 0x3ce <led_groen>
	uart_init();
 5ce:	0e 94 bb 01 	call	0x376	; 0x376 <uart_init>
	initADC();
 5d2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <initADC>
	
	SCH_Init_T1(); // init de timer en verwijder alle taken
 5d6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SCH_Init_T1>
	SCH_Add_Task(temp_show,0,1);
 5da:	81 ea       	ldi	r24, 0xA1	; 161
 5dc:	92 e0       	ldi	r25, 0x02	; 2
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SCH_Add_Task>
	SCH_Start(); // start de scheduler
 5ea:	0e 94 79 01 	call	0x2f2	; 0x2f2 <SCH_Start>
	
    while(1)
    {
		SCH_Dispatch_Tasks();
 5ee:	0e 94 2c 01 	call	0x258	; 0x258 <SCH_Dispatch_Tasks>
 5f2:	fd cf       	rjmp	.-6      	; 0x5ee <main+0x24>

000005f4 <__subsf3>:
 5f4:	50 58       	subi	r21, 0x80	; 128

000005f6 <__addsf3>:
 5f6:	bb 27       	eor	r27, r27
 5f8:	aa 27       	eor	r26, r26
 5fa:	0e d0       	rcall	.+28     	; 0x618 <__addsf3x>
 5fc:	44 c1       	rjmp	.+648    	; 0x886 <__fp_round>
 5fe:	35 d1       	rcall	.+618    	; 0x86a <__fp_pscA>
 600:	30 f0       	brcs	.+12     	; 0x60e <__addsf3+0x18>
 602:	3a d1       	rcall	.+628    	; 0x878 <__fp_pscB>
 604:	20 f0       	brcs	.+8      	; 0x60e <__addsf3+0x18>
 606:	31 f4       	brne	.+12     	; 0x614 <__addsf3+0x1e>
 608:	9f 3f       	cpi	r25, 0xFF	; 255
 60a:	11 f4       	brne	.+4      	; 0x610 <__addsf3+0x1a>
 60c:	1e f4       	brtc	.+6      	; 0x614 <__addsf3+0x1e>
 60e:	2a c1       	rjmp	.+596    	; 0x864 <__fp_nan>
 610:	0e f4       	brtc	.+2      	; 0x614 <__addsf3+0x1e>
 612:	e0 95       	com	r30
 614:	e7 fb       	bst	r30, 7
 616:	20 c1       	rjmp	.+576    	; 0x858 <__fp_inf>

00000618 <__addsf3x>:
 618:	e9 2f       	mov	r30, r25
 61a:	46 d1       	rcall	.+652    	; 0x8a8 <__fp_split3>
 61c:	80 f3       	brcs	.-32     	; 0x5fe <__addsf3+0x8>
 61e:	ba 17       	cp	r27, r26
 620:	62 07       	cpc	r22, r18
 622:	73 07       	cpc	r23, r19
 624:	84 07       	cpc	r24, r20
 626:	95 07       	cpc	r25, r21
 628:	18 f0       	brcs	.+6      	; 0x630 <__addsf3x+0x18>
 62a:	71 f4       	brne	.+28     	; 0x648 <__addsf3x+0x30>
 62c:	9e f5       	brtc	.+102    	; 0x694 <__addsf3x+0x7c>
 62e:	5e c1       	rjmp	.+700    	; 0x8ec <__fp_zero>
 630:	0e f4       	brtc	.+2      	; 0x634 <__addsf3x+0x1c>
 632:	e0 95       	com	r30
 634:	0b 2e       	mov	r0, r27
 636:	ba 2f       	mov	r27, r26
 638:	a0 2d       	mov	r26, r0
 63a:	0b 01       	movw	r0, r22
 63c:	b9 01       	movw	r22, r18
 63e:	90 01       	movw	r18, r0
 640:	0c 01       	movw	r0, r24
 642:	ca 01       	movw	r24, r20
 644:	a0 01       	movw	r20, r0
 646:	11 24       	eor	r1, r1
 648:	ff 27       	eor	r31, r31
 64a:	59 1b       	sub	r21, r25
 64c:	99 f0       	breq	.+38     	; 0x674 <__addsf3x+0x5c>
 64e:	59 3f       	cpi	r21, 0xF9	; 249
 650:	50 f4       	brcc	.+20     	; 0x666 <__addsf3x+0x4e>
 652:	50 3e       	cpi	r21, 0xE0	; 224
 654:	68 f1       	brcs	.+90     	; 0x6b0 <__addsf3x+0x98>
 656:	1a 16       	cp	r1, r26
 658:	f0 40       	sbci	r31, 0x00	; 0
 65a:	a2 2f       	mov	r26, r18
 65c:	23 2f       	mov	r18, r19
 65e:	34 2f       	mov	r19, r20
 660:	44 27       	eor	r20, r20
 662:	58 5f       	subi	r21, 0xF8	; 248
 664:	f3 cf       	rjmp	.-26     	; 0x64c <__addsf3x+0x34>
 666:	46 95       	lsr	r20
 668:	37 95       	ror	r19
 66a:	27 95       	ror	r18
 66c:	a7 95       	ror	r26
 66e:	f0 40       	sbci	r31, 0x00	; 0
 670:	53 95       	inc	r21
 672:	c9 f7       	brne	.-14     	; 0x666 <__addsf3x+0x4e>
 674:	7e f4       	brtc	.+30     	; 0x694 <__addsf3x+0x7c>
 676:	1f 16       	cp	r1, r31
 678:	ba 0b       	sbc	r27, r26
 67a:	62 0b       	sbc	r22, r18
 67c:	73 0b       	sbc	r23, r19
 67e:	84 0b       	sbc	r24, r20
 680:	ba f0       	brmi	.+46     	; 0x6b0 <__addsf3x+0x98>
 682:	91 50       	subi	r25, 0x01	; 1
 684:	a1 f0       	breq	.+40     	; 0x6ae <__addsf3x+0x96>
 686:	ff 0f       	add	r31, r31
 688:	bb 1f       	adc	r27, r27
 68a:	66 1f       	adc	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	c2 f7       	brpl	.-16     	; 0x682 <__addsf3x+0x6a>
 692:	0e c0       	rjmp	.+28     	; 0x6b0 <__addsf3x+0x98>
 694:	ba 0f       	add	r27, r26
 696:	62 1f       	adc	r22, r18
 698:	73 1f       	adc	r23, r19
 69a:	84 1f       	adc	r24, r20
 69c:	48 f4       	brcc	.+18     	; 0x6b0 <__addsf3x+0x98>
 69e:	87 95       	ror	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b7 95       	ror	r27
 6a6:	f7 95       	ror	r31
 6a8:	9e 3f       	cpi	r25, 0xFE	; 254
 6aa:	08 f0       	brcs	.+2      	; 0x6ae <__addsf3x+0x96>
 6ac:	b3 cf       	rjmp	.-154    	; 0x614 <__addsf3+0x1e>
 6ae:	93 95       	inc	r25
 6b0:	88 0f       	add	r24, r24
 6b2:	08 f0       	brcs	.+2      	; 0x6b6 <__addsf3x+0x9e>
 6b4:	99 27       	eor	r25, r25
 6b6:	ee 0f       	add	r30, r30
 6b8:	97 95       	ror	r25
 6ba:	87 95       	ror	r24
 6bc:	08 95       	ret

000006be <__cmpsf2>:
 6be:	a8 d0       	rcall	.+336    	; 0x810 <__fp_cmp>
 6c0:	08 f4       	brcc	.+2      	; 0x6c4 <__cmpsf2+0x6>
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	08 95       	ret

000006c6 <__divsf3>:
 6c6:	0c d0       	rcall	.+24     	; 0x6e0 <__divsf3x>
 6c8:	de c0       	rjmp	.+444    	; 0x886 <__fp_round>
 6ca:	d6 d0       	rcall	.+428    	; 0x878 <__fp_pscB>
 6cc:	40 f0       	brcs	.+16     	; 0x6de <__divsf3+0x18>
 6ce:	cd d0       	rcall	.+410    	; 0x86a <__fp_pscA>
 6d0:	30 f0       	brcs	.+12     	; 0x6de <__divsf3+0x18>
 6d2:	21 f4       	brne	.+8      	; 0x6dc <__divsf3+0x16>
 6d4:	5f 3f       	cpi	r21, 0xFF	; 255
 6d6:	19 f0       	breq	.+6      	; 0x6de <__divsf3+0x18>
 6d8:	bf c0       	rjmp	.+382    	; 0x858 <__fp_inf>
 6da:	51 11       	cpse	r21, r1
 6dc:	08 c1       	rjmp	.+528    	; 0x8ee <__fp_szero>
 6de:	c2 c0       	rjmp	.+388    	; 0x864 <__fp_nan>

000006e0 <__divsf3x>:
 6e0:	e3 d0       	rcall	.+454    	; 0x8a8 <__fp_split3>
 6e2:	98 f3       	brcs	.-26     	; 0x6ca <__divsf3+0x4>

000006e4 <__divsf3_pse>:
 6e4:	99 23       	and	r25, r25
 6e6:	c9 f3       	breq	.-14     	; 0x6da <__divsf3+0x14>
 6e8:	55 23       	and	r21, r21
 6ea:	b1 f3       	breq	.-20     	; 0x6d8 <__divsf3+0x12>
 6ec:	95 1b       	sub	r25, r21
 6ee:	55 0b       	sbc	r21, r21
 6f0:	bb 27       	eor	r27, r27
 6f2:	aa 27       	eor	r26, r26
 6f4:	62 17       	cp	r22, r18
 6f6:	73 07       	cpc	r23, r19
 6f8:	84 07       	cpc	r24, r20
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__divsf3_pse+0x26>
 6fc:	9f 5f       	subi	r25, 0xFF	; 255
 6fe:	5f 4f       	sbci	r21, 0xFF	; 255
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
 704:	44 1f       	adc	r20, r20
 706:	aa 1f       	adc	r26, r26
 708:	a9 f3       	breq	.-22     	; 0x6f4 <__divsf3_pse+0x10>
 70a:	33 d0       	rcall	.+102    	; 0x772 <__divsf3_pse+0x8e>
 70c:	0e 2e       	mov	r0, r30
 70e:	3a f0       	brmi	.+14     	; 0x71e <__divsf3_pse+0x3a>
 710:	e0 e8       	ldi	r30, 0x80	; 128
 712:	30 d0       	rcall	.+96     	; 0x774 <__divsf3_pse+0x90>
 714:	91 50       	subi	r25, 0x01	; 1
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	e6 95       	lsr	r30
 71a:	00 1c       	adc	r0, r0
 71c:	ca f7       	brpl	.-14     	; 0x710 <__divsf3_pse+0x2c>
 71e:	29 d0       	rcall	.+82     	; 0x772 <__divsf3_pse+0x8e>
 720:	fe 2f       	mov	r31, r30
 722:	27 d0       	rcall	.+78     	; 0x772 <__divsf3_pse+0x8e>
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	bb 1f       	adc	r27, r27
 72c:	26 17       	cp	r18, r22
 72e:	37 07       	cpc	r19, r23
 730:	48 07       	cpc	r20, r24
 732:	ab 07       	cpc	r26, r27
 734:	b0 e8       	ldi	r27, 0x80	; 128
 736:	09 f0       	breq	.+2      	; 0x73a <__divsf3_pse+0x56>
 738:	bb 0b       	sbc	r27, r27
 73a:	80 2d       	mov	r24, r0
 73c:	bf 01       	movw	r22, r30
 73e:	ff 27       	eor	r31, r31
 740:	93 58       	subi	r25, 0x83	; 131
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	2a f0       	brmi	.+10     	; 0x750 <__divsf3_pse+0x6c>
 746:	9e 3f       	cpi	r25, 0xFE	; 254
 748:	51 05       	cpc	r21, r1
 74a:	68 f0       	brcs	.+26     	; 0x766 <__divsf3_pse+0x82>
 74c:	85 c0       	rjmp	.+266    	; 0x858 <__fp_inf>
 74e:	cf c0       	rjmp	.+414    	; 0x8ee <__fp_szero>
 750:	5f 3f       	cpi	r21, 0xFF	; 255
 752:	ec f3       	brlt	.-6      	; 0x74e <__divsf3_pse+0x6a>
 754:	98 3e       	cpi	r25, 0xE8	; 232
 756:	dc f3       	brlt	.-10     	; 0x74e <__divsf3_pse+0x6a>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b7 95       	ror	r27
 760:	f7 95       	ror	r31
 762:	9f 5f       	subi	r25, 0xFF	; 255
 764:	c9 f7       	brne	.-14     	; 0x758 <__divsf3_pse+0x74>
 766:	88 0f       	add	r24, r24
 768:	91 1d       	adc	r25, r1
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret
 772:	e1 e0       	ldi	r30, 0x01	; 1
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	bb 1f       	adc	r27, r27
 77c:	62 17       	cp	r22, r18
 77e:	73 07       	cpc	r23, r19
 780:	84 07       	cpc	r24, r20
 782:	ba 07       	cpc	r27, r26
 784:	20 f0       	brcs	.+8      	; 0x78e <__divsf3_pse+0xaa>
 786:	62 1b       	sub	r22, r18
 788:	73 0b       	sbc	r23, r19
 78a:	84 0b       	sbc	r24, r20
 78c:	ba 0b       	sbc	r27, r26
 78e:	ee 1f       	adc	r30, r30
 790:	88 f7       	brcc	.-30     	; 0x774 <__divsf3_pse+0x90>
 792:	e0 95       	com	r30
 794:	08 95       	ret

00000796 <__floatunsisf>:
 796:	e8 94       	clt
 798:	09 c0       	rjmp	.+18     	; 0x7ac <__floatsisf+0x12>

0000079a <__floatsisf>:
 79a:	97 fb       	bst	r25, 7
 79c:	3e f4       	brtc	.+14     	; 0x7ac <__floatsisf+0x12>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	99 23       	and	r25, r25
 7ae:	a9 f0       	breq	.+42     	; 0x7da <__floatsisf+0x40>
 7b0:	f9 2f       	mov	r31, r25
 7b2:	96 e9       	ldi	r25, 0x96	; 150
 7b4:	bb 27       	eor	r27, r27
 7b6:	93 95       	inc	r25
 7b8:	f6 95       	lsr	r31
 7ba:	87 95       	ror	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f1 11       	cpse	r31, r1
 7c4:	f8 cf       	rjmp	.-16     	; 0x7b6 <__floatsisf+0x1c>
 7c6:	fa f4       	brpl	.+62     	; 0x806 <__floatsisf+0x6c>
 7c8:	bb 0f       	add	r27, r27
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__floatsisf+0x36>
 7cc:	60 ff       	sbrs	r22, 0
 7ce:	1b c0       	rjmp	.+54     	; 0x806 <__floatsisf+0x6c>
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	16 c0       	rjmp	.+44     	; 0x806 <__floatsisf+0x6c>
 7da:	88 23       	and	r24, r24
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <__floatsisf+0x48>
 7de:	96 e9       	ldi	r25, 0x96	; 150
 7e0:	11 c0       	rjmp	.+34     	; 0x804 <__floatsisf+0x6a>
 7e2:	77 23       	and	r23, r23
 7e4:	21 f0       	breq	.+8      	; 0x7ee <__floatsisf+0x54>
 7e6:	9e e8       	ldi	r25, 0x8E	; 142
 7e8:	87 2f       	mov	r24, r23
 7ea:	76 2f       	mov	r23, r22
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <__floatsisf+0x5e>
 7ee:	66 23       	and	r22, r22
 7f0:	71 f0       	breq	.+28     	; 0x80e <__floatsisf+0x74>
 7f2:	96 e8       	ldi	r25, 0x86	; 134
 7f4:	86 2f       	mov	r24, r22
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	2a f0       	brmi	.+10     	; 0x806 <__floatsisf+0x6c>
 7fc:	9a 95       	dec	r25
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	da f7       	brpl	.-10     	; 0x7fc <__floatsisf+0x62>
 806:	88 0f       	add	r24, r24
 808:	96 95       	lsr	r25
 80a:	87 95       	ror	r24
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <__fp_cmp>:
 810:	99 0f       	add	r25, r25
 812:	00 08       	sbc	r0, r0
 814:	55 0f       	add	r21, r21
 816:	aa 0b       	sbc	r26, r26
 818:	e0 e8       	ldi	r30, 0x80	; 128
 81a:	fe ef       	ldi	r31, 0xFE	; 254
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	e8 07       	cpc	r30, r24
 822:	f9 07       	cpc	r31, r25
 824:	c0 f0       	brcs	.+48     	; 0x856 <__fp_cmp+0x46>
 826:	12 16       	cp	r1, r18
 828:	13 06       	cpc	r1, r19
 82a:	e4 07       	cpc	r30, r20
 82c:	f5 07       	cpc	r31, r21
 82e:	98 f0       	brcs	.+38     	; 0x856 <__fp_cmp+0x46>
 830:	62 1b       	sub	r22, r18
 832:	73 0b       	sbc	r23, r19
 834:	84 0b       	sbc	r24, r20
 836:	95 0b       	sbc	r25, r21
 838:	39 f4       	brne	.+14     	; 0x848 <__fp_cmp+0x38>
 83a:	0a 26       	eor	r0, r26
 83c:	61 f0       	breq	.+24     	; 0x856 <__fp_cmp+0x46>
 83e:	23 2b       	or	r18, r19
 840:	24 2b       	or	r18, r20
 842:	25 2b       	or	r18, r21
 844:	21 f4       	brne	.+8      	; 0x84e <__fp_cmp+0x3e>
 846:	08 95       	ret
 848:	0a 26       	eor	r0, r26
 84a:	09 f4       	brne	.+2      	; 0x84e <__fp_cmp+0x3e>
 84c:	a1 40       	sbci	r26, 0x01	; 1
 84e:	a6 95       	lsr	r26
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	81 1d       	adc	r24, r1
 854:	81 1d       	adc	r24, r1
 856:	08 95       	ret

00000858 <__fp_inf>:
 858:	97 f9       	bld	r25, 7
 85a:	9f 67       	ori	r25, 0x7F	; 127
 85c:	80 e8       	ldi	r24, 0x80	; 128
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	08 95       	ret

00000864 <__fp_nan>:
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	80 ec       	ldi	r24, 0xC0	; 192
 868:	08 95       	ret

0000086a <__fp_pscA>:
 86a:	00 24       	eor	r0, r0
 86c:	0a 94       	dec	r0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	09 06       	cpc	r0, r25
 876:	08 95       	ret

00000878 <__fp_pscB>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	05 06       	cpc	r0, r21
 884:	08 95       	ret

00000886 <__fp_round>:
 886:	09 2e       	mov	r0, r25
 888:	03 94       	inc	r0
 88a:	00 0c       	add	r0, r0
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0xc>
 88e:	88 23       	and	r24, r24
 890:	52 f0       	brmi	.+20     	; 0x8a6 <__fp_round+0x20>
 892:	bb 0f       	add	r27, r27
 894:	40 f4       	brcc	.+16     	; 0x8a6 <__fp_round+0x20>
 896:	bf 2b       	or	r27, r31
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0x18>
 89a:	60 ff       	sbrs	r22, 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__fp_round+0x20>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__fp_split3>:
 8a8:	57 fd       	sbrc	r21, 7
 8aa:	90 58       	subi	r25, 0x80	; 128
 8ac:	44 0f       	add	r20, r20
 8ae:	55 1f       	adc	r21, r21
 8b0:	59 f0       	breq	.+22     	; 0x8c8 <__fp_splitA+0x10>
 8b2:	5f 3f       	cpi	r21, 0xFF	; 255
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__fp_splitA+0x1a>
 8b6:	47 95       	ror	r20

000008b8 <__fp_splitA>:
 8b8:	88 0f       	add	r24, r24
 8ba:	97 fb       	bst	r25, 7
 8bc:	99 1f       	adc	r25, r25
 8be:	61 f0       	breq	.+24     	; 0x8d8 <__fp_splitA+0x20>
 8c0:	9f 3f       	cpi	r25, 0xFF	; 255
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <__fp_splitA+0x2a>
 8c4:	87 95       	ror	r24
 8c6:	08 95       	ret
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	14 06       	cpc	r1, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <__fp_split3+0xe>
 8d2:	46 95       	lsr	r20
 8d4:	f1 df       	rcall	.-30     	; 0x8b8 <__fp_splitA>
 8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <__fp_splitA+0x30>
 8d8:	16 16       	cp	r1, r22
 8da:	17 06       	cpc	r1, r23
 8dc:	18 06       	cpc	r1, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	f1 cf       	rjmp	.-30     	; 0x8c4 <__fp_splitA+0xc>
 8e2:	86 95       	lsr	r24
 8e4:	71 05       	cpc	r23, r1
 8e6:	61 05       	cpc	r22, r1
 8e8:	08 94       	sec
 8ea:	08 95       	ret

000008ec <__fp_zero>:
 8ec:	e8 94       	clt

000008ee <__fp_szero>:
 8ee:	bb 27       	eor	r27, r27
 8f0:	66 27       	eor	r22, r22
 8f2:	77 27       	eor	r23, r23
 8f4:	cb 01       	movw	r24, r22
 8f6:	97 f9       	bld	r25, 7
 8f8:	08 95       	ret

000008fa <__gesf2>:
 8fa:	8a df       	rcall	.-236    	; 0x810 <__fp_cmp>
 8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
 8fe:	8f ef       	ldi	r24, 0xFF	; 255
 900:	08 95       	ret

00000902 <__mulsf3>:
 902:	0b d0       	rcall	.+22     	; 0x91a <__mulsf3x>
 904:	c0 cf       	rjmp	.-128    	; 0x886 <__fp_round>
 906:	b1 df       	rcall	.-158    	; 0x86a <__fp_pscA>
 908:	28 f0       	brcs	.+10     	; 0x914 <__mulsf3+0x12>
 90a:	b6 df       	rcall	.-148    	; 0x878 <__fp_pscB>
 90c:	18 f0       	brcs	.+6      	; 0x914 <__mulsf3+0x12>
 90e:	95 23       	and	r25, r21
 910:	09 f0       	breq	.+2      	; 0x914 <__mulsf3+0x12>
 912:	a2 cf       	rjmp	.-188    	; 0x858 <__fp_inf>
 914:	a7 cf       	rjmp	.-178    	; 0x864 <__fp_nan>
 916:	11 24       	eor	r1, r1
 918:	ea cf       	rjmp	.-44     	; 0x8ee <__fp_szero>

0000091a <__mulsf3x>:
 91a:	c6 df       	rcall	.-116    	; 0x8a8 <__fp_split3>
 91c:	a0 f3       	brcs	.-24     	; 0x906 <__mulsf3+0x4>

0000091e <__mulsf3_pse>:
 91e:	95 9f       	mul	r25, r21
 920:	d1 f3       	breq	.-12     	; 0x916 <__mulsf3+0x14>
 922:	95 0f       	add	r25, r21
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	55 1f       	adc	r21, r21
 928:	62 9f       	mul	r22, r18
 92a:	f0 01       	movw	r30, r0
 92c:	72 9f       	mul	r23, r18
 92e:	bb 27       	eor	r27, r27
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	63 9f       	mul	r22, r19
 936:	aa 27       	eor	r26, r26
 938:	f0 0d       	add	r31, r0
 93a:	b1 1d       	adc	r27, r1
 93c:	aa 1f       	adc	r26, r26
 93e:	64 9f       	mul	r22, r20
 940:	66 27       	eor	r22, r22
 942:	b0 0d       	add	r27, r0
 944:	a1 1d       	adc	r26, r1
 946:	66 1f       	adc	r22, r22
 948:	82 9f       	mul	r24, r18
 94a:	22 27       	eor	r18, r18
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	73 9f       	mul	r23, r19
 954:	b0 0d       	add	r27, r0
 956:	a1 1d       	adc	r26, r1
 958:	62 1f       	adc	r22, r18
 95a:	83 9f       	mul	r24, r19
 95c:	a0 0d       	add	r26, r0
 95e:	61 1d       	adc	r22, r1
 960:	22 1f       	adc	r18, r18
 962:	74 9f       	mul	r23, r20
 964:	33 27       	eor	r19, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	23 1f       	adc	r18, r19
 96c:	84 9f       	mul	r24, r20
 96e:	60 0d       	add	r22, r0
 970:	21 1d       	adc	r18, r1
 972:	82 2f       	mov	r24, r18
 974:	76 2f       	mov	r23, r22
 976:	6a 2f       	mov	r22, r26
 978:	11 24       	eor	r1, r1
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	8a f0       	brmi	.+34     	; 0x9a2 <__mulsf3_pse+0x84>
 980:	e1 f0       	breq	.+56     	; 0x9ba <__mulsf3_pse+0x9c>
 982:	88 23       	and	r24, r24
 984:	4a f0       	brmi	.+18     	; 0x998 <__mulsf3_pse+0x7a>
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	bb 1f       	adc	r27, r27
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	91 50       	subi	r25, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	a9 f7       	brne	.-22     	; 0x982 <__mulsf3_pse+0x64>
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	51 05       	cpc	r21, r1
 99c:	70 f0       	brcs	.+28     	; 0x9ba <__mulsf3_pse+0x9c>
 99e:	5c cf       	rjmp	.-328    	; 0x858 <__fp_inf>
 9a0:	a6 cf       	rjmp	.-180    	; 0x8ee <__fp_szero>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	ec f3       	brlt	.-6      	; 0x9a0 <__mulsf3_pse+0x82>
 9a6:	98 3e       	cpi	r25, 0xE8	; 232
 9a8:	dc f3       	brlt	.-10     	; 0x9a0 <__mulsf3_pse+0x82>
 9aa:	86 95       	lsr	r24
 9ac:	77 95       	ror	r23
 9ae:	67 95       	ror	r22
 9b0:	b7 95       	ror	r27
 9b2:	f7 95       	ror	r31
 9b4:	e7 95       	ror	r30
 9b6:	9f 5f       	subi	r25, 0xFF	; 255
 9b8:	c1 f7       	brne	.-16     	; 0x9aa <__mulsf3_pse+0x8c>
 9ba:	fe 2b       	or	r31, r30
 9bc:	88 0f       	add	r24, r24
 9be:	91 1d       	adc	r25, r1
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	97 f9       	bld	r25, 7
 9c6:	08 95       	ret

000009c8 <dtostrf>:
 9c8:	ef 92       	push	r14
 9ca:	0f 93       	push	r16
 9cc:	1f 93       	push	r17
 9ce:	cf 93       	push	r28
 9d0:	32 2f       	mov	r19, r18
 9d2:	c0 2f       	mov	r28, r16
 9d4:	47 ff       	sbrs	r20, 7
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <dtostrf+0x14>
 9d8:	a4 e1       	ldi	r26, 0x14	; 20
 9da:	01 c0       	rjmp	.+2      	; 0x9de <dtostrf+0x16>
 9dc:	a4 e0       	ldi	r26, 0x04	; 4
 9de:	e4 2f       	mov	r30, r20
 9e0:	ff 27       	eor	r31, r31
 9e2:	e7 fd       	sbrc	r30, 7
 9e4:	f0 95       	com	r31
 9e6:	f7 ff       	sbrs	r31, 7
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <dtostrf+0x28>
 9ea:	f0 95       	com	r31
 9ec:	e1 95       	neg	r30
 9ee:	ff 4f       	sbci	r31, 0xFF	; 255
 9f0:	4c 2f       	mov	r20, r28
 9f2:	51 2f       	mov	r21, r17
 9f4:	2e 2f       	mov	r18, r30
 9f6:	03 2f       	mov	r16, r19
 9f8:	ea 2e       	mov	r14, r26
 9fa:	0e 94 06 05 	call	0xa0c	; 0xa0c <dtoa_prf>
 9fe:	8c 2f       	mov	r24, r28
 a00:	91 2f       	mov	r25, r17
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	ef 90       	pop	r14
 a0a:	08 95       	ret

00000a0c <dtoa_prf>:
 a0c:	a9 e0       	ldi	r26, 0x09	; 9
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	ec e0       	ldi	r30, 0x0C	; 12
 a12:	f5 e0       	ldi	r31, 0x05	; 5
 a14:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__prologue_saves__+0x8>
 a18:	6a 01       	movw	r12, r20
 a1a:	12 2f       	mov	r17, r18
 a1c:	f0 2e       	mov	r15, r16
 a1e:	2b e3       	ldi	r18, 0x3B	; 59
 a20:	20 17       	cp	r18, r16
 a22:	18 f0       	brcs	.+6      	; 0xa2a <dtoa_prf+0x1e>
 a24:	b0 2e       	mov	r11, r16
 a26:	b3 94       	inc	r11
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <dtoa_prf+0x22>
 a2a:	3c e3       	ldi	r19, 0x3C	; 60
 a2c:	b3 2e       	mov	r11, r19
 a2e:	ae 01       	movw	r20, r28
 a30:	4f 5f       	subi	r20, 0xFF	; 255
 a32:	5f 4f       	sbci	r21, 0xFF	; 255
 a34:	27 e0       	ldi	r18, 0x07	; 7
 a36:	0b 2d       	mov	r16, r11
 a38:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__ftoa_engine>
 a3c:	bc 01       	movw	r22, r24
 a3e:	a9 81       	ldd	r26, Y+1	; 0x01
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	cd 01       	movw	r24, r26
 a44:	89 70       	andi	r24, 0x09	; 9
 a46:	90 70       	andi	r25, 0x00	; 0
 a48:	81 30       	cpi	r24, 0x01	; 1
 a4a:	91 05       	cpc	r25, r1
 a4c:	31 f0       	breq	.+12     	; 0xa5a <dtoa_prf+0x4e>
 a4e:	e1 fc       	sbrc	r14, 1
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <dtoa_prf+0x52>
 a52:	e0 fe       	sbrs	r14, 0
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <dtoa_prf+0x56>
 a56:	40 e2       	ldi	r20, 0x20	; 32
 a58:	05 c0       	rjmp	.+10     	; 0xa64 <dtoa_prf+0x58>
 a5a:	4d e2       	ldi	r20, 0x2D	; 45
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <dtoa_prf+0x58>
 a5e:	4b e2       	ldi	r20, 0x2B	; 43
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <dtoa_prf+0x58>
 a62:	40 e0       	ldi	r20, 0x00	; 0
 a64:	a3 ff       	sbrs	r26, 3
 a66:	36 c0       	rjmp	.+108    	; 0xad4 <dtoa_prf+0xc8>
 a68:	44 23       	and	r20, r20
 a6a:	11 f0       	breq	.+4      	; 0xa70 <dtoa_prf+0x64>
 a6c:	84 e0       	ldi	r24, 0x04	; 4
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <dtoa_prf+0x66>
 a70:	83 e0       	ldi	r24, 0x03	; 3
 a72:	81 17       	cp	r24, r17
 a74:	10 f4       	brcc	.+4      	; 0xa7a <dtoa_prf+0x6e>
 a76:	18 1b       	sub	r17, r24
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <dtoa_prf+0x70>
 a7a:	10 e0       	ldi	r17, 0x00	; 0
 a7c:	e4 fc       	sbrc	r14, 4
 a7e:	0b c0       	rjmp	.+22     	; 0xa96 <dtoa_prf+0x8a>
 a80:	91 2f       	mov	r25, r17
 a82:	f6 01       	movw	r30, r12
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <dtoa_prf+0x80>
 a88:	81 93       	st	Z+, r24
 a8a:	91 50       	subi	r25, 0x01	; 1
 a8c:	99 23       	and	r25, r25
 a8e:	e1 f7       	brne	.-8      	; 0xa88 <dtoa_prf+0x7c>
 a90:	c1 0e       	add	r12, r17
 a92:	d1 1c       	adc	r13, r1
 a94:	10 e0       	ldi	r17, 0x00	; 0
 a96:	44 23       	and	r20, r20
 a98:	19 f0       	breq	.+6      	; 0xaa0 <dtoa_prf+0x94>
 a9a:	f6 01       	movw	r30, r12
 a9c:	41 93       	st	Z+, r20
 a9e:	6f 01       	movw	r12, r30
 aa0:	e2 fe       	sbrs	r14, 2
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <dtoa_prf+0xa2>
 aa4:	8e e4       	ldi	r24, 0x4E	; 78
 aa6:	f6 01       	movw	r30, r12
 aa8:	80 83       	st	Z, r24
 aaa:	91 e4       	ldi	r25, 0x41	; 65
 aac:	04 c0       	rjmp	.+8      	; 0xab6 <dtoa_prf+0xaa>
 aae:	8e e6       	ldi	r24, 0x6E	; 110
 ab0:	f6 01       	movw	r30, r12
 ab2:	80 83       	st	Z, r24
 ab4:	91 e6       	ldi	r25, 0x61	; 97
 ab6:	91 83       	std	Z+1, r25	; 0x01
 ab8:	82 83       	std	Z+2, r24	; 0x02
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	c8 0e       	add	r12, r24
 ac0:	d9 1e       	adc	r13, r25
 ac2:	81 2f       	mov	r24, r17
 ac4:	f6 01       	movw	r30, r12
 ac6:	90 e2       	ldi	r25, 0x20	; 32
 ac8:	02 c0       	rjmp	.+4      	; 0xace <dtoa_prf+0xc2>
 aca:	91 93       	st	Z+, r25
 acc:	81 50       	subi	r24, 0x01	; 1
 ace:	88 23       	and	r24, r24
 ad0:	e1 f7       	brne	.-8      	; 0xaca <dtoa_prf+0xbe>
 ad2:	3a c0       	rjmp	.+116    	; 0xb48 <dtoa_prf+0x13c>
 ad4:	a2 ff       	sbrs	r26, 2
 ad6:	3f c0       	rjmp	.+126    	; 0xb56 <dtoa_prf+0x14a>
 ad8:	44 23       	and	r20, r20
 ada:	11 f0       	breq	.+4      	; 0xae0 <dtoa_prf+0xd4>
 adc:	84 e0       	ldi	r24, 0x04	; 4
 ade:	01 c0       	rjmp	.+2      	; 0xae2 <dtoa_prf+0xd6>
 ae0:	83 e0       	ldi	r24, 0x03	; 3
 ae2:	81 17       	cp	r24, r17
 ae4:	10 f4       	brcc	.+4      	; 0xaea <dtoa_prf+0xde>
 ae6:	18 1b       	sub	r17, r24
 ae8:	01 c0       	rjmp	.+2      	; 0xaec <dtoa_prf+0xe0>
 aea:	10 e0       	ldi	r17, 0x00	; 0
 aec:	e4 fc       	sbrc	r14, 4
 aee:	0b c0       	rjmp	.+22     	; 0xb06 <dtoa_prf+0xfa>
 af0:	91 2f       	mov	r25, r17
 af2:	f6 01       	movw	r30, r12
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	02 c0       	rjmp	.+4      	; 0xafc <dtoa_prf+0xf0>
 af8:	81 93       	st	Z+, r24
 afa:	91 50       	subi	r25, 0x01	; 1
 afc:	99 23       	and	r25, r25
 afe:	e1 f7       	brne	.-8      	; 0xaf8 <dtoa_prf+0xec>
 b00:	c1 0e       	add	r12, r17
 b02:	d1 1c       	adc	r13, r1
 b04:	10 e0       	ldi	r17, 0x00	; 0
 b06:	44 23       	and	r20, r20
 b08:	19 f0       	breq	.+6      	; 0xb10 <dtoa_prf+0x104>
 b0a:	f6 01       	movw	r30, r12
 b0c:	41 93       	st	Z+, r20
 b0e:	6f 01       	movw	r12, r30
 b10:	e2 fe       	sbrs	r14, 2
 b12:	07 c0       	rjmp	.+14     	; 0xb22 <dtoa_prf+0x116>
 b14:	89 e4       	ldi	r24, 0x49	; 73
 b16:	f6 01       	movw	r30, r12
 b18:	80 83       	st	Z, r24
 b1a:	8e e4       	ldi	r24, 0x4E	; 78
 b1c:	81 83       	std	Z+1, r24	; 0x01
 b1e:	86 e4       	ldi	r24, 0x46	; 70
 b20:	06 c0       	rjmp	.+12     	; 0xb2e <dtoa_prf+0x122>
 b22:	89 e6       	ldi	r24, 0x69	; 105
 b24:	f6 01       	movw	r30, r12
 b26:	80 83       	st	Z, r24
 b28:	8e e6       	ldi	r24, 0x6E	; 110
 b2a:	81 83       	std	Z+1, r24	; 0x01
 b2c:	86 e6       	ldi	r24, 0x66	; 102
 b2e:	82 83       	std	Z+2, r24	; 0x02
 b30:	83 e0       	ldi	r24, 0x03	; 3
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	c8 0e       	add	r12, r24
 b36:	d9 1e       	adc	r13, r25
 b38:	81 2f       	mov	r24, r17
 b3a:	f6 01       	movw	r30, r12
 b3c:	90 e2       	ldi	r25, 0x20	; 32
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <dtoa_prf+0x138>
 b40:	91 93       	st	Z+, r25
 b42:	81 50       	subi	r24, 0x01	; 1
 b44:	88 23       	and	r24, r24
 b46:	e1 f7       	brne	.-8      	; 0xb40 <dtoa_prf+0x134>
 b48:	c1 0e       	add	r12, r17
 b4a:	d1 1c       	adc	r13, r1
 b4c:	f6 01       	movw	r30, r12
 b4e:	10 82       	st	Z, r1
 b50:	8e ef       	ldi	r24, 0xFE	; 254
 b52:	9f ef       	ldi	r25, 0xFF	; 255
 b54:	af c0       	rjmp	.+350    	; 0xcb4 <dtoa_prf+0x2a8>
 b56:	21 e0       	ldi	r18, 0x01	; 1
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	44 23       	and	r20, r20
 b5c:	11 f4       	brne	.+4      	; 0xb62 <dtoa_prf+0x156>
 b5e:	20 e0       	ldi	r18, 0x00	; 0
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	16 16       	cp	r1, r22
 b64:	17 06       	cpc	r1, r23
 b66:	1c f4       	brge	.+6      	; 0xb6e <dtoa_prf+0x162>
 b68:	cb 01       	movw	r24, r22
 b6a:	01 96       	adiw	r24, 0x01	; 1
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <dtoa_prf+0x166>
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	28 0f       	add	r18, r24
 b74:	39 1f       	adc	r19, r25
 b76:	ff 20       	and	r15, r15
 b78:	21 f0       	breq	.+8      	; 0xb82 <dtoa_prf+0x176>
 b7a:	8f 2d       	mov	r24, r15
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	01 96       	adiw	r24, 0x01	; 1
 b80:	02 c0       	rjmp	.+4      	; 0xb86 <dtoa_prf+0x17a>
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	82 0f       	add	r24, r18
 b88:	93 1f       	adc	r25, r19
 b8a:	21 2f       	mov	r18, r17
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	82 17       	cp	r24, r18
 b90:	93 07       	cpc	r25, r19
 b92:	1c f4       	brge	.+6      	; 0xb9a <dtoa_prf+0x18e>
 b94:	51 2f       	mov	r21, r17
 b96:	58 1b       	sub	r21, r24
 b98:	01 c0       	rjmp	.+2      	; 0xb9c <dtoa_prf+0x190>
 b9a:	50 e0       	ldi	r21, 0x00	; 0
 b9c:	8e 2d       	mov	r24, r14
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	9c 01       	movw	r18, r24
 ba2:	20 71       	andi	r18, 0x10	; 16
 ba4:	30 70       	andi	r19, 0x00	; 0
 ba6:	e4 fc       	sbrc	r14, 4
 ba8:	0d c0       	rjmp	.+26     	; 0xbc4 <dtoa_prf+0x1b8>
 baa:	e3 fc       	sbrc	r14, 3
 bac:	0b c0       	rjmp	.+22     	; 0xbc4 <dtoa_prf+0x1b8>
 bae:	85 2f       	mov	r24, r21
 bb0:	f6 01       	movw	r30, r12
 bb2:	90 e2       	ldi	r25, 0x20	; 32
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <dtoa_prf+0x1ae>
 bb6:	91 93       	st	Z+, r25
 bb8:	81 50       	subi	r24, 0x01	; 1
 bba:	88 23       	and	r24, r24
 bbc:	e1 f7       	brne	.-8      	; 0xbb6 <dtoa_prf+0x1aa>
 bbe:	c5 0e       	add	r12, r21
 bc0:	d1 1c       	adc	r13, r1
 bc2:	50 e0       	ldi	r21, 0x00	; 0
 bc4:	44 23       	and	r20, r20
 bc6:	19 f0       	breq	.+6      	; 0xbce <dtoa_prf+0x1c2>
 bc8:	f6 01       	movw	r30, r12
 bca:	41 93       	st	Z+, r20
 bcc:	6f 01       	movw	r12, r30
 bce:	21 15       	cp	r18, r1
 bd0:	31 05       	cpc	r19, r1
 bd2:	59 f4       	brne	.+22     	; 0xbea <dtoa_prf+0x1de>
 bd4:	85 2f       	mov	r24, r21
 bd6:	f6 01       	movw	r30, r12
 bd8:	90 e3       	ldi	r25, 0x30	; 48
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <dtoa_prf+0x1d4>
 bdc:	91 93       	st	Z+, r25
 bde:	81 50       	subi	r24, 0x01	; 1
 be0:	88 23       	and	r24, r24
 be2:	e1 f7       	brne	.-8      	; 0xbdc <dtoa_prf+0x1d0>
 be4:	c5 0e       	add	r12, r21
 be6:	d1 1c       	adc	r13, r1
 be8:	50 e0       	ldi	r21, 0x00	; 0
 bea:	b6 0e       	add	r11, r22
 bec:	4a 81       	ldd	r20, Y+2	; 0x02
 bee:	20 e1       	ldi	r18, 0x10	; 16
 bf0:	62 2e       	mov	r6, r18
 bf2:	71 2c       	mov	r7, r1
 bf4:	6a 22       	and	r6, r26
 bf6:	7b 22       	and	r7, r27
 bf8:	a4 ff       	sbrs	r26, 4
 bfa:	03 c0       	rjmp	.+6      	; 0xc02 <dtoa_prf+0x1f6>
 bfc:	41 33       	cpi	r20, 0x31	; 49
 bfe:	09 f4       	brne	.+2      	; 0xc02 <dtoa_prf+0x1f6>
 c00:	ba 94       	dec	r11
 c02:	1b 14       	cp	r1, r11
 c04:	2c f4       	brge	.+10     	; 0xc10 <dtoa_prf+0x204>
 c06:	8b 2d       	mov	r24, r11
 c08:	89 30       	cpi	r24, 0x09	; 9
 c0a:	18 f0       	brcs	.+6      	; 0xc12 <dtoa_prf+0x206>
 c0c:	88 e0       	ldi	r24, 0x08	; 8
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <dtoa_prf+0x206>
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	9b 01       	movw	r18, r22
 c14:	77 ff       	sbrs	r23, 7
 c16:	02 c0       	rjmp	.+4      	; 0xc1c <dtoa_prf+0x210>
 c18:	20 e0       	ldi	r18, 0x00	; 0
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	a0 e0       	ldi	r26, 0x00	; 0
 c1e:	b0 e0       	ldi	r27, 0x00	; 0
 c20:	9e e2       	ldi	r25, 0x2E	; 46
 c22:	e9 2e       	mov	r14, r25
 c24:	4b 01       	movw	r8, r22
 c26:	88 1a       	sub	r8, r24
 c28:	91 08       	sbc	r9, r1
 c2a:	cb 01       	movw	r24, r22
 c2c:	82 1b       	sub	r24, r18
 c2e:	93 0b       	sbc	r25, r19
 c30:	8e 01       	movw	r16, r28
 c32:	0f 5f       	subi	r16, 0xFF	; 255
 c34:	1f 4f       	sbci	r17, 0xFF	; 255
 c36:	08 0f       	add	r16, r24
 c38:	19 1f       	adc	r17, r25
 c3a:	8f 2d       	mov	r24, r15
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	aa 24       	eor	r10, r10
 c40:	bb 24       	eor	r11, r11
 c42:	a8 1a       	sub	r10, r24
 c44:	b9 0a       	sbc	r11, r25
 c46:	ff ef       	ldi	r31, 0xFF	; 255
 c48:	2f 3f       	cpi	r18, 0xFF	; 255
 c4a:	3f 07       	cpc	r19, r31
 c4c:	19 f4       	brne	.+6      	; 0xc54 <dtoa_prf+0x248>
 c4e:	f6 01       	movw	r30, r12
 c50:	e1 92       	st	Z+, r14
 c52:	6f 01       	movw	r12, r30
 c54:	62 17       	cp	r22, r18
 c56:	73 07       	cpc	r23, r19
 c58:	44 f0       	brlt	.+16     	; 0xc6a <dtoa_prf+0x25e>
 c5a:	82 16       	cp	r8, r18
 c5c:	93 06       	cpc	r9, r19
 c5e:	2c f4       	brge	.+10     	; 0xc6a <dtoa_prf+0x25e>
 c60:	f8 01       	movw	r30, r16
 c62:	ea 0f       	add	r30, r26
 c64:	fb 1f       	adc	r31, r27
 c66:	81 81       	ldd	r24, Z+1	; 0x01
 c68:	01 c0       	rjmp	.+2      	; 0xc6c <dtoa_prf+0x260>
 c6a:	80 e3       	ldi	r24, 0x30	; 48
 c6c:	21 50       	subi	r18, 0x01	; 1
 c6e:	30 40       	sbci	r19, 0x00	; 0
 c70:	11 96       	adiw	r26, 0x01	; 1
 c72:	2a 15       	cp	r18, r10
 c74:	3b 05       	cpc	r19, r11
 c76:	24 f0       	brlt	.+8      	; 0xc80 <dtoa_prf+0x274>
 c78:	f6 01       	movw	r30, r12
 c7a:	81 93       	st	Z+, r24
 c7c:	6f 01       	movw	r12, r30
 c7e:	e3 cf       	rjmp	.-58     	; 0xc46 <dtoa_prf+0x23a>
 c80:	26 17       	cp	r18, r22
 c82:	37 07       	cpc	r19, r23
 c84:	41 f4       	brne	.+16     	; 0xc96 <dtoa_prf+0x28a>
 c86:	46 33       	cpi	r20, 0x36	; 54
 c88:	28 f4       	brcc	.+10     	; 0xc94 <dtoa_prf+0x288>
 c8a:	45 33       	cpi	r20, 0x35	; 53
 c8c:	21 f4       	brne	.+8      	; 0xc96 <dtoa_prf+0x28a>
 c8e:	61 14       	cp	r6, r1
 c90:	71 04       	cpc	r7, r1
 c92:	09 f4       	brne	.+2      	; 0xc96 <dtoa_prf+0x28a>
 c94:	81 e3       	ldi	r24, 0x31	; 49
 c96:	f6 01       	movw	r30, r12
 c98:	81 93       	st	Z+, r24
 c9a:	85 2f       	mov	r24, r21
 c9c:	df 01       	movw	r26, r30
 c9e:	90 e2       	ldi	r25, 0x20	; 32
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <dtoa_prf+0x29a>
 ca2:	9d 93       	st	X+, r25
 ca4:	81 50       	subi	r24, 0x01	; 1
 ca6:	88 23       	and	r24, r24
 ca8:	e1 f7       	brne	.-8      	; 0xca2 <dtoa_prf+0x296>
 caa:	e5 0f       	add	r30, r21
 cac:	f1 1d       	adc	r31, r1
 cae:	10 82       	st	Z, r1
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	29 96       	adiw	r28, 0x09	; 9
 cb6:	ee e0       	ldi	r30, 0x0E	; 14
 cb8:	0c 94 56 07 	jmp	0xeac	; 0xeac <__epilogue_restores__+0x8>

00000cbc <__ftoa_engine>:
 cbc:	28 30       	cpi	r18, 0x08	; 8
 cbe:	08 f0       	brcs	.+2      	; 0xcc2 <__ftoa_engine+0x6>
 cc0:	27 e0       	ldi	r18, 0x07	; 7
 cc2:	33 27       	eor	r19, r19
 cc4:	da 01       	movw	r26, r20
 cc6:	99 0f       	add	r25, r25
 cc8:	31 1d       	adc	r19, r1
 cca:	87 fd       	sbrc	r24, 7
 ccc:	91 60       	ori	r25, 0x01	; 1
 cce:	00 96       	adiw	r24, 0x00	; 0
 cd0:	61 05       	cpc	r22, r1
 cd2:	71 05       	cpc	r23, r1
 cd4:	39 f4       	brne	.+14     	; 0xce4 <__ftoa_engine+0x28>
 cd6:	32 60       	ori	r19, 0x02	; 2
 cd8:	2e 5f       	subi	r18, 0xFE	; 254
 cda:	3d 93       	st	X+, r19
 cdc:	30 e3       	ldi	r19, 0x30	; 48
 cde:	2a 95       	dec	r18
 ce0:	e1 f7       	brne	.-8      	; 0xcda <__ftoa_engine+0x1e>
 ce2:	08 95       	ret
 ce4:	9f 3f       	cpi	r25, 0xFF	; 255
 ce6:	30 f0       	brcs	.+12     	; 0xcf4 <__ftoa_engine+0x38>
 ce8:	80 38       	cpi	r24, 0x80	; 128
 cea:	71 05       	cpc	r23, r1
 cec:	61 05       	cpc	r22, r1
 cee:	09 f0       	breq	.+2      	; 0xcf2 <__ftoa_engine+0x36>
 cf0:	3c 5f       	subi	r19, 0xFC	; 252
 cf2:	3c 5f       	subi	r19, 0xFC	; 252
 cf4:	3d 93       	st	X+, r19
 cf6:	91 30       	cpi	r25, 0x01	; 1
 cf8:	08 f0       	brcs	.+2      	; 0xcfc <__ftoa_engine+0x40>
 cfa:	80 68       	ori	r24, 0x80	; 128
 cfc:	91 1d       	adc	r25, r1
 cfe:	df 93       	push	r29
 d00:	cf 93       	push	r28
 d02:	1f 93       	push	r17
 d04:	0f 93       	push	r16
 d06:	ff 92       	push	r15
 d08:	ef 92       	push	r14
 d0a:	19 2f       	mov	r17, r25
 d0c:	98 7f       	andi	r25, 0xF8	; 248
 d0e:	96 95       	lsr	r25
 d10:	e9 2f       	mov	r30, r25
 d12:	96 95       	lsr	r25
 d14:	96 95       	lsr	r25
 d16:	e9 0f       	add	r30, r25
 d18:	ff 27       	eor	r31, r31
 d1a:	ee 53       	subi	r30, 0x3E	; 62
 d1c:	ff 4f       	sbci	r31, 0xFF	; 255
 d1e:	99 27       	eor	r25, r25
 d20:	33 27       	eor	r19, r19
 d22:	ee 24       	eor	r14, r14
 d24:	ff 24       	eor	r15, r15
 d26:	a7 01       	movw	r20, r14
 d28:	e7 01       	movw	r28, r14
 d2a:	05 90       	lpm	r0, Z+
 d2c:	08 94       	sec
 d2e:	07 94       	ror	r0
 d30:	28 f4       	brcc	.+10     	; 0xd3c <__ftoa_engine+0x80>
 d32:	36 0f       	add	r19, r22
 d34:	e7 1e       	adc	r14, r23
 d36:	f8 1e       	adc	r15, r24
 d38:	49 1f       	adc	r20, r25
 d3a:	51 1d       	adc	r21, r1
 d3c:	66 0f       	add	r22, r22
 d3e:	77 1f       	adc	r23, r23
 d40:	88 1f       	adc	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	06 94       	lsr	r0
 d46:	a1 f7       	brne	.-24     	; 0xd30 <__ftoa_engine+0x74>
 d48:	05 90       	lpm	r0, Z+
 d4a:	07 94       	ror	r0
 d4c:	28 f4       	brcc	.+10     	; 0xd58 <__ftoa_engine+0x9c>
 d4e:	e7 0e       	add	r14, r23
 d50:	f8 1e       	adc	r15, r24
 d52:	49 1f       	adc	r20, r25
 d54:	56 1f       	adc	r21, r22
 d56:	c1 1d       	adc	r28, r1
 d58:	77 0f       	add	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	99 1f       	adc	r25, r25
 d5e:	66 1f       	adc	r22, r22
 d60:	06 94       	lsr	r0
 d62:	a1 f7       	brne	.-24     	; 0xd4c <__ftoa_engine+0x90>
 d64:	05 90       	lpm	r0, Z+
 d66:	07 94       	ror	r0
 d68:	28 f4       	brcc	.+10     	; 0xd74 <__ftoa_engine+0xb8>
 d6a:	f8 0e       	add	r15, r24
 d6c:	49 1f       	adc	r20, r25
 d6e:	56 1f       	adc	r21, r22
 d70:	c7 1f       	adc	r28, r23
 d72:	d1 1d       	adc	r29, r1
 d74:	88 0f       	add	r24, r24
 d76:	99 1f       	adc	r25, r25
 d78:	66 1f       	adc	r22, r22
 d7a:	77 1f       	adc	r23, r23
 d7c:	06 94       	lsr	r0
 d7e:	a1 f7       	brne	.-24     	; 0xd68 <__ftoa_engine+0xac>
 d80:	05 90       	lpm	r0, Z+
 d82:	07 94       	ror	r0
 d84:	20 f4       	brcc	.+8      	; 0xd8e <__ftoa_engine+0xd2>
 d86:	49 0f       	add	r20, r25
 d88:	56 1f       	adc	r21, r22
 d8a:	c7 1f       	adc	r28, r23
 d8c:	d8 1f       	adc	r29, r24
 d8e:	99 0f       	add	r25, r25
 d90:	66 1f       	adc	r22, r22
 d92:	77 1f       	adc	r23, r23
 d94:	88 1f       	adc	r24, r24
 d96:	06 94       	lsr	r0
 d98:	a9 f7       	brne	.-22     	; 0xd84 <__ftoa_engine+0xc8>
 d9a:	84 91       	lpm	r24, Z
 d9c:	10 95       	com	r17
 d9e:	17 70       	andi	r17, 0x07	; 7
 da0:	41 f0       	breq	.+16     	; 0xdb2 <__ftoa_engine+0xf6>
 da2:	d6 95       	lsr	r29
 da4:	c7 95       	ror	r28
 da6:	57 95       	ror	r21
 da8:	47 95       	ror	r20
 daa:	f7 94       	ror	r15
 dac:	e7 94       	ror	r14
 dae:	1a 95       	dec	r17
 db0:	c1 f7       	brne	.-16     	; 0xda2 <__ftoa_engine+0xe6>
 db2:	e8 e6       	ldi	r30, 0x68	; 104
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	68 94       	set
 db8:	15 90       	lpm	r1, Z+
 dba:	15 91       	lpm	r17, Z+
 dbc:	35 91       	lpm	r19, Z+
 dbe:	65 91       	lpm	r22, Z+
 dc0:	95 91       	lpm	r25, Z+
 dc2:	05 90       	lpm	r0, Z+
 dc4:	7f e2       	ldi	r23, 0x2F	; 47
 dc6:	73 95       	inc	r23
 dc8:	e1 18       	sub	r14, r1
 dca:	f1 0a       	sbc	r15, r17
 dcc:	43 0b       	sbc	r20, r19
 dce:	56 0b       	sbc	r21, r22
 dd0:	c9 0b       	sbc	r28, r25
 dd2:	d0 09       	sbc	r29, r0
 dd4:	c0 f7       	brcc	.-16     	; 0xdc6 <__ftoa_engine+0x10a>
 dd6:	e1 0c       	add	r14, r1
 dd8:	f1 1e       	adc	r15, r17
 dda:	43 1f       	adc	r20, r19
 ddc:	56 1f       	adc	r21, r22
 dde:	c9 1f       	adc	r28, r25
 de0:	d0 1d       	adc	r29, r0
 de2:	7e f4       	brtc	.+30     	; 0xe02 <__ftoa_engine+0x146>
 de4:	70 33       	cpi	r23, 0x30	; 48
 de6:	11 f4       	brne	.+4      	; 0xdec <__ftoa_engine+0x130>
 de8:	8a 95       	dec	r24
 dea:	e6 cf       	rjmp	.-52     	; 0xdb8 <__ftoa_engine+0xfc>
 dec:	e8 94       	clt
 dee:	01 50       	subi	r16, 0x01	; 1
 df0:	30 f0       	brcs	.+12     	; 0xdfe <__ftoa_engine+0x142>
 df2:	08 0f       	add	r16, r24
 df4:	0a f4       	brpl	.+2      	; 0xdf8 <__ftoa_engine+0x13c>
 df6:	00 27       	eor	r16, r16
 df8:	02 17       	cp	r16, r18
 dfa:	08 f4       	brcc	.+2      	; 0xdfe <__ftoa_engine+0x142>
 dfc:	20 2f       	mov	r18, r16
 dfe:	23 95       	inc	r18
 e00:	02 2f       	mov	r16, r18
 e02:	7a 33       	cpi	r23, 0x3A	; 58
 e04:	28 f0       	brcs	.+10     	; 0xe10 <__ftoa_engine+0x154>
 e06:	79 e3       	ldi	r23, 0x39	; 57
 e08:	7d 93       	st	X+, r23
 e0a:	2a 95       	dec	r18
 e0c:	e9 f7       	brne	.-6      	; 0xe08 <__ftoa_engine+0x14c>
 e0e:	10 c0       	rjmp	.+32     	; 0xe30 <__ftoa_engine+0x174>
 e10:	7d 93       	st	X+, r23
 e12:	2a 95       	dec	r18
 e14:	89 f6       	brne	.-94     	; 0xdb8 <__ftoa_engine+0xfc>
 e16:	06 94       	lsr	r0
 e18:	97 95       	ror	r25
 e1a:	67 95       	ror	r22
 e1c:	37 95       	ror	r19
 e1e:	17 95       	ror	r17
 e20:	17 94       	ror	r1
 e22:	e1 18       	sub	r14, r1
 e24:	f1 0a       	sbc	r15, r17
 e26:	43 0b       	sbc	r20, r19
 e28:	56 0b       	sbc	r21, r22
 e2a:	c9 0b       	sbc	r28, r25
 e2c:	d0 09       	sbc	r29, r0
 e2e:	98 f0       	brcs	.+38     	; 0xe56 <__ftoa_engine+0x19a>
 e30:	23 95       	inc	r18
 e32:	7e 91       	ld	r23, -X
 e34:	73 95       	inc	r23
 e36:	7a 33       	cpi	r23, 0x3A	; 58
 e38:	08 f0       	brcs	.+2      	; 0xe3c <__ftoa_engine+0x180>
 e3a:	70 e3       	ldi	r23, 0x30	; 48
 e3c:	7c 93       	st	X, r23
 e3e:	20 13       	cpse	r18, r16
 e40:	b8 f7       	brcc	.-18     	; 0xe30 <__ftoa_engine+0x174>
 e42:	7e 91       	ld	r23, -X
 e44:	70 61       	ori	r23, 0x10	; 16
 e46:	7d 93       	st	X+, r23
 e48:	30 f0       	brcs	.+12     	; 0xe56 <__ftoa_engine+0x19a>
 e4a:	83 95       	inc	r24
 e4c:	71 e3       	ldi	r23, 0x31	; 49
 e4e:	7d 93       	st	X+, r23
 e50:	70 e3       	ldi	r23, 0x30	; 48
 e52:	2a 95       	dec	r18
 e54:	e1 f7       	brne	.-8      	; 0xe4e <__ftoa_engine+0x192>
 e56:	11 24       	eor	r1, r1
 e58:	ef 90       	pop	r14
 e5a:	ff 90       	pop	r15
 e5c:	0f 91       	pop	r16
 e5e:	1f 91       	pop	r17
 e60:	cf 91       	pop	r28
 e62:	df 91       	pop	r29
 e64:	99 27       	eor	r25, r25
 e66:	87 fd       	sbrc	r24, 7
 e68:	90 95       	com	r25
 e6a:	08 95       	ret

00000e6c <__prologue_saves__>:
 e6c:	2f 92       	push	r2
 e6e:	3f 92       	push	r3
 e70:	4f 92       	push	r4
 e72:	5f 92       	push	r5
 e74:	6f 92       	push	r6
 e76:	7f 92       	push	r7
 e78:	8f 92       	push	r8
 e7a:	9f 92       	push	r9
 e7c:	af 92       	push	r10
 e7e:	bf 92       	push	r11
 e80:	cf 92       	push	r12
 e82:	df 92       	push	r13
 e84:	ef 92       	push	r14
 e86:	ff 92       	push	r15
 e88:	0f 93       	push	r16
 e8a:	1f 93       	push	r17
 e8c:	cf 93       	push	r28
 e8e:	df 93       	push	r29
 e90:	cd b7       	in	r28, 0x3d	; 61
 e92:	de b7       	in	r29, 0x3e	; 62
 e94:	ca 1b       	sub	r28, r26
 e96:	db 0b       	sbc	r29, r27
 e98:	0f b6       	in	r0, 0x3f	; 63
 e9a:	f8 94       	cli
 e9c:	de bf       	out	0x3e, r29	; 62
 e9e:	0f be       	out	0x3f, r0	; 63
 ea0:	cd bf       	out	0x3d, r28	; 61
 ea2:	09 94       	ijmp

00000ea4 <__epilogue_restores__>:
 ea4:	2a 88       	ldd	r2, Y+18	; 0x12
 ea6:	39 88       	ldd	r3, Y+17	; 0x11
 ea8:	48 88       	ldd	r4, Y+16	; 0x10
 eaa:	5f 84       	ldd	r5, Y+15	; 0x0f
 eac:	6e 84       	ldd	r6, Y+14	; 0x0e
 eae:	7d 84       	ldd	r7, Y+13	; 0x0d
 eb0:	8c 84       	ldd	r8, Y+12	; 0x0c
 eb2:	9b 84       	ldd	r9, Y+11	; 0x0b
 eb4:	aa 84       	ldd	r10, Y+10	; 0x0a
 eb6:	b9 84       	ldd	r11, Y+9	; 0x09
 eb8:	c8 84       	ldd	r12, Y+8	; 0x08
 eba:	df 80       	ldd	r13, Y+7	; 0x07
 ebc:	ee 80       	ldd	r14, Y+6	; 0x06
 ebe:	fd 80       	ldd	r15, Y+5	; 0x05
 ec0:	0c 81       	ldd	r16, Y+4	; 0x04
 ec2:	1b 81       	ldd	r17, Y+3	; 0x03
 ec4:	aa 81       	ldd	r26, Y+2	; 0x02
 ec6:	b9 81       	ldd	r27, Y+1	; 0x01
 ec8:	ce 0f       	add	r28, r30
 eca:	d1 1d       	adc	r29, r1
 ecc:	0f b6       	in	r0, 0x3f	; 63
 ece:	f8 94       	cli
 ed0:	de bf       	out	0x3e, r29	; 62
 ed2:	0f be       	out	0x3f, r0	; 63
 ed4:	cd bf       	out	0x3d, r28	; 61
 ed6:	ed 01       	movw	r28, r26
 ed8:	08 95       	ret

00000eda <_exit>:
 eda:	f8 94       	cli

00000edc <__stop_program>:
 edc:	ff cf       	rjmp	.-2      	; 0xedc <__stop_program>
